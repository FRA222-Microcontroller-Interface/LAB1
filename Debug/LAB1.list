
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077cc  080077cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080077cc  080077cc  000177cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077d4  080077d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080077dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000010  080077ec  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  080077ec  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000175dd  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a4c  00000000  00000000  00037660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102b  00000000  00000000  0003b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017757  00000000  00000000  00063fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea8a  00000000  00000000  0007b714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059d8  00000000  00000000  0018a1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0018fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007774 	.word	0x08007774

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08007774 	.word	0x08007774

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f825 	bl	8001566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f854 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fbda 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fbae 	bl	8000c84 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f932 	bl	8000790 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f97a 	bl	8000824 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f894 	bl	800065c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000534:	f000 f9c4 	bl	80008c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000538:	f000 fa10 	bl	800095c <MX_TIM4_Init>
  MX_TIM5_Init();
 800053c:	f000 fa86 	bl	8000a4c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000540:	f000 fafc 	bl	8000b3c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim1); //Servo Out Mode 1
  HAL_TIM_Base_Start(&htim2); //Timer 64 Bit
 8000544:	4819      	ldr	r0, [pc, #100]	; (80005ac <main+0x98>)
 8000546:	f004 fab3 	bl	8004ab0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); //Timer for DMA
 800054a:	4819      	ldr	r0, [pc, #100]	; (80005b0 <main+0x9c>)
 800054c:	f004 fab0 	bl	8004ab0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4); // Servo Out Mode 0
 8000550:	4818      	ldr	r0, [pc, #96]	; (80005b4 <main+0xa0>)
 8000552:	f004 faad 	bl	8004ab0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5); //Tester Generator
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <main+0xa4>)
 8000558:	f004 faaa 	bl	8004ab0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8); //Input Capture Tester
 800055c:	4817      	ldr	r0, [pc, #92]	; (80005bc <main+0xa8>)
 800055e:	f004 faa7 	bl	8004ab0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000562:	4812      	ldr	r0, [pc, #72]	; (80005ac <main+0x98>)
 8000564:	f004 fb14 	bl	8004b90 <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000568:	217f      	movs	r1, #127	; 0x7f
 800056a:	4815      	ldr	r0, [pc, #84]	; (80005c0 <main+0xac>)
 800056c:	f002 fb7a 	bl	8002c64 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 300);
 8000570:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000574:	4913      	ldr	r1, [pc, #76]	; (80005c4 <main+0xb0>)
 8000576:	4812      	ldr	r0, [pc, #72]	; (80005c0 <main+0xac>)
 8000578:	f001 fc66 	bl	8001e48 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800057c:	2100      	movs	r1, #0
 800057e:	480d      	ldr	r0, [pc, #52]	; (80005b4 <main+0xa0>)
 8000580:	f004 fbe0 	bl	8004d44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <main+0xa4>)
 8000588:	f004 fbdc 	bl	8004d44 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 800058c:	2100      	movs	r1, #0
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <main+0xa8>)
 8000590:	f004 fd4c 	bl	800502c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 8000594:	2104      	movs	r1, #4
 8000596:	4809      	ldr	r0, [pc, #36]	; (80005bc <main+0xa8>)
 8000598:	f004 fd48 	bl	800502c <HAL_TIM_IC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Micros();
 800059c:	f000 fc22 	bl	8000de4 <Micros>
	  ADC_Averaged();
 80005a0:	f000 fc40 	bl	8000e24 <ADC_Averaged>
	  SetState();
 80005a4:	f000 fc9c 	bl	8000ee0 <SetState>
	  Micros();
 80005a8:	e7f8      	b.n	800059c <main+0x88>
 80005aa:	bf00      	nop
 80005ac:	2000018c 	.word	0x2000018c
 80005b0:	200001d8 	.word	0x200001d8
 80005b4:	20000224 	.word	0x20000224
 80005b8:	20000270 	.word	0x20000270
 80005bc:	200002bc 	.word	0x200002bc
 80005c0:	2000002c 	.word	0x2000002c
 80005c4:	20000314 	.word	0x20000314

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	2238      	movs	r2, #56	; 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 f8a0 	bl	800771c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f003 f9d8 	bl	80039a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	2303      	movs	r3, #3
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000602:	2306      	movs	r3, #6
 8000604:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000606:	2355      	movs	r3, #85	; 0x55
 8000608:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fa74 	bl	8003b08 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000626:	f000 fd09 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2303      	movs	r3, #3
 8000630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fd72 	bl	800412c <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800064e:	f000 fcf5 	bl	800103c <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2220      	movs	r2, #32
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f007 f851 	bl	800771c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067a:	4b41      	ldr	r3, [pc, #260]	; (8000780 <MX_ADC1_Init+0x124>)
 800067c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000680:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000682:	4b3f      	ldr	r3, [pc, #252]	; (8000780 <MX_ADC1_Init+0x124>)
 8000684:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068a:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <MX_ADC1_Init+0x124>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000690:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <MX_ADC1_Init+0x124>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000696:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <MX_ADC1_Init+0x124>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <MX_ADC1_Init+0x124>)
 800069e:	2201      	movs	r2, #1
 80006a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <MX_ADC1_Init+0x124>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a8:	4b35      	ldr	r3, [pc, #212]	; (8000780 <MX_ADC1_Init+0x124>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006ae:	4b34      	ldr	r3, [pc, #208]	; (8000780 <MX_ADC1_Init+0x124>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <MX_ADC1_Init+0x124>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <MX_ADC1_Init+0x124>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80006c2:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <MX_ADC1_Init+0x124>)
 80006c4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <MX_ADC1_Init+0x124>)
 80006cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_ADC1_Init+0x124>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_ADC1_Init+0x124>)
 80006dc:	2200      	movs	r2, #0
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_ADC1_Init+0x124>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e8:	4825      	ldr	r0, [pc, #148]	; (8000780 <MX_ADC1_Init+0x124>)
 80006ea:	f001 f9f1 	bl	8001ad0 <HAL_ADC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006f4:	f000 fca2 	bl	800103c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000700:	4619      	mov	r1, r3
 8000702:	481f      	ldr	r0, [pc, #124]	; (8000780 <MX_ADC1_Init+0x124>)
 8000704:	f002 fb10 	bl	8002d28 <HAL_ADCEx_MultiModeConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800070e:	f000 fc95 	bl	800103c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC1_Init+0x128>)
 8000714:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000716:	2306      	movs	r3, #6
 8000718:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800071a:	2307      	movs	r3, #7
 800071c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800071e:	237f      	movs	r3, #127	; 0x7f
 8000720:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000722:	2304      	movs	r3, #4
 8000724:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4814      	ldr	r0, [pc, #80]	; (8000780 <MX_ADC1_Init+0x124>)
 8000730:	f001 fc7c 	bl	800202c <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800073a:	f000 fc7f 	bl	800103c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_ADC1_Init+0x12c>)
 8000740:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000742:	230c      	movs	r3, #12
 8000744:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_ADC1_Init+0x124>)
 800074c:	f001 fc6e 	bl	800202c <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000756:	f000 fc71 	bl	800103c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_ADC1_Init+0x130>)
 800075c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800075e:	2312      	movs	r3, #18
 8000760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_ADC1_Init+0x124>)
 8000768:	f001 fc60 	bl	800202c <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000772:	f000 fc63 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3730      	adds	r7, #48	; 0x30
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000002c 	.word	0x2000002c
 8000784:	04300002 	.word	0x04300002
 8000788:	08600004 	.word	0x08600004
 800078c:	3ef08000 	.word	0x3ef08000

08000790 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <MX_LPUART1_UART_Init+0x90>)
 8000798:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	f006 f934 	bl	8006a40 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 fc2d 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007e6:	f006 fecf 	bl	8007588 <HAL_UARTEx_SetTxFifoThreshold>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007f0:	f000 fc24 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 80007f8:	f006 ff04 	bl	8007604 <HAL_UARTEx_SetRxFifoThreshold>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000802:	f000 fc1b 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_LPUART1_UART_Init+0x8c>)
 8000808:	f006 fe85 	bl	8007516 <HAL_UARTEx_DisableFifoMode>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000812:	f000 fc13 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000f8 	.word	0x200000f8
 8000820:	40008000 	.word	0x40008000

08000824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_TIM2_Init+0x98>)
 8000844:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000848:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800084a:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_TIM2_Init+0x98>)
 800084c:	22a9      	movs	r2, #169	; 0xa9
 800084e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_TIM2_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_TIM2_Init+0x98>)
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_TIM2_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_TIM2_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086a:	4814      	ldr	r0, [pc, #80]	; (80008bc <MX_TIM2_Init+0x98>)
 800086c:	f004 f8c8 	bl	8004a00 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000876:	f000 fbe1 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_TIM2_Init+0x98>)
 8000888:	f004 ffd4 	bl	8005834 <HAL_TIM_ConfigClockSource>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000892:	f000 fbd3 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <MX_TIM2_Init+0x98>)
 80008a4:	f005 fff0 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ae:	f000 fbc5 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3720      	adds	r7, #32
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000018c 	.word	0x2000018c

080008c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_TIM3_Init+0x94>)
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <MX_TIM3_Init+0x98>)
 80008e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_TIM3_Init+0x94>)
 80008e6:	f244 2267 	movw	r2, #16999	; 0x4267
 80008ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_TIM3_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_TIM3_Init+0x94>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_TIM3_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_TIM3_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <MX_TIM3_Init+0x94>)
 8000906:	f004 f87b 	bl	8004a00 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000910:	f000 fb94 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	4619      	mov	r1, r3
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_TIM3_Init+0x94>)
 8000922:	f004 ff87 	bl	8005834 <HAL_TIM_ConfigClockSource>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800092c:	f000 fb86 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000930:	2320      	movs	r3, #32
 8000932:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_TIM3_Init+0x94>)
 800093e:	f005 ffa3 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 fb78 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200001d8 	.word	0x200001d8
 8000958:	40000400 	.word	0x40000400

0800095c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <MX_TIM4_Init+0xe8>)
 8000990:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <MX_TIM4_Init+0xec>)
 8000992:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000994:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_TIM4_Init+0xe8>)
 8000996:	22a9      	movs	r2, #169	; 0xa9
 8000998:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <MX_TIM4_Init+0xe8>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_TIM4_Init+0xe8>)
 80009a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_TIM4_Init+0xe8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <MX_TIM4_Init+0xe8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009b4:	4823      	ldr	r0, [pc, #140]	; (8000a44 <MX_TIM4_Init+0xe8>)
 80009b6:	f004 f823 	bl	8004a00 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009c0:	f000 fb3c 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481c      	ldr	r0, [pc, #112]	; (8000a44 <MX_TIM4_Init+0xe8>)
 80009d2:	f004 ff2f 	bl	8005834 <HAL_TIM_ConfigClockSource>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80009dc:	f000 fb2e 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009e0:	4818      	ldr	r0, [pc, #96]	; (8000a44 <MX_TIM4_Init+0xe8>)
 80009e2:	f004 f94d 	bl	8004c80 <HAL_TIM_PWM_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80009ec:	f000 fb26 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_TIM4_Init+0xe8>)
 8000a00:	f005 ff42 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a0a:	f000 fb17 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0e:	2360      	movs	r3, #96	; 0x60
 8000a10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000a12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_TIM4_Init+0xe8>)
 8000a28:	f004 fdf0 	bl	800560c <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000a32:	f000 fb03 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <MX_TIM4_Init+0xe8>)
 8000a38:	f000 fcb8 	bl	80013ac <HAL_TIM_MspPostInit>

}
 8000a3c:	bf00      	nop
 8000a3e:	3738      	adds	r7, #56	; 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000224 	.word	0x20000224
 8000a48:	40000800 	.word	0x40000800

08000a4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000a80:	4a2d      	ldr	r2, [pc, #180]	; (8000b38 <MX_TIM5_Init+0xec>)
 8000a82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000a86:	22a9      	movs	r2, #169	; 0xa9
 8000a88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000a92:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000aa4:	4823      	ldr	r0, [pc, #140]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000aa6:	f003 ffab 	bl	8004a00 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000ab0:	f000 fac4 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481c      	ldr	r0, [pc, #112]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000ac2:	f004 feb7 	bl	8005834 <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000acc:	f000 fab6 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ad0:	4818      	ldr	r0, [pc, #96]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000ad2:	f004 f8d5 	bl	8004c80 <HAL_TIM_PWM_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000adc:	f000 faae 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000af0:	f005 feca 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000afa:	f000 fa9f 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afe:	2360      	movs	r3, #96	; 0x60
 8000b00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000b02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000b18:	f004 fd78 	bl	800560c <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8000b22:	f000 fa8b 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <MX_TIM5_Init+0xe8>)
 8000b28:	f000 fc40 	bl	80013ac <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3738      	adds	r7, #56	; 0x38
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000270 	.word	0x20000270
 8000b38:	40000c00 	.word	0x40000c00

08000b3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b090      	sub	sp, #64	; 0x40
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b78:	4b40      	ldr	r3, [pc, #256]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000b7a:	4a41      	ldr	r2, [pc, #260]	; (8000c80 <MX_TIM8_Init+0x144>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8000b7e:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000b80:	22a9      	movs	r2, #169	; 0xa9
 8000b82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000;
 8000b8a:	4b3c      	ldr	r3, [pc, #240]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000b8c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b92:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b98:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ba4:	4835      	ldr	r0, [pc, #212]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000ba6:	f003 ff2b 	bl	8004a00 <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000bb0:	f000 fa44 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	482e      	ldr	r0, [pc, #184]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000bc2:	f004 fe37 	bl	8005834 <HAL_TIM_ConfigClockSource>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f000 fa36 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000bd0:	482a      	ldr	r0, [pc, #168]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000bd2:	f004 f9c9 	bl	8004f68 <HAL_TIM_IC_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000bdc:	f000 fa2e 	bl	800103c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000be0:	2304      	movs	r3, #4
 8000be2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000be4:	2350      	movs	r3, #80	; 0x50
 8000be6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4820      	ldr	r0, [pc, #128]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000bfc:	f004 ff30 	bl	8005a60 <HAL_TIM_SlaveConfigSynchro>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 8000c06:	f000 fa19 	bl	800103c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	4816      	ldr	r0, [pc, #88]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000c24:	f004 fc55 	bl	80054d2 <HAL_TIM_IC_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8000c2e:	f000 fa05 	bl	800103c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c32:	2302      	movs	r3, #2
 8000c34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c36:	2302      	movs	r3, #2
 8000c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2204      	movs	r2, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000c44:	f004 fc45 	bl	80054d2 <HAL_TIM_IC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000c4e:	f000 f9f5 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_TIM8_Init+0x140>)
 8000c64:	f005 fe10 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM8_Init+0x136>
  {
    Error_Handler();
 8000c6e:	f000 f9e5 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3740      	adds	r7, #64	; 0x40
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200002bc 	.word	0x200002bc
 8000c80:	40013400 	.word	0x40013400

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6493      	str	r3, [r2, #72]	; 0x48
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6493      	str	r3, [r2, #72]	; 0x48
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	200b      	movs	r0, #11
 8000cc0:	f002 fa15 	bl	80030ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cc4:	200b      	movs	r0, #11
 8000cc6:	f002 fa2c 	bl	8003122 <HAL_NVIC_EnableIRQ>

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a2e      	ldr	r2, [pc, #184]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a28      	ldr	r2, [pc, #160]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a22      	ldr	r2, [pc, #136]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_GPIO_Init+0xd4>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2120      	movs	r1, #32
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f002 fdf3 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <MX_GPIO_Init+0xd8>)
 8000d72:	f002 fc63 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d76:	2320      	movs	r3, #32
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f002 fc54 	bl	800363c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2028      	movs	r0, #40	; 0x28
 8000d9a:	f002 f9a8 	bl	80030ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d9e:	2028      	movs	r0, #40	; 0x28
 8000da0:	f002 f9bf 	bl	8003122 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40021000 	.word	0x40021000
 8000db0:	48000800 	.word	0x48000800

08000db4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d104      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		CountOver++;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000dcc:	6013      	str	r3, [r2, #0]
	}
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	2000018c 	.word	0x2000018c
 8000de0:	20000310 	.word	0x20000310

08000de4 <Micros>:

void Micros()
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	timestamp = (CountOver * Counter_TIM2) + __HAL_TIM_GET_COUNTER(&htim2);
 8000de8:	490a      	ldr	r1, [pc, #40]	; (8000e14 <Micros+0x30>)
 8000dea:	6809      	ldr	r1, [r1, #0]
 8000dec:	480a      	ldr	r0, [pc, #40]	; (8000e18 <Micros+0x34>)
 8000dee:	6800      	ldr	r0, [r0, #0]
 8000df0:	fb01 f000 	mul.w	r0, r1, r0
 8000df4:	4909      	ldr	r1, [pc, #36]	; (8000e1c <Micros+0x38>)
 8000df6:	6809      	ldr	r1, [r1, #0]
 8000df8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000dfa:	4401      	add	r1, r0
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	460a      	mov	r2, r1
 8000e00:	4603      	mov	r3, r0
 8000e02:	4907      	ldr	r1, [pc, #28]	; (8000e20 <Micros+0x3c>)
 8000e04:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000310 	.word	0x20000310
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	2000018c 	.word	0x2000018c
 8000e20:	20000308 	.word	0x20000308

08000e24 <ADC_Averaged>:

void ADC_Averaged()
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	e028      	b.n	8000e82 <ADC_Averaged+0x5e>
	{
		ADC_SumAPot[0] += ADCBuffer[3*i];
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <ADC_Averaged+0xac>)
 8000e32:	6819      	ldr	r1, [r3, #0]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a25      	ldr	r2, [pc, #148]	; (8000ed4 <ADC_Averaged+0xb0>)
 8000e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e42:	440b      	add	r3, r1
 8000e44:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <ADC_Averaged+0xac>)
 8000e46:	6013      	str	r3, [r2, #0]
		ADC_SumAPot[1] += ADCBuffer[1+(3*i)];
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <ADC_Averaged+0xac>)
 8000e4a:	6859      	ldr	r1, [r3, #4]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <ADC_Averaged+0xb0>)
 8000e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <ADC_Averaged+0xac>)
 8000e60:	6053      	str	r3, [r2, #4]
		ADC_SumAPot[2] += ADCBuffer[2+(3*i)];
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <ADC_Averaged+0xac>)
 8000e64:	6899      	ldr	r1, [r3, #8]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <ADC_Averaged+0xb0>)
 8000e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e76:	440b      	add	r3, r1
 8000e78:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <ADC_Averaged+0xac>)
 8000e7a:	6093      	str	r3, [r2, #8]
	for (int i = 0; i < 100; i++)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b63      	cmp	r3, #99	; 0x63
 8000e86:	ddd3      	ble.n	8000e30 <ADC_Averaged+0xc>
	}

	for (int i = 0; i < 3; i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	e015      	b.n	8000eba <ADC_Averaged+0x96>
	{
		ADC_Average[i] = ADC_SumAPot[i] / 100;
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <ADC_Averaged+0xac>)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <ADC_Averaged+0xb4>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	1152      	asrs	r2, r2, #5
 8000e9e:	17db      	asrs	r3, r3, #31
 8000ea0:	1ad2      	subs	r2, r2, r3
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <ADC_Averaged+0xb8>)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ADC_SumAPot[i] = 0;
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <ADC_Averaged+0xac>)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	dde6      	ble.n	8000e8e <ADC_Averaged+0x6a>
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000584 	.word	0x20000584
 8000ed4:	20000314 	.word	0x20000314
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	20000578 	.word	0x20000578

08000ee0 <SetState>:

void SetState()
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
	int trimpot_1 = ADC_Average[0];
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <SetState+0xfc>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	60fb      	str	r3, [r7, #12]
	int trimpot_2 = ((ADC_Average[1] * 2000) / 4095) + 500;
 8000eec:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <SetState+0xfc>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	4a39      	ldr	r2, [pc, #228]	; (8000fe0 <SetState+0x100>)
 8000efa:	fb82 1203 	smull	r1, r2, r2, r3
 8000efe:	441a      	add	r2, r3
 8000f00:	12d2      	asrs	r2, r2, #11
 8000f02:	17db      	asrs	r3, r3, #31
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f0a:	60bb      	str	r3, [r7, #8]
	int trimpot_3 = ((ADC_Average[2] * 2000) / 4095) + 500;
 8000f0c:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <SetState+0xfc>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f14:	fb02 f303 	mul.w	r3, r2, r3
 8000f18:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <SetState+0x100>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	12d2      	asrs	r2, r2, #11
 8000f22:	17db      	asrs	r3, r3, #31
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f2a:	607b      	str	r3, [r7, #4]

	if (main_Mode == 0)
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <SetState+0x104>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d12d      	bne.n	8000f90 <SetState+0xb0>
	{
		if (trimpot_1 <= 1024)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3a:	dc08      	bgt.n	8000f4e <SetState+0x6e>
		{
			trim_Mode = 1;
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <SetState+0x108>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <SetState+0x10c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
	{
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ((trimpot_1 * 1100) / 4095) + 900);
		Pulse_Width = __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_2);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Pulse_Width);
	}
}
 8000f4c:	e040      	b.n	8000fd0 <SetState+0xf0>
		else if (trimpot_1 <= 2048)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f54:	dc07      	bgt.n	8000f66 <SetState+0x86>
			trim_Mode = 2;
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <SetState+0x108>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, trimpot_2);
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <SetState+0x10c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f64:	e034      	b.n	8000fd0 <SetState+0xf0>
		else if (trimpot_1 <= 3072)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000f6c:	dc07      	bgt.n	8000f7e <SetState+0x9e>
			trim_Mode = 3;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <SetState+0x108>)
 8000f70:	2203      	movs	r2, #3
 8000f72:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, trimpot_3);
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <SetState+0x10c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f7c:	e028      	b.n	8000fd0 <SetState+0xf0>
			trim_Mode = 4;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <SetState+0x108>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 2500);
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <SetState+0x10c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f8e:	e01f      	b.n	8000fd0 <SetState+0xf0>
	else if (main_Mode == 1)
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <SetState+0x104>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d11b      	bne.n	8000fd0 <SetState+0xf0>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ((trimpot_1 * 1100) / 4095) + 900);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f240 424c 	movw	r2, #1100	; 0x44c
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <SetState+0x100>)
 8000fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa8:	441a      	add	r2, r3
 8000faa:	12d2      	asrs	r2, r2, #11
 8000fac:	17db      	asrs	r3, r3, #31
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f503 7261 	add.w	r2, r3, #900	; 0x384
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <SetState+0x110>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
		Pulse_Width = __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_2);
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <SetState+0x114>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <SetState+0x118>)
 8000fc4:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Pulse_Width);
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <SetState+0x118>)
 8000fc8:	881a      	ldrh	r2, [r3, #0]
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <SetState+0x10c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20000578 	.word	0x20000578
 8000fe0:	80080081 	.word	0x80080081
 8000fe4:	20000574 	.word	0x20000574
 8000fe8:	20000570 	.word	0x20000570
 8000fec:	20000224 	.word	0x20000224
 8000ff0:	20000270 	.word	0x20000270
 8000ff4:	200002bc 	.word	0x200002bc
 8000ff8:	2000056c 	.word	0x2000056c

08000ffc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800100c:	d10e      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x30>
	{
		if (main_Mode == 0) main_Mode = 1;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <HAL_GPIO_EXTI_Callback+0x22>
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
		else if (main_Mode == 1) main_Mode = 0;
	}
}
 800101c:	e006      	b.n	800102c <HAL_GPIO_EXTI_Callback+0x30>
		else if (main_Mode == 1) main_Mode = 0;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x30>
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000574 	.word	0x20000574

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>
	...

08001048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_MspInit+0x44>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6613      	str	r3, [r2, #96]	; 0x60
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_MspInit+0x44>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_MspInit+0x44>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001070:	6593      	str	r3, [r2, #88]	; 0x58
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800107e:	f002 fd33 	bl	8003ae8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0a0      	sub	sp, #128	; 0x80
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2254      	movs	r2, #84	; 0x54
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f006 fb33 	bl	800771c <memset>
  if(hadc->Instance==ADC1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010be:	d177      	bne.n	80011b0 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fa47 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010dc:	f7ff ffae 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010e0:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	4a34      	ldr	r2, [pc, #208]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 80010e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	4a2e      	ldr	r2, [pc, #184]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_ADC_MspInit+0x128>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001128:	2303      	movs	r3, #3
 800112a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112c:	2303      	movs	r3, #3
 800112e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f002 fa7d 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001142:	2301      	movs	r3, #1
 8001144:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001146:	2303      	movs	r3, #3
 8001148:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001152:	4619      	mov	r1, r3
 8001154:	4819      	ldr	r0, [pc, #100]	; (80011bc <HAL_ADC_MspInit+0x12c>)
 8001156:	f002 fa71 	bl	800363c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 800115c:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_ADC_MspInit+0x134>)
 800115e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 8001162:	2205      	movs	r2, #5
 8001164:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 800117a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 8001182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001186:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 800118a:	2220      	movs	r2, #32
 800118c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 8001196:	f001 ffdf 	bl	8003158 <HAL_DMA_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80011a0:	f7ff ff4c 	bl	800103c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <HAL_ADC_MspInit+0x130>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3780      	adds	r7, #128	; 0x80
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400
 80011c0:	20000098 	.word	0x20000098
 80011c4:	40020008 	.word	0x40020008

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09e      	sub	sp, #120	; 0x78
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	2254      	movs	r2, #84	; 0x54
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fa97 	bl	800771c <memset>
  if(huart->Instance==LPUART1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_UART_MspInit+0xa8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d136      	bne.n	8001266 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80011f8:	2320      	movs	r3, #32
 80011fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f003 f9ad 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001210:	f7ff ff14 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_UART_MspInit+0xac>)
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	4a16      	ldr	r2, [pc, #88]	; (8001274 <HAL_UART_MspInit+0xac>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_UART_MspInit+0xac>)
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_UART_MspInit+0xac>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_UART_MspInit+0xac>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_UART_MspInit+0xac>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001244:	230c      	movs	r3, #12
 8001246:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001254:	230c      	movs	r3, #12
 8001256:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f002 f9eb 	bl	800363c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3778      	adds	r7, #120	; 0x78
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40008000 	.word	0x40008000
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001298:	d114      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6593      	str	r3, [r2, #88]	; 0x58
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
 80012b0:	6a3b      	ldr	r3, [r7, #32]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	201c      	movs	r0, #28
 80012b8:	f001 ff19 	bl	80030ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012bc:	201c      	movs	r0, #28
 80012be:	f001 ff30 	bl	8003122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80012c2:	e062      	b.n	800138a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a33      	ldr	r2, [pc, #204]	; (8001398 <HAL_TIM_Base_MspInit+0x120>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10c      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	4a30      	ldr	r2, [pc, #192]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6593      	str	r3, [r2, #88]	; 0x58
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fb      	ldr	r3, [r7, #28]
}
 80012e6:	e050      	b.n	800138a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a2b      	ldr	r2, [pc, #172]	; (800139c <HAL_TIM_Base_MspInit+0x124>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10c      	bne.n	800130c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]
}
 800130a:	e03e      	b.n	800138a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_TIM_Base_MspInit+0x128>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10c      	bne.n	8001330 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
}
 800132e:	e02c      	b.n	800138a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM8)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_TIM_Base_MspInit+0x12c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d127      	bne.n	800138a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 8001340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001344:	6613      	str	r3, [r2, #96]	; 0x60
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_TIM_Base_MspInit+0x11c>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800137a:	2304      	movs	r3, #4
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <HAL_TIM_Base_MspInit+0x130>)
 8001386:	f002 f959 	bl	800363c <HAL_GPIO_Init>
}
 800138a:	bf00      	nop
 800138c:	3738      	adds	r7, #56	; 0x38
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40000400 	.word	0x40000400
 800139c:	40000800 	.word	0x40000800
 80013a0:	40000c00 	.word	0x40000c00
 80013a4:	40013400 	.word	0x40013400
 80013a8:	48000800 	.word	0x48000800

080013ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a22      	ldr	r2, [pc, #136]	; (8001454 <HAL_TIM_MspPostInit+0xa8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d11c      	bne.n	8001408 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_TIM_MspPostInit+0xac>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <HAL_TIM_MspPostInit+0xac>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_TIM_MspPostInit+0xac>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e6:	2340      	movs	r3, #64	; 0x40
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013f6:	2302      	movs	r3, #2
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4816      	ldr	r0, [pc, #88]	; (800145c <HAL_TIM_MspPostInit+0xb0>)
 8001402:	f002 f91b 	bl	800363c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001406:	e020      	b.n	800144a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM5)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_TIM_MspPostInit+0xb4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d11b      	bne.n	800144a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_TIM_MspPostInit+0xac>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_TIM_MspPostInit+0xac>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_TIM_MspPostInit+0xac>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800142a:	2304      	movs	r3, #4
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800143a:	2302      	movs	r3, #2
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_TIM_MspPostInit+0xb0>)
 8001446:	f002 f8f9 	bl	800363c <HAL_GPIO_Init>
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40000800 	.word	0x40000800
 8001458:	40021000 	.word	0x40021000
 800145c:	48000400 	.word	0x48000400
 8001460:	40000c00 	.word	0x40000c00

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 f8ac 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <DMA1_Channel1_IRQHandler+0x10>)
 80014be:	f001 ff6e 	bl	800339e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000098 	.word	0x20000098

080014cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <TIM2_IRQHandler+0x10>)
 80014d2:	f003 feaf 	bl	8005234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000018c 	.word	0x2000018c

080014e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014e8:	f002 fa42 	bl	8003970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001516:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001518:	f7ff ffea 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <LoopForever+0x6>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <LoopForever+0xe>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	; (8001560 <LoopForever+0x16>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001542:	f006 f8f3 	bl	800772c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001546:	f7fe ffe5 	bl	8000514 <main>

0800154a <LoopForever>:

LoopForever:
    b LoopForever
 800154a:	e7fe      	b.n	800154a <LoopForever>
  ldr   r0, =_estack
 800154c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001558:	080077dc 	.word	0x080077dc
  ldr r2, =_sbss
 800155c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001560:	20000594 	.word	0x20000594

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>

08001566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f001 fdb1 	bl	80030d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001576:	2000      	movs	r0, #0
 8001578:	f000 f80e 	bl	8001598 <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	e001      	b.n	800158c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001588:	f7ff fd5e 	bl	8001048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158c:	79fb      	ldrb	r3, [r7, #7]

}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_InitTick+0x68>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d022      	beq.n	80015f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_InitTick+0x6c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_InitTick+0x68>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fdbc 	bl	800313e <HAL_SYSTICK_Config>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	d809      	bhi.n	80015e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d2:	2200      	movs	r2, #0
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f04f 30ff 	mov.w	r0, #4294967295
 80015da:	f001 fd88 	bl	80030ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <HAL_InitTick+0x70>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e007      	b.n	80015f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e004      	b.n	80015f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e001      	b.n	80015f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000004 	.word	0x20000004
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x1c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_IncTick+0x20>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4413      	add	r3, r2
 800161a:	4a03      	ldr	r2, [pc, #12]	; (8001628 <HAL_IncTick+0x1c>)
 800161c:	6013      	str	r3, [r2, #0]
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	20000590 	.word	0x20000590
 800162c:	2000000c 	.word	0x2000000c

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000590 	.word	0x20000590

08001648 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	609a      	str	r2, [r3, #8]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	609a      	str	r2, [r3, #8]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3360      	adds	r3, #96	; 0x60
 80016c2:	461a      	mov	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <LL_ADC_SetOffset+0x44>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	4313      	orrs	r3, r2
 80016e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016e8:	bf00      	nop
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	03fff000 	.word	0x03fff000

080016f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3360      	adds	r3, #96	; 0x60
 8001706:	461a      	mov	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3360      	adds	r3, #96	; 0x60
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	431a      	orrs	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800175a:	b480      	push	{r7}
 800175c:	b087      	sub	sp, #28
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3360      	adds	r3, #96	; 0x60
 800176a:	461a      	mov	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3360      	adds	r3, #96	; 0x60
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	615a      	str	r2, [r3, #20]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001812:	b480      	push	{r7}
 8001814:	b087      	sub	sp, #28
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3330      	adds	r3, #48	; 0x30
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	211f      	movs	r1, #31
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0e9b      	lsrs	r3, r3, #26
 800184a:	f003 011f 	and.w	r1, r3, #31
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800186a:	b480      	push	{r7}
 800186c:	b087      	sub	sp, #28
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3314      	adds	r3, #20
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	0e5b      	lsrs	r3, r3, #25
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	0d1b      	lsrs	r3, r3, #20
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2107      	movs	r1, #7
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0d1b      	lsrs	r3, r3, #20
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	431a      	orrs	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0318 	and.w	r3, r3, #24
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	400b      	ands	r3, r1
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	0007ffff 	.word	0x0007ffff

08001908 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 031f 	and.w	r3, r3, #31
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800195c:	d101      	bne.n	8001962 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001980:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001984:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019ac:	d101      	bne.n	80019b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019fc:	f043 0202 	orr.w	r2, r3, #2
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <LL_ADC_IsEnabled+0x18>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_ADC_IsEnabled+0x1a>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d101      	bne.n	8001a4e <LL_ADC_IsDisableOngoing+0x18>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <LL_ADC_IsDisableOngoing+0x1a>
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d101      	bne.n	8001a9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e1a9      	b.n	8001e3e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fac9 	bl	8001090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff19 	bl	8001948 <LL_ADC_IsDeepPowerDownEnabled>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff feff 	bl	8001924 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff34 	bl	8001998 <LL_ADC_IsInternalRegulatorEnabled>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d115      	bne.n	8001b62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff18 	bl	8001970 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b40:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <HAL_ADC_Init+0x2e4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	4a9c      	ldr	r2, [pc, #624]	; (8001db8 <HAL_ADC_Init+0x2e8>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	3301      	adds	r3, #1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b54:	e002      	b.n	8001b5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f9      	bne.n	8001b56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff16 	bl	8001998 <LL_ADC_IsInternalRegulatorEnabled>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	f043 0210 	orr.w	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff76 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 8001b98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 8142 	bne.w	8001e2c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 813e 	bne.w	8001e2c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bb8:	f043 0202 	orr.w	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff23 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d141      	bne.n	8001c54 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd8:	d004      	beq.n	8001be4 <HAL_ADC_Init+0x114>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <HAL_ADC_Init+0x2ec>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d10f      	bne.n	8001c04 <HAL_ADC_Init+0x134>
 8001be4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001be8:	f7ff ff12 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bec:	4604      	mov	r4, r0
 8001bee:	4873      	ldr	r0, [pc, #460]	; (8001dbc <HAL_ADC_Init+0x2ec>)
 8001bf0:	f7ff ff0e 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e012      	b.n	8001c2a <HAL_ADC_Init+0x15a>
 8001c04:	486e      	ldr	r0, [pc, #440]	; (8001dc0 <HAL_ADC_Init+0x2f0>)
 8001c06:	f7ff ff03 	bl	8001a10 <LL_ADC_IsEnabled>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	486d      	ldr	r0, [pc, #436]	; (8001dc4 <HAL_ADC_Init+0x2f4>)
 8001c0e:	f7ff feff 	bl	8001a10 <LL_ADC_IsEnabled>
 8001c12:	4603      	mov	r3, r0
 8001c14:	431c      	orrs	r4, r3
 8001c16:	486c      	ldr	r0, [pc, #432]	; (8001dc8 <HAL_ADC_Init+0x2f8>)
 8001c18:	f7ff fefa 	bl	8001a10 <LL_ADC_IsEnabled>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4323      	orrs	r3, r4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d012      	beq.n	8001c54 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c36:	d004      	beq.n	8001c42 <HAL_ADC_Init+0x172>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a5f      	ldr	r2, [pc, #380]	; (8001dbc <HAL_ADC_Init+0x2ec>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x176>
 8001c42:	4a62      	ldr	r2, [pc, #392]	; (8001dcc <HAL_ADC_Init+0x2fc>)
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_Init+0x178>
 8001c46:	4a62      	ldr	r2, [pc, #392]	; (8001dd0 <HAL_ADC_Init+0x300>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f7ff fcfa 	bl	8001648 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7f5b      	ldrb	r3, [r3, #29]
 8001c58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	3b01      	subs	r3, #1
 8001c88:	045b      	lsls	r3, r3, #17
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	4b48      	ldr	r3, [pc, #288]	; (8001dd4 <HAL_ADC_Init+0x304>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	69b9      	ldr	r1, [r7, #24]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fee5 	bl	8001aaa <LL_ADC_INJ_IsConversionOngoing>
 8001ce0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d17f      	bne.n	8001de8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d17c      	bne.n	8001de8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cfa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d0a:	f023 0302 	bic.w	r3, r3, #2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d017      	beq.n	8001d50 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6911      	ldr	r1, [r2, #16]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001d4e:	e013      	b.n	8001d78 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d74:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d12a      	bne.n	8001dd8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001da4:	430a      	orrs	r2, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	611a      	str	r2, [r3, #16]
 8001db2:	e019      	b.n	8001de8 <HAL_ADC_Init+0x318>
 8001db4:	20000004 	.word	0x20000004
 8001db8:	053e2d63 	.word	0x053e2d63
 8001dbc:	50000100 	.word	0x50000100
 8001dc0:	50000400 	.word	0x50000400
 8001dc4:	50000500 	.word	0x50000500
 8001dc8:	50000600 	.word	0x50000600
 8001dcc:	50000300 	.word	0x50000300
 8001dd0:	50000700 	.word	0x50000700
 8001dd4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d10c      	bne.n	8001e0a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f023 010f 	bic.w	r1, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
 8001e08:	e007      	b.n	8001e1a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 020f 	bic.w	r2, r2, #15
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	f023 0303 	bic.w	r3, r3, #3
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e2a:	e007      	b.n	8001e3c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	f043 0210 	orr.w	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	bf00      	nop

08001e48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e5c:	d004      	beq.n	8001e68 <HAL_ADC_Start_DMA+0x20>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <HAL_ADC_Start_DMA+0x184>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_Start_DMA+0x24>
 8001e68:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_ADC_Start_DMA+0x188>)
 8001e6a:	e000      	b.n	8001e6e <HAL_ADC_Start_DMA+0x26>
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_ADC_Start_DMA+0x18c>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fd4a 	bl	8001908 <LL_ADC_GetMultimode>
 8001e74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fe02 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 809b 	bne.w	8001fbe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Start_DMA+0x4e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e096      	b.n	8001fc4 <HAL_ADC_Start_DMA+0x17c>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a4d      	ldr	r2, [pc, #308]	; (8001fd8 <HAL_ADC_Start_DMA+0x190>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d008      	beq.n	8001eba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d002      	beq.n	8001eba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b09      	cmp	r3, #9
 8001eb8:	d17a      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fcf6 	bl	80028ac <ADC_Enable>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d16d      	bne.n	8001fa6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <HAL_ADC_Start_DMA+0x184>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d009      	beq.n	8001efc <HAL_ADC_Start_DMA+0xb4>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3b      	ldr	r2, [pc, #236]	; (8001fdc <HAL_ADC_Start_DMA+0x194>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d002      	beq.n	8001ef8 <HAL_ADC_Start_DMA+0xb0>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e003      	b.n	8001f00 <HAL_ADC_Start_DMA+0xb8>
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_ADC_Start_DMA+0x198>)
 8001efa:	e001      	b.n	8001f00 <HAL_ADC_Start_DMA+0xb8>
 8001efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d002      	beq.n	8001f0e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	f023 0206 	bic.w	r2, r3, #6
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	661a      	str	r2, [r3, #96]	; 0x60
 8001f32:	e002      	b.n	8001f3a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <HAL_ADC_Start_DMA+0x19c>)
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	4a28      	ldr	r2, [pc, #160]	; (8001fe8 <HAL_ADC_Start_DMA+0x1a0>)
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_ADC_Start_DMA+0x1a4>)
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	221c      	movs	r2, #28
 8001f58:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0210 	orr.w	r2, r2, #16
 8001f70:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3340      	adds	r3, #64	; 0x40
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f001 f989 	bl	80032a8 <HAL_DMA_Start_IT>
 8001f96:	4603      	mov	r3, r0
 8001f98:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fd5c 	bl	8001a5c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fa4:	e00d      	b.n	8001fc2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001fae:	e008      	b.n	8001fc2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001fbc:	e001      	b.n	8001fc2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	50000100 	.word	0x50000100
 8001fd0:	50000300 	.word	0x50000300
 8001fd4:	50000700 	.word	0x50000700
 8001fd8:	50000600 	.word	0x50000600
 8001fdc:	50000500 	.word	0x50000500
 8001fe0:	50000400 	.word	0x50000400
 8001fe4:	08002a97 	.word	0x08002a97
 8001fe8:	08002b6f 	.word	0x08002b6f
 8001fec:	08002b8b 	.word	0x08002b8b

08001ff0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0b6      	sub	sp, #216	; 0xd8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x24>
 800204a:	2302      	movs	r3, #2
 800204c:	f000 bc13 	b.w	8002876 <HAL_ADC_ConfigChannel+0x84a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fd11 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 83f3 	bne.w	8002850 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6859      	ldr	r1, [r3, #4]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	f7ff fbcb 	bl	8001812 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fcff 	bl	8001a84 <LL_ADC_REG_IsConversionOngoing>
 8002086:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fd0b 	bl	8001aaa <LL_ADC_INJ_IsConversionOngoing>
 8002094:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002098:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 81d9 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 81d4 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020b4:	d10f      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7ff fbd2 	bl	800186a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fb79 	bl	80017c6 <LL_ADC_SetSamplingTimeCommonConfig>
 80020d4:	e00e      	b.n	80020f4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f7ff fbc1 	bl	800186a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fb69 	bl	80017c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d022      	beq.n	800215c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002126:	f7ff fac3 	bl	80016b0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6919      	ldr	r1, [r3, #16]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	461a      	mov	r2, r3
 8002138:	f7ff fb0f 	bl	800175a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002148:	2b01      	cmp	r3, #1
 800214a:	d102      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x126>
 800214c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002150:	e000      	b.n	8002154 <HAL_ADC_ConfigChannel+0x128>
 8002152:	2300      	movs	r3, #0
 8002154:	461a      	mov	r2, r3
 8002156:	f7ff fb1b 	bl	8001790 <LL_ADC_SetOffsetSaturation>
 800215a:	e17b      	b.n	8002454 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fac8 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x15c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fabd 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	f003 021f 	and.w	r2, r3, #31
 8002186:	e01e      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x19a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fab2 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e004      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <HAL_ADC_ConfigChannel+0x1b2>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	e018      	b.n	8002210 <HAL_ADC_ConfigChannel+0x1e4>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e004      	b.n	8002210 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002210:	429a      	cmp	r2, r3
 8002212:	d106      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fa81 	bl	8001724 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2101      	movs	r1, #1
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fa65 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x222>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fa5a 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	e01e      	b.n	800228c <HAL_ADC_ConfigChannel+0x260>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2101      	movs	r1, #1
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fa4f 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800226c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e004      	b.n	800228a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x278>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	e018      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x2aa>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e004      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d106      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	2101      	movs	r1, #1
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fa1e 	bl	8001724 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2102      	movs	r1, #2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fa02 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x2e8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2102      	movs	r1, #2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff f9f7 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 021f 	and.w	r2, r3, #31
 8002312:	e01e      	b.n	8002352 <HAL_ADC_ConfigChannel+0x326>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2102      	movs	r1, #2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f9ec 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800233a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002342:	2320      	movs	r3, #32
 8002344:	e004      	b.n	8002350 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_ConfigChannel+0x33e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	e016      	b.n	8002398 <HAL_ADC_ConfigChannel+0x36c>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800237c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e004      	b.n	8002398 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800238e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2102      	movs	r1, #2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff f9bd 	bl	8001724 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2103      	movs	r1, #3
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff f9a1 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x3aa>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2103      	movs	r1, #3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f996 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	e017      	b.n	8002406 <HAL_ADC_ConfigChannel+0x3da>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2103      	movs	r1, #3
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f98b 	bl	80016f8 <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e003      	b.n	8002404 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <HAL_ADC_ConfigChannel+0x3f2>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0e9b      	lsrs	r3, r3, #26
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	e011      	b.n	8002442 <HAL_ADC_ConfigChannel+0x416>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800242c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800242e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e003      	b.n	8002442 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800243a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002442:	429a      	cmp	r2, r3
 8002444:	d106      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	2103      	movs	r1, #3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f968 	bl	8001724 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fad9 	bl	8001a10 <LL_ADC_IsEnabled>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 813d 	bne.w	80026e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f7ff fa24 	bl	80018c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4aa2      	ldr	r2, [pc, #648]	; (8002708 <HAL_ADC_ConfigChannel+0x6dc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	f040 812e 	bne.w	80026e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x480>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	3301      	adds	r3, #1
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2b09      	cmp	r3, #9
 80024a2:	bf94      	ite	ls
 80024a4:	2301      	movls	r3, #1
 80024a6:	2300      	movhi	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e019      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x4b4>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	bf94      	ite	ls
 80024da:	2301      	movls	r3, #1
 80024dc:	2300      	movhi	r3, #0
 80024de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d079      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x4d4>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	3301      	adds	r3, #1
 80024f8:	069b      	lsls	r3, r3, #26
 80024fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fe:	e015      	b.n	800252c <HAL_ADC_ConfigChannel+0x500>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800250e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002510:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800251c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	069b      	lsls	r3, r3, #26
 8002528:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_ADC_ConfigChannel+0x520>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2101      	movs	r1, #1
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	e017      	b.n	800257c <HAL_ADC_ConfigChannel+0x550>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800255a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800255e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	e003      	b.n	8002570 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	ea42 0103 	orr.w	r1, r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x576>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	e018      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x5a8>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d4:	430b      	orrs	r3, r1
 80025d6:	e07e      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x5c8>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	3301      	adds	r3, #1
 80025ec:	069b      	lsls	r3, r3, #26
 80025ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f2:	e015      	b.n	8002620 <HAL_ADC_ConfigChannel+0x5f4>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800260c:	2320      	movs	r3, #32
 800260e:	e003      	b.n	8002618 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3301      	adds	r3, #1
 800261a:	069b      	lsls	r3, r3, #26
 800261c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x614>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	e017      	b.n	8002670 <HAL_ADC_ConfigChannel+0x644>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	61fb      	str	r3, [r7, #28]
  return result;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002658:	2320      	movs	r3, #32
 800265a:	e003      	b.n	8002664 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	ea42 0103 	orr.w	r1, r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_ADC_ConfigChannel+0x670>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	3b1e      	subs	r3, #30
 8002694:	051b      	lsls	r3, r3, #20
 8002696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800269a:	e01b      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x6a8>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	613b      	str	r3, [r7, #16]
  return result;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 021f 	and.w	r2, r3, #31
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	3b1e      	subs	r3, #30
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026da:	4619      	mov	r1, r3
 80026dc:	f7ff f8c5 	bl	800186a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_ADC_ConfigChannel+0x6e0>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80be 	beq.w	800286a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f6:	d004      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x6d6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_ADC_ConfigChannel+0x6e4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10a      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x6ec>
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_ADC_ConfigChannel+0x6e8>)
 8002704:	e009      	b.n	800271a <HAL_ADC_ConfigChannel+0x6ee>
 8002706:	bf00      	nop
 8002708:	407f0000 	.word	0x407f0000
 800270c:	80080000 	.word	0x80080000
 8002710:	50000100 	.word	0x50000100
 8002714:	50000300 	.word	0x50000300
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_ADC_ConfigChannel+0x854>)
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe ffba 	bl	8001694 <LL_ADC_GetCommonPathInternalCh>
 8002720:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a56      	ldr	r2, [pc, #344]	; (8002884 <HAL_ADC_ConfigChannel+0x858>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d004      	beq.n	8002738 <HAL_ADC_ConfigChannel+0x70c>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a55      	ldr	r2, [pc, #340]	; (8002888 <HAL_ADC_ConfigChannel+0x85c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d13a      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800273c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d134      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274c:	d005      	beq.n	800275a <HAL_ADC_ConfigChannel+0x72e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_ADC_ConfigChannel+0x860>)
 8002754:	4293      	cmp	r3, r2
 8002756:	f040 8085 	bne.w	8002864 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002762:	d004      	beq.n	800276e <HAL_ADC_ConfigChannel+0x742>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a49      	ldr	r2, [pc, #292]	; (8002890 <HAL_ADC_ConfigChannel+0x864>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x746>
 800276e:	4a49      	ldr	r2, [pc, #292]	; (8002894 <HAL_ADC_ConfigChannel+0x868>)
 8002770:	e000      	b.n	8002774 <HAL_ADC_ConfigChannel+0x748>
 8002772:	4a43      	ldr	r2, [pc, #268]	; (8002880 <HAL_ADC_ConfigChannel+0x854>)
 8002774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f7fe ff75 	bl	800166e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <HAL_ADC_ConfigChannel+0x86c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	4a44      	ldr	r2, [pc, #272]	; (800289c <HAL_ADC_ConfigChannel+0x870>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800279e:	e002      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f9      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ac:	e05a      	b.n	8002864 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3b      	ldr	r2, [pc, #236]	; (80028a0 <HAL_ADC_ConfigChannel+0x874>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d125      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11f      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a31      	ldr	r2, [pc, #196]	; (8002890 <HAL_ADC_ConfigChannel+0x864>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d104      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x7ac>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a34      	ldr	r2, [pc, #208]	; (80028a4 <HAL_ADC_ConfigChannel+0x878>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d047      	beq.n	8002868 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e0:	d004      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x7c0>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2a      	ldr	r2, [pc, #168]	; (8002890 <HAL_ADC_ConfigChannel+0x864>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x7c4>
 80027ec:	4a29      	ldr	r2, [pc, #164]	; (8002894 <HAL_ADC_ConfigChannel+0x868>)
 80027ee:	e000      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x7c6>
 80027f0:	4a23      	ldr	r2, [pc, #140]	; (8002880 <HAL_ADC_ConfigChannel+0x854>)
 80027f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7fe ff36 	bl	800166e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002802:	e031      	b.n	8002868 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_ADC_ConfigChannel+0x87c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d12d      	bne.n	800286a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800280e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d127      	bne.n	800286a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_ADC_ConfigChannel+0x864>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800282c:	d004      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x80c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_ADC_ConfigChannel+0x864>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x810>
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_ADC_ConfigChannel+0x868>)
 800283a:	e000      	b.n	800283e <HAL_ADC_ConfigChannel+0x812>
 800283c:	4a10      	ldr	r2, [pc, #64]	; (8002880 <HAL_ADC_ConfigChannel+0x854>)
 800283e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f7fe ff10 	bl	800166e <LL_ADC_SetCommonPathInternalCh>
 800284e:	e00c      	b.n	800286a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002862:	e002      	b.n	800286a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002864:	bf00      	nop
 8002866:	e000      	b.n	800286a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002868:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002872:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002876:	4618      	mov	r0, r3
 8002878:	37d8      	adds	r7, #216	; 0xd8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	50000700 	.word	0x50000700
 8002884:	c3210000 	.word	0xc3210000
 8002888:	90c00010 	.word	0x90c00010
 800288c:	50000600 	.word	0x50000600
 8002890:	50000100 	.word	0x50000100
 8002894:	50000300 	.word	0x50000300
 8002898:	20000004 	.word	0x20000004
 800289c:	053e2d63 	.word	0x053e2d63
 80028a0:	c7520000 	.word	0xc7520000
 80028a4:	50000500 	.word	0x50000500
 80028a8:	cb840000 	.word	0xcb840000

080028ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f8a7 	bl	8001a10 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d176      	bne.n	80029b6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <ADC_Enable+0x114>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e062      	b.n	80029b8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f862 	bl	80019c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002904:	d004      	beq.n	8002910 <ADC_Enable+0x64>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2e      	ldr	r2, [pc, #184]	; (80029c4 <ADC_Enable+0x118>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d101      	bne.n	8002914 <ADC_Enable+0x68>
 8002910:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <ADC_Enable+0x11c>)
 8002912:	e000      	b.n	8002916 <ADC_Enable+0x6a>
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <ADC_Enable+0x120>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe febc 	bl	8001694 <LL_ADC_GetCommonPathInternalCh>
 800291c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800291e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <ADC_Enable+0x124>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <ADC_Enable+0x128>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002940:	e002      	b.n	8002948 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3b01      	subs	r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f9      	bne.n	8002942 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800294e:	f7fe fe6f 	bl	8001630 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002954:	e028      	b.n	80029a8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f858 	bl	8001a10 <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff f828 	bl	80019c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002970:	f7fe fe5e 	bl	8001630 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d914      	bls.n	80029a8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d00d      	beq.n	80029a8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f043 0210 	orr.w	r2, r3, #16
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e007      	b.n	80029b8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d1cf      	bne.n	8002956 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	8000003f 	.word	0x8000003f
 80029c4:	50000100 	.word	0x50000100
 80029c8:	50000300 	.word	0x50000300
 80029cc:	50000700 	.word	0x50000700
 80029d0:	20000004 	.word	0x20000004
 80029d4:	053e2d63 	.word	0x053e2d63

080029d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f826 	bl	8001a36 <LL_ADC_IsDisableOngoing>
 80029ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f80d 	bl	8001a10 <LL_ADC_IsEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d047      	beq.n	8002a8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d144      	bne.n	8002a8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030d 	and.w	r3, r3, #13
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d10c      	bne.n	8002a2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe ffe7 	bl	80019e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a22:	f7fe fe05 	bl	8001630 <HAL_GetTick>
 8002a26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a28:	e029      	b.n	8002a7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e023      	b.n	8002a8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a46:	f7fe fdf3 	bl	8001630 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d914      	bls.n	8002a7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e007      	b.n	8002a8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1dc      	bne.n	8002a46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d14b      	bne.n	8002b48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d021      	beq.n	8002b0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fe8c 	bl	80017ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d032      	beq.n	8002b40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d12b      	bne.n	8002b40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d11f      	bne.n	8002b40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b0c:	e018      	b.n	8002b40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d111      	bne.n	8002b40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff fa55 	bl	8001ff0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b46:	e00e      	b.n	8002b66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff fa5f 	bl	8002018 <HAL_ADC_ErrorCallback>
}
 8002b5a:	e004      	b.n	8002b66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7ff fa41 	bl	8002004 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba8:	f043 0204 	orr.w	r2, r3, #4
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f7ff fa31 	bl	8002018 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <LL_ADC_IsEnabled>:
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <LL_ADC_IsEnabled+0x18>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <LL_ADC_IsEnabled+0x1a>
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_ADC_StartCalibration>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002bf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	609a      	str	r2, [r3, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_ADC_IsCalibrationOnGoing>:
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_REG_IsConversionOngoing>:
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADCEx_Calibration_Start+0x1c>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e04d      	b.n	8002d1c <HAL_ADCEx_Calibration_Start+0xb8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff fea5 	bl	80029d8 <ADC_Disable>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d136      	bne.n	8002d06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ca0:	f023 0302 	bic.w	r3, r3, #2
 8002ca4:	f043 0202 	orr.w	r2, r3, #2
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6839      	ldr	r1, [r7, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff96 	bl	8002be4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cb8:	e014      	b.n	8002ce4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d90d      	bls.n	8002ce4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	f023 0312 	bic.w	r3, r3, #18
 8002cd0:	f043 0210 	orr.w	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e01b      	b.n	8002d1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff94 	bl	8002c16 <LL_ADC_IsCalibrationOnGoing>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e2      	bne.n	8002cba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	f023 0303 	bic.w	r3, r3, #3
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d04:	e005      	b.n	8002d12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	0004de01 	.word	0x0004de01

08002d28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b0a1      	sub	sp, #132	; 0x84
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0e7      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d52:	2300      	movs	r3, #0
 8002d54:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d5e:	d102      	bne.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d60:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	e009      	b.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6e      	ldr	r2, [pc, #440]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d70:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	e001      	b.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0be      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff4f 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 8002da0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff49 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 80a0 	bne.w	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 809c 	bne.w	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a55      	ldr	r2, [pc, #340]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002dd0:	4b56      	ldr	r3, [pc, #344]	; (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dd4:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002dd6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d04b      	beq.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df2:	035b      	lsls	r3, r3, #13
 8002df4:	430b      	orrs	r3, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e04:	d004      	beq.n	8002e10 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a45      	ldr	r2, [pc, #276]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10f      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002e10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e14:	f7ff fed3 	bl	8002bbe <LL_ADC_IsEnabled>
 8002e18:	4604      	mov	r4, r0
 8002e1a:	4841      	ldr	r0, [pc, #260]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e1c:	f7ff fecf 	bl	8002bbe <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4323      	orrs	r3, r4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e30:	483c      	ldr	r0, [pc, #240]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e32:	f7ff fec4 	bl	8002bbe <LL_ADC_IsEnabled>
 8002e36:	4604      	mov	r4, r0
 8002e38:	483b      	ldr	r0, [pc, #236]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e3a:	f7ff fec0 	bl	8002bbe <LL_ADC_IsEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	431c      	orrs	r4, r3
 8002e42:	483c      	ldr	r0, [pc, #240]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e44:	f7ff febb 	bl	8002bbe <LL_ADC_IsEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4323      	orrs	r3, r4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d056      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e62:	f023 030f 	bic.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	6811      	ldr	r1, [r2, #0]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	6892      	ldr	r2, [r2, #8]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	431a      	orrs	r2, r3
 8002e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e74:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e76:	e047      	b.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e82:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e8c:	d004      	beq.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10f      	bne.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e9c:	f7ff fe8f 	bl	8002bbe <LL_ADC_IsEnabled>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	481f      	ldr	r0, [pc, #124]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ea4:	f7ff fe8b 	bl	8002bbe <LL_ADC_IsEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4323      	orrs	r3, r4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e012      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002eb8:	481a      	ldr	r0, [pc, #104]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002eba:	f7ff fe80 	bl	8002bbe <LL_ADC_IsEnabled>
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4819      	ldr	r0, [pc, #100]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ec2:	f7ff fe7c 	bl	8002bbe <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	431c      	orrs	r4, r3
 8002eca:	481a      	ldr	r0, [pc, #104]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ecc:	f7ff fe77 	bl	8002bbe <LL_ADC_IsEnabled>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4323      	orrs	r3, r4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eea:	f023 030f 	bic.w	r3, r3, #15
 8002eee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ef0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef2:	e009      	b.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f06:	e000      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3784      	adds	r7, #132	; 0x84
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	50000100 	.word	0x50000100
 8002f24:	50000400 	.word	0x50000400
 8002f28:	50000500 	.word	0x50000500
 8002f2c:	50000300 	.word	0x50000300
 8002f30:	50000700 	.word	0x50000700
 8002f34:	50000600 	.word	0x50000600

08002f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	60d3      	str	r3, [r2, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <__NVIC_EnableIRQ+0x38>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db0a      	blt.n	8003002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	490c      	ldr	r1, [pc, #48]	; (8003024 <__NVIC_SetPriority+0x4c>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003000:	e00a      	b.n	8003018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <__NVIC_SetPriority+0x50>)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3b04      	subs	r3, #4
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	440b      	add	r3, r1
 8003016:	761a      	strb	r2, [r3, #24]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	bf28      	it	cs
 800304a:	2304      	movcs	r3, #4
 800304c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3304      	adds	r3, #4
 8003052:	2b06      	cmp	r3, #6
 8003054:	d902      	bls.n	800305c <NVIC_EncodePriority+0x30>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3b03      	subs	r3, #3
 800305a:	e000      	b.n	800305e <NVIC_EncodePriority+0x32>
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003074:	f04f 31ff 	mov.w	r1, #4294967295
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43d9      	mvns	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	4313      	orrs	r3, r2
         );
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a4:	d301      	bcc.n	80030aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00f      	b.n	80030ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <SysTick_Config+0x40>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030b2:	210f      	movs	r1, #15
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f7ff ff8e 	bl	8002fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <SysTick_Config+0x40>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c2:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <SysTick_Config+0x40>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	e000e010 	.word	0xe000e010

080030d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff29 	bl	8002f38 <__NVIC_SetPriorityGrouping>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030fc:	f7ff ff40 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 8003100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	6978      	ldr	r0, [r7, #20]
 8003108:	f7ff ff90 	bl	800302c <NVIC_EncodePriority>
 800310c:	4602      	mov	r2, r0
 800310e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff5f 	bl	8002fd8 <__NVIC_SetPriority>
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff33 	bl	8002f9c <__NVIC_EnableIRQ>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ffa4 	bl	8003094 <SysTick_Config>
 800314c:	4603      	mov	r3, r0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e08d      	b.n	8003286 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_DMA_Init+0x138>)
 8003172:	429a      	cmp	r2, r3
 8003174:	d80f      	bhi.n	8003196 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	4b45      	ldr	r3, [pc, #276]	; (8003294 <HAL_DMA_Init+0x13c>)
 800317e:	4413      	add	r3, r2
 8003180:	4a45      	ldr	r2, [pc, #276]	; (8003298 <HAL_DMA_Init+0x140>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	009a      	lsls	r2, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a42      	ldr	r2, [pc, #264]	; (800329c <HAL_DMA_Init+0x144>)
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
 8003194:	e00e      	b.n	80031b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	4b40      	ldr	r3, [pc, #256]	; (80032a0 <HAL_DMA_Init+0x148>)
 800319e:	4413      	add	r3, r2
 80031a0:	4a3d      	ldr	r2, [pc, #244]	; (8003298 <HAL_DMA_Init+0x140>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	009a      	lsls	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a3c      	ldr	r2, [pc, #240]	; (80032a4 <HAL_DMA_Init+0x14c>)
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80031ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9b6 	bl	8003578 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003214:	d102      	bne.n	800321c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003230:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d010      	beq.n	800325c <HAL_DMA_Init+0x104>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d80c      	bhi.n	800325c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9d6 	bl	80035f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	e008      	b.n	800326e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40020407 	.word	0x40020407
 8003294:	bffdfff8 	.word	0xbffdfff8
 8003298:	cccccccd 	.word	0xcccccccd
 800329c:	40020000 	.word	0x40020000
 80032a0:	bffdfbf8 	.word	0xbffdfbf8
 80032a4:	40020400 	.word	0x40020400

080032a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_DMA_Start_IT+0x20>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e066      	b.n	8003396 <HAL_DMA_Start_IT+0xee>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d155      	bne.n	8003388 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f8fb 	bl	80034fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 020e 	orr.w	r2, r2, #14
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e00f      	b.n	8003340 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0204 	bic.w	r2, r2, #4
 800332e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 020a 	orr.w	r2, r2, #10
 800333e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003374:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e005      	b.n	8003394 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003390:	2302      	movs	r3, #2
 8003392:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2204      	movs	r2, #4
 80033c0:	409a      	lsls	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d026      	beq.n	8003418 <HAL_DMA_IRQHandler+0x7a>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d021      	beq.n	8003418 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d107      	bne.n	80033f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0204 	bic.w	r2, r2, #4
 80033f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f003 021f 	and.w	r2, r3, #31
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2104      	movs	r1, #4
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	2b00      	cmp	r3, #0
 800340c:	d071      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003416:	e06c      	b.n	80034f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2202      	movs	r2, #2
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02e      	beq.n	800348a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d029      	beq.n	800348a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 020a 	bic.w	r2, r2, #10
 8003452:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2102      	movs	r1, #2
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d038      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003488:	e033      	b.n	80034f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2208      	movs	r2, #8
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d02a      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d025      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 020e 	bic.w	r2, r2, #14
 80034b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
}
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003512:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003524:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f003 021f 	and.w	r2, r3, #31
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f202 	lsl.w	r2, r1, r2
 8003538:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b10      	cmp	r3, #16
 8003548:	d108      	bne.n	800355c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800355a:	e007      	b.n	800356c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003588:	429a      	cmp	r2, r3
 800358a:	d802      	bhi.n	8003592 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e001      	b.n	8003596 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003594:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3b08      	subs	r3, #8
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80035c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2201      	movs	r2, #1
 80035cc:	409a      	lsls	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40020407 	.word	0x40020407
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020820 	.word	0x40020820
 80035ec:	cccccccd 	.word	0xcccccccd
 80035f0:	40020880 	.word	0x40020880

080035f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	461a      	mov	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a08      	ldr	r2, [pc, #32]	; (8003638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003616:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2201      	movs	r2, #1
 8003622:	409a      	lsls	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	1000823f 	.word	0x1000823f
 8003638:	40020940 	.word	0x40020940

0800363c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800364a:	e15a      	b.n	8003902 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	4013      	ands	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 814c 	beq.w	80038fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d005      	beq.n	800367c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003678:	2b02      	cmp	r3, #2
 800367a:	d130      	bne.n	80036de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036b2:	2201      	movs	r2, #1
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 0201 	and.w	r2, r3, #1
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d017      	beq.n	800371a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	2203      	movs	r2, #3
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d123      	bne.n	800376e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	08da      	lsrs	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3208      	adds	r2, #8
 800372e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	220f      	movs	r2, #15
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	08da      	lsrs	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3208      	adds	r2, #8
 8003768:	6939      	ldr	r1, [r7, #16]
 800376a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	2203      	movs	r2, #3
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0203 	and.w	r2, r3, #3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a6 	beq.w	80038fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b0:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <HAL_GPIO_Init+0x2e4>)
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	4a5a      	ldr	r2, [pc, #360]	; (8003920 <HAL_GPIO_Init+0x2e4>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6613      	str	r3, [r2, #96]	; 0x60
 80037bc:	4b58      	ldr	r3, [pc, #352]	; (8003920 <HAL_GPIO_Init+0x2e4>)
 80037be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c8:	4a56      	ldr	r2, [pc, #344]	; (8003924 <HAL_GPIO_Init+0x2e8>)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	3302      	adds	r3, #2
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	220f      	movs	r2, #15
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037f2:	d01f      	beq.n	8003834 <HAL_GPIO_Init+0x1f8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a4c      	ldr	r2, [pc, #304]	; (8003928 <HAL_GPIO_Init+0x2ec>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d019      	beq.n	8003830 <HAL_GPIO_Init+0x1f4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a4b      	ldr	r2, [pc, #300]	; (800392c <HAL_GPIO_Init+0x2f0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <HAL_GPIO_Init+0x1f0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <HAL_GPIO_Init+0x2f4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00d      	beq.n	8003828 <HAL_GPIO_Init+0x1ec>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a49      	ldr	r2, [pc, #292]	; (8003934 <HAL_GPIO_Init+0x2f8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <HAL_GPIO_Init+0x1e8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a48      	ldr	r2, [pc, #288]	; (8003938 <HAL_GPIO_Init+0x2fc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_GPIO_Init+0x1e4>
 800381c:	2305      	movs	r3, #5
 800381e:	e00a      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003820:	2306      	movs	r3, #6
 8003822:	e008      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003824:	2304      	movs	r3, #4
 8003826:	e006      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003828:	2303      	movs	r3, #3
 800382a:	e004      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 800382c:	2302      	movs	r3, #2
 800382e:	e002      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_GPIO_Init+0x1fa>
 8003834:	2300      	movs	r3, #0
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	f002 0203 	and.w	r2, r2, #3
 800383c:	0092      	lsls	r2, r2, #2
 800383e:	4093      	lsls	r3, r2
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003846:	4937      	ldr	r1, [pc, #220]	; (8003924 <HAL_GPIO_Init+0x2e8>)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	3302      	adds	r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003854:	4b39      	ldr	r3, [pc, #228]	; (800393c <HAL_GPIO_Init+0x300>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003878:	4a30      	ldr	r2, [pc, #192]	; (800393c <HAL_GPIO_Init+0x300>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800387e:	4b2f      	ldr	r3, [pc, #188]	; (800393c <HAL_GPIO_Init+0x300>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038a2:	4a26      	ldr	r2, [pc, #152]	; (800393c <HAL_GPIO_Init+0x300>)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_GPIO_Init+0x300>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <HAL_GPIO_Init+0x300>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <HAL_GPIO_Init+0x300>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038f6:	4a11      	ldr	r2, [pc, #68]	; (800393c <HAL_GPIO_Init+0x300>)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3301      	adds	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	f47f ae9d 	bne.w	800364c <HAL_GPIO_Init+0x10>
  }
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40021000 	.word	0x40021000
 8003924:	40010000 	.word	0x40010000
 8003928:	48000400 	.word	0x48000400
 800392c:	48000800 	.word	0x48000800
 8003930:	48000c00 	.word	0x48000c00
 8003934:	48001000 	.word	0x48001000
 8003938:	48001400 	.word	0x48001400
 800393c:	40010400 	.word	0x40010400

08003940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
 800394c:	4613      	mov	r3, r2
 800394e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003950:	787b      	ldrb	r3, [r7, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800395c:	e002      	b.n	8003964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d006      	beq.n	8003994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003986:	4a05      	ldr	r2, [pc, #20]	; (800399c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fb34 	bl	8000ffc <HAL_GPIO_EXTI_Callback>
  }
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40010400 	.word	0x40010400

080039a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d141      	bne.n	8003a32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ae:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ba:	d131      	bne.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039bc:	4b47      	ldr	r3, [pc, #284]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c2:	4a46      	ldr	r2, [pc, #280]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039cc:	4b43      	ldr	r3, [pc, #268]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d4:	4a41      	ldr	r2, [pc, #260]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039dc:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2232      	movs	r2, #50	; 0x32
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	4a3f      	ldr	r2, [pc, #252]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	0c9b      	lsrs	r3, r3, #18
 80039ee:	3301      	adds	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f2:	e002      	b.n	80039fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039fa:	4b38      	ldr	r3, [pc, #224]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d102      	bne.n	8003a0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f2      	bne.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a0e:	4b33      	ldr	r3, [pc, #204]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1a:	d158      	bne.n	8003ace <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e057      	b.n	8003ad0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a20:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a26:	4a2d      	ldr	r2, [pc, #180]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a30:	e04d      	b.n	8003ace <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a38:	d141      	bne.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a3a:	4b28      	ldr	r3, [pc, #160]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a46:	d131      	bne.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a48:	4b24      	ldr	r3, [pc, #144]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	4a23      	ldr	r2, [pc, #140]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a58:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a60:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2232      	movs	r2, #50	; 0x32
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	0c9b      	lsrs	r3, r3, #18
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a7e:	e002      	b.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d102      	bne.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f2      	bne.n	8003a80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa6:	d112      	bne.n	8003ace <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e011      	b.n	8003ad0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003abc:	e007      	b.n	8003ace <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ac6:	4a05      	ldr	r2, [pc, #20]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003acc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	20000004 	.word	0x20000004
 8003ae4:	431bde83 	.word	0x431bde83

08003ae8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af6:	6093      	str	r3, [r2, #8]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40007000 	.word	0x40007000

08003b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e2fe      	b.n	8004118 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d075      	beq.n	8003c12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b26:	4b97      	ldr	r3, [pc, #604]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b30:	4b94      	ldr	r3, [pc, #592]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3e>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d002      	beq.n	8003b4c <HAL_RCC_OscConfig+0x44>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d10b      	bne.n	8003b64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	4b8d      	ldr	r3, [pc, #564]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d05b      	beq.n	8003c10 <HAL_RCC_OscConfig+0x108>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d157      	bne.n	8003c10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e2d9      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCC_OscConfig+0x74>
 8003b6e:	4b85      	ldr	r3, [pc, #532]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a84      	ldr	r2, [pc, #528]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e01d      	b.n	8003bb8 <HAL_RCC_OscConfig+0xb0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x98>
 8003b86:	4b7f      	ldr	r3, [pc, #508]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a7e      	ldr	r2, [pc, #504]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b7c      	ldr	r3, [pc, #496]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a7b      	ldr	r2, [pc, #492]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCC_OscConfig+0xb0>
 8003ba0:	4b78      	ldr	r3, [pc, #480]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a77      	ldr	r2, [pc, #476]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	4b75      	ldr	r3, [pc, #468]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a74      	ldr	r2, [pc, #464]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d013      	beq.n	8003be8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fd36 	bl	8001630 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fd fd32 	bl	8001630 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e29e      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bda:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0xc0>
 8003be6:	e014      	b.n	8003c12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd fd22 	bl	8001630 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fd fd1e 	bl	8001630 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e28a      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c02:	4b60      	ldr	r3, [pc, #384]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0xe8>
 8003c0e:	e000      	b.n	8003c12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d075      	beq.n	8003d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1e:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c28:	4b56      	ldr	r3, [pc, #344]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_OscConfig+0x136>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d002      	beq.n	8003c44 <HAL_RCC_OscConfig+0x13c>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d11f      	bne.n	8003c84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c44:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_OscConfig+0x154>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e25d      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5c:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	4946      	ldr	r1, [pc, #280]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c70:	4b45      	ldr	r3, [pc, #276]	; (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fc8f 	bl	8001598 <HAL_InitTick>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d043      	beq.n	8003d08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e249      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d023      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8c:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd fcca 	bl	8001630 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fcc6 	bl	8001630 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e232      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb2:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	492d      	ldr	r1, [pc, #180]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
 8003cd2:	e01a      	b.n	8003d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fca6 	bl	8001630 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7fd fca2 	bl	8001630 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e20e      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cfa:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x1e0>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d041      	beq.n	8003d9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1e:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fc7f 	bl	8001630 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d36:	f7fd fc7b 	bl	8001630 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1e7      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ef      	beq.n	8003d36 <HAL_RCC_OscConfig+0x22e>
 8003d56:	e020      	b.n	8003d9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_RCC_OscConfig+0x27c>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fd fc62 	bl	8001630 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d6e:	e00d      	b.n	8003d8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d70:	f7fd fc5e 	bl	8001630 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d906      	bls.n	8003d8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1ca      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
 8003d88:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d8c:	4b8c      	ldr	r3, [pc, #560]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ea      	bne.n	8003d70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80a6 	beq.w	8003ef4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da8:	2300      	movs	r3, #0
 8003daa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dac:	4b84      	ldr	r3, [pc, #528]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_OscConfig+0x2b4>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x2b6>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	4b7f      	ldr	r3, [pc, #508]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	4a7e      	ldr	r2, [pc, #504]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8003dce:	4b7c      	ldr	r3, [pc, #496]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dde:	4b79      	ldr	r3, [pc, #484]	; (8003fc4 <HAL_RCC_OscConfig+0x4bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d118      	bne.n	8003e1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dea:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_RCC_OscConfig+0x4bc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a75      	ldr	r2, [pc, #468]	; (8003fc4 <HAL_RCC_OscConfig+0x4bc>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df6:	f7fd fc1b 	bl	8001630 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfe:	f7fd fc17 	bl	8001630 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e183      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e10:	4b6c      	ldr	r3, [pc, #432]	; (8003fc4 <HAL_RCC_OscConfig+0x4bc>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d108      	bne.n	8003e36 <HAL_RCC_OscConfig+0x32e>
 8003e24:	4b66      	ldr	r3, [pc, #408]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	4a65      	ldr	r2, [pc, #404]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e34:	e024      	b.n	8003e80 <HAL_RCC_OscConfig+0x378>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d110      	bne.n	8003e60 <HAL_RCC_OscConfig+0x358>
 8003e3e:	4b60      	ldr	r3, [pc, #384]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	4a5e      	ldr	r2, [pc, #376]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	4a5a      	ldr	r2, [pc, #360]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5e:	e00f      	b.n	8003e80 <HAL_RCC_OscConfig+0x378>
 8003e60:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	4a56      	ldr	r2, [pc, #344]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	4a52      	ldr	r2, [pc, #328]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003e78:	f023 0304 	bic.w	r3, r3, #4
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d016      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fd fbd2 	bl	8001630 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e90:	f7fd fbce 	bl	8001630 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e138      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea6:	4b46      	ldr	r3, [pc, #280]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ed      	beq.n	8003e90 <HAL_RCC_OscConfig+0x388>
 8003eb4:	e015      	b.n	8003ee2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fbbb 	bl	8001630 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fd fbb7 	bl	8001630 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e121      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed4:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1ed      	bne.n	8003ebe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee8:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	4a34      	ldr	r2, [pc, #208]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d03c      	beq.n	8003f7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f08:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fd fb8a 	bl	8001630 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f20:	f7fd fb86 	bl	8001630 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e0f2      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f32:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ef      	beq.n	8003f20 <HAL_RCC_OscConfig+0x418>
 8003f40:	e01b      	b.n	8003f7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f42:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fd fb6d 	bl	8001630 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f5a:	f7fd fb69 	bl	8001630 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0d5      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f6c:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1ef      	bne.n	8003f5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80c9 	beq.w	8004116 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	f000 8083 	beq.w	8004098 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d15e      	bne.n	8004058 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <HAL_RCC_OscConfig+0x4b8>)
 8003fa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fd fb43 	bl	8001630 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fac:	e00c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fd fb3f 	bl	8001630 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d905      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0ab      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc8:	4b55      	ldr	r3, [pc, #340]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ec      	bne.n	8003fae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd4:	4b52      	ldr	r3, [pc, #328]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	4b52      	ldr	r3, [pc, #328]	; (8004124 <HAL_RCC_OscConfig+0x61c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6a11      	ldr	r1, [r2, #32]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe4:	3a01      	subs	r2, #1
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	4311      	orrs	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003fee:	0212      	lsls	r2, r2, #8
 8003ff0:	4311      	orrs	r1, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ff6:	0852      	lsrs	r2, r2, #1
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	0552      	lsls	r2, r2, #21
 8003ffc:	4311      	orrs	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004002:	0852      	lsrs	r2, r2, #1
 8004004:	3a01      	subs	r2, #1
 8004006:	0652      	lsls	r2, r2, #25
 8004008:	4311      	orrs	r1, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800400e:	06d2      	lsls	r2, r2, #27
 8004010:	430a      	orrs	r2, r1
 8004012:	4943      	ldr	r1, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 8004014:	4313      	orrs	r3, r2
 8004016:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004018:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a40      	ldr	r2, [pc, #256]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 800401e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004022:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004024:	4b3e      	ldr	r3, [pc, #248]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a3d      	ldr	r2, [pc, #244]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fafe 	bl	8001630 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd fafa 	bl	8001630 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e066      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404a:	4b35      	ldr	r3, [pc, #212]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x530>
 8004056:	e05e      	b.n	8004116 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a30      	ldr	r2, [pc, #192]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd fae4 	bl	8001630 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd fae0 	bl	8001630 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e04c      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407e:	4b28      	ldr	r3, [pc, #160]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800408a:	4b25      	ldr	r3, [pc, #148]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	4924      	ldr	r1, [pc, #144]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <HAL_RCC_OscConfig+0x620>)
 8004092:	4013      	ands	r3, r2
 8004094:	60cb      	str	r3, [r1, #12]
 8004096:	e03e      	b.n	8004116 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e039      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80040a4:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_RCC_OscConfig+0x618>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0203 	and.w	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d12c      	bne.n	8004112 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	3b01      	subs	r3, #1
 80040c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d123      	bne.n	8004112 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d11b      	bne.n	8004112 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d113      	bne.n	8004112 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	3b01      	subs	r3, #1
 80040f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d109      	bne.n	8004112 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	3b01      	subs	r3, #1
 800410c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d001      	beq.n	8004116 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	019f800c 	.word	0x019f800c
 8004128:	feeefffc 	.word	0xfeeefffc

0800412c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e11e      	b.n	8004382 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b91      	ldr	r3, [pc, #580]	; (800438c <HAL_RCC_ClockConfig+0x260>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d910      	bls.n	8004174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b8e      	ldr	r3, [pc, #568]	; (800438c <HAL_RCC_ClockConfig+0x260>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 020f 	bic.w	r2, r3, #15
 800415a:	498c      	ldr	r1, [pc, #560]	; (800438c <HAL_RCC_ClockConfig+0x260>)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b8a      	ldr	r3, [pc, #552]	; (800438c <HAL_RCC_ClockConfig+0x260>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e106      	b.n	8004382 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d073      	beq.n	8004268 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d129      	bne.n	80041dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004188:	4b81      	ldr	r3, [pc, #516]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0f4      	b.n	8004382 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004198:	f000 f99e 	bl	80044d8 <RCC_GetSysClockFreqFromPLLSource>
 800419c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4a7c      	ldr	r2, [pc, #496]	; (8004394 <HAL_RCC_ClockConfig+0x268>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d93f      	bls.n	8004226 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041a6:	4b7a      	ldr	r3, [pc, #488]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d033      	beq.n	8004226 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d12f      	bne.n	8004226 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041c6:	4b72      	ldr	r3, [pc, #456]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ce:	4a70      	ldr	r2, [pc, #448]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80041d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e024      	b.n	8004226 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0c6      	b.n	8004382 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f4:	4b66      	ldr	r3, [pc, #408]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0be      	b.n	8004382 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004204:	f000 f8ce 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004208:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4a61      	ldr	r2, [pc, #388]	; (8004394 <HAL_RCC_ClockConfig+0x268>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d909      	bls.n	8004226 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004212:	4b5f      	ldr	r3, [pc, #380]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421a:	4a5d      	ldr	r2, [pc, #372]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004226:	4b5a      	ldr	r3, [pc, #360]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 0203 	bic.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4957      	ldr	r1, [pc, #348]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004234:	4313      	orrs	r3, r2
 8004236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004238:	f7fd f9fa 	bl	8001630 <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	e00a      	b.n	8004256 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004240:	f7fd f9f6 	bl	8001630 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e095      	b.n	8004382 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	4b4e      	ldr	r3, [pc, #312]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 020c 	and.w	r2, r3, #12
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	429a      	cmp	r2, r3
 8004266:	d1eb      	bne.n	8004240 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a42      	ldr	r2, [pc, #264]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004286:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800428a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004298:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042a0:	4a3b      	ldr	r2, [pc, #236]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80042a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b39      	ldr	r3, [pc, #228]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4936      	ldr	r1, [pc, #216]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
 80042ba:	e008      	b.n	80042ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d105      	bne.n	80042ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042c2:	4b33      	ldr	r3, [pc, #204]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	4a32      	ldr	r2, [pc, #200]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 80042c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ce:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_RCC_ClockConfig+0x260>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d21d      	bcs.n	8004318 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042dc:	4b2b      	ldr	r3, [pc, #172]	; (800438c <HAL_RCC_ClockConfig+0x260>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 020f 	bic.w	r2, r3, #15
 80042e4:	4929      	ldr	r1, [pc, #164]	; (800438c <HAL_RCC_ClockConfig+0x260>)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042ec:	f7fd f9a0 	bl	8001630 <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f4:	f7fd f99c 	bl	8001630 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e03b      	b.n	8004382 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <HAL_RCC_ClockConfig+0x260>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d1ed      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004324:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4917      	ldr	r1, [pc, #92]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	490f      	ldr	r1, [pc, #60]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004356:	f000 f825 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 800435a:	4602      	mov	r2, r0
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <HAL_RCC_ClockConfig+0x264>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	490c      	ldr	r1, [pc, #48]	; (8004398 <HAL_RCC_ClockConfig+0x26c>)
 8004368:	5ccb      	ldrb	r3, [r1, r3]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	fa22 f303 	lsr.w	r3, r2, r3
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <HAL_RCC_ClockConfig+0x270>)
 8004374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_RCC_ClockConfig+0x274>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd f90c 	bl	8001598 <HAL_InitTick>
 8004380:	4603      	mov	r3, r0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
 8004394:	04c4b400 	.word	0x04c4b400
 8004398:	0800778c 	.word	0x0800778c
 800439c:	20000004 	.word	0x20000004
 80043a0:	20000008 	.word	0x20000008

080043a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043aa:	4b2c      	ldr	r3, [pc, #176]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d102      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043b6:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	e047      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043bc:	4b27      	ldr	r3, [pc, #156]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d102      	bne.n	80043ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043c8:	4b26      	ldr	r3, [pc, #152]	; (8004464 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	e03e      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043ce:	4b23      	ldr	r3, [pc, #140]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b0c      	cmp	r3, #12
 80043d8:	d136      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	3301      	adds	r3, #1
 80043f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d10c      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043f8:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004402:	68d2      	ldr	r2, [r2, #12]
 8004404:	0a12      	lsrs	r2, r2, #8
 8004406:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	617b      	str	r3, [r7, #20]
      break;
 8004410:	e00c      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	4a10      	ldr	r2, [pc, #64]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 800441c:	68d2      	ldr	r2, [r2, #12]
 800441e:	0a12      	lsrs	r2, r2, #8
 8004420:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004424:	fb02 f303 	mul.w	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
      break;
 800442a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_GetSysClockFreq+0xb8>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	0e5b      	lsrs	r3, r3, #25
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	3301      	adds	r3, #1
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e001      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800444c:	693b      	ldr	r3, [r7, #16]
}
 800444e:	4618      	mov	r0, r3
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000
 8004460:	00f42400 	.word	0x00f42400
 8004464:	016e3600 	.word	0x016e3600

08004468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_RCC_GetHCLKFreq+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000004 	.word	0x20000004

08004480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004484:	f7ff fff0 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4904      	ldr	r1, [pc, #16]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	0800779c 	.word	0x0800779c

080044ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044b0:	f7ff ffda 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0adb      	lsrs	r3, r3, #11
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4904      	ldr	r1, [pc, #16]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	0800779c 	.word	0x0800779c

080044d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044de:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	3301      	adds	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d10c      	bne.n	8004516 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044fc:	4a17      	ldr	r2, [pc, #92]	; (800455c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004506:	68d2      	ldr	r2, [r2, #12]
 8004508:	0a12      	lsrs	r2, r2, #8
 800450a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	617b      	str	r3, [r7, #20]
    break;
 8004514:	e00c      	b.n	8004530 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004516:	4a12      	ldr	r2, [pc, #72]	; (8004560 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	fbb2 f3f3 	udiv	r3, r2, r3
 800451e:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004520:	68d2      	ldr	r2, [r2, #12]
 8004522:	0a12      	lsrs	r2, r2, #8
 8004524:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
    break;
 800452e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	0e5b      	lsrs	r3, r3, #25
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800454a:	687b      	ldr	r3, [r7, #4]
}
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40021000 	.word	0x40021000
 800455c:	016e3600 	.word	0x016e3600
 8004560:	00f42400 	.word	0x00f42400

08004564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800456c:	2300      	movs	r3, #0
 800456e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004570:	2300      	movs	r3, #0
 8004572:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8098 	beq.w	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004586:	4b43      	ldr	r3, [pc, #268]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4b40      	ldr	r3, [pc, #256]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	4a3f      	ldr	r2, [pc, #252]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6593      	str	r3, [r2, #88]	; 0x58
 800459e:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045aa:	2301      	movs	r3, #1
 80045ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ae:	4b3a      	ldr	r3, [pc, #232]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a39      	ldr	r2, [pc, #228]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ba:	f7fd f839 	bl	8001630 <HAL_GetTick>
 80045be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045c0:	e009      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fd f835 	bl	8001630 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d902      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	74fb      	strb	r3, [r7, #19]
        break;
 80045d4:	e005      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045d6:	4b30      	ldr	r3, [pc, #192]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ef      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d159      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01e      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	d019      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004604:	4b23      	ldr	r3, [pc, #140]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004610:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004630:	4a18      	ldr	r2, [pc, #96]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d016      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fc fff5 	bl	8001630 <HAL_GetTick>
 8004646:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004648:	e00b      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fc fff1 	bl	8001630 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d902      	bls.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	74fb      	strb	r3, [r7, #19]
            break;
 8004660:	e006      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004662:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ec      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	4903      	ldr	r1, [pc, #12]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	74bb      	strb	r3, [r7, #18]
 8004692:	e005      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004694:	40021000 	.word	0x40021000
 8004698:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a0:	7c7b      	ldrb	r3, [r7, #17]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d105      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a6:	4ba7      	ldr	r3, [pc, #668]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046aa:	4aa6      	ldr	r2, [pc, #664]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046be:	4ba1      	ldr	r3, [pc, #644]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f023 0203 	bic.w	r2, r3, #3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	499d      	ldr	r1, [pc, #628]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e0:	4b98      	ldr	r3, [pc, #608]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 020c 	bic.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	4995      	ldr	r1, [pc, #596]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004702:	4b90      	ldr	r3, [pc, #576]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	498c      	ldr	r1, [pc, #560]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004724:	4b87      	ldr	r3, [pc, #540]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	4984      	ldr	r1, [pc, #528]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004746:	4b7f      	ldr	r3, [pc, #508]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	497b      	ldr	r1, [pc, #492]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004768:	4b76      	ldr	r3, [pc, #472]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	4973      	ldr	r1, [pc, #460]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800478a:	4b6e      	ldr	r3, [pc, #440]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	496a      	ldr	r1, [pc, #424]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ac:	4b65      	ldr	r3, [pc, #404]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	4962      	ldr	r1, [pc, #392]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ce:	4b5d      	ldr	r3, [pc, #372]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	4959      	ldr	r1, [pc, #356]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047f0:	4b54      	ldr	r3, [pc, #336]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047f6:	f023 0203 	bic.w	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	4951      	ldr	r1, [pc, #324]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004812:	4b4c      	ldr	r3, [pc, #304]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	4948      	ldr	r1, [pc, #288]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d015      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004834:	4b43      	ldr	r3, [pc, #268]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4940      	ldr	r1, [pc, #256]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004852:	d105      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004854:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a3a      	ldr	r2, [pc, #232]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800485e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800486c:	4b35      	ldr	r3, [pc, #212]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	4932      	ldr	r1, [pc, #200]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488a:	d105      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a2c      	ldr	r2, [pc, #176]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004896:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d015      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	4924      	ldr	r1, [pc, #144]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c2:	d105      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048c4:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ea:	4916      	ldr	r1, [pc, #88]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fa:	d105      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a10      	ldr	r2, [pc, #64]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d019      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	4908      	ldr	r1, [pc, #32]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004932:	d109      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4a02      	ldr	r2, [pc, #8]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800493e:	60d3      	str	r3, [r2, #12]
 8004940:	e002      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004942:	bf00      	nop
 8004944:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d015      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004954:	4b29      	ldr	r3, [pc, #164]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	4926      	ldr	r1, [pc, #152]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004972:	d105      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004974:	4b21      	ldr	r3, [pc, #132]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a20      	ldr	r2, [pc, #128]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800497a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d015      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800498c:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499a:	4918      	ldr	r1, [pc, #96]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d105      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80049ac:	4b13      	ldr	r3, [pc, #76]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a12      	ldr	r2, [pc, #72]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	490a      	ldr	r1, [pc, #40]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e2:	d105      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a04      	ldr	r2, [pc, #16]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000

08004a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e049      	b.n	8004aa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc fc26 	bl	8001278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f001 f878 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d001      	beq.n	8004ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e04c      	b.n	8004b62 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <HAL_TIM_Base_Start+0xc0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d022      	beq.n	8004b20 <HAL_TIM_Base_Start+0x70>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae2:	d01d      	beq.n	8004b20 <HAL_TIM_Base_Start+0x70>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <HAL_TIM_Base_Start+0xc4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d018      	beq.n	8004b20 <HAL_TIM_Base_Start+0x70>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <HAL_TIM_Base_Start+0xc8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <HAL_TIM_Base_Start+0x70>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <HAL_TIM_Base_Start+0xcc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <HAL_TIM_Base_Start+0x70>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <HAL_TIM_Base_Start+0xd0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_TIM_Base_Start+0x70>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <HAL_TIM_Base_Start+0xd4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_TIM_Base_Start+0x70>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <HAL_TIM_Base_Start+0xd8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d115      	bne.n	8004b4c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_TIM_Base_Start+0xdc>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d015      	beq.n	8004b5e <HAL_TIM_Base_Start+0xae>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d011      	beq.n	8004b5e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	e008      	b.n	8004b5e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e000      	b.n	8004b60 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40013400 	.word	0x40013400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40015000 	.word	0x40015000
 8004b8c:	00010007 	.word	0x00010007

08004b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e054      	b.n	8004c52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d022      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d01d      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a22      	ldr	r2, [pc, #136]	; (8004c64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <HAL_TIM_Base_Start_IT+0xe0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x80>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d115      	bne.n	8004c3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_TIM_Base_Start_IT+0xec>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d015      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0xbe>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d011      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3a:	e008      	b.n	8004c4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e000      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40013400 	.word	0x40013400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40015000 	.word	0x40015000
 8004c7c:	00010007 	.word	0x00010007

08004c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e049      	b.n	8004d26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f841 	bl	8004d2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 ff38 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <HAL_TIM_PWM_Start+0x24>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e03c      	b.n	8004de2 <HAL_TIM_PWM_Start+0x9e>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d109      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x3e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	bf14      	ite	ne
 8004d7a:	2301      	movne	r3, #1
 8004d7c:	2300      	moveq	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	e02f      	b.n	8004de2 <HAL_TIM_PWM_Start+0x9e>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d109      	bne.n	8004d9c <HAL_TIM_PWM_Start+0x58>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e022      	b.n	8004de2 <HAL_TIM_PWM_Start+0x9e>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d109      	bne.n	8004db6 <HAL_TIM_PWM_Start+0x72>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	e015      	b.n	8004de2 <HAL_TIM_PWM_Start+0x9e>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d109      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0x8c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e008      	b.n	8004de2 <HAL_TIM_PWM_Start+0x9e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0a6      	b.n	8004f38 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_PWM_Start+0xb6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df8:	e023      	b.n	8004e42 <HAL_TIM_PWM_Start+0xfe>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Start+0xc6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e08:	e01b      	b.n	8004e42 <HAL_TIM_PWM_Start+0xfe>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0xd6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	e013      	b.n	8004e42 <HAL_TIM_PWM_Start+0xfe>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b0c      	cmp	r3, #12
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Start+0xe6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e28:	e00b      	b.n	8004e42 <HAL_TIM_PWM_Start+0xfe>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xf6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e38:	e003      	b.n	8004e42 <HAL_TIM_PWM_Start+0xfe>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2201      	movs	r2, #1
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f001 fcf6 	bl	800683c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a3a      	ldr	r2, [pc, #232]	; (8004f40 <HAL_TIM_PWM_Start+0x1fc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x148>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a39      	ldr	r2, [pc, #228]	; (8004f44 <HAL_TIM_PWM_Start+0x200>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x148>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a37      	ldr	r2, [pc, #220]	; (8004f48 <HAL_TIM_PWM_Start+0x204>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x148>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a36      	ldr	r2, [pc, #216]	; (8004f4c <HAL_TIM_PWM_Start+0x208>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x148>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a34      	ldr	r2, [pc, #208]	; (8004f50 <HAL_TIM_PWM_Start+0x20c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x148>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a33      	ldr	r2, [pc, #204]	; (8004f54 <HAL_TIM_PWM_Start+0x210>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x14c>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_TIM_PWM_Start+0x14e>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <HAL_TIM_PWM_Start+0x1fc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d022      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x1b2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb8:	d01d      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x1b2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <HAL_TIM_PWM_Start+0x214>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d018      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x1b2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <HAL_TIM_PWM_Start+0x218>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x1b2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <HAL_TIM_PWM_Start+0x21c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x1b2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <HAL_TIM_PWM_Start+0x200>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d009      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x1b2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_TIM_PWM_Start+0x204>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x1b2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_TIM_PWM_Start+0x210>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d115      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <HAL_TIM_PWM_Start+0x220>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b06      	cmp	r3, #6
 8004f06:	d015      	beq.n	8004f34 <HAL_TIM_PWM_Start+0x1f0>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0e:	d011      	beq.n	8004f34 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f20:	e008      	b.n	8004f34 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e000      	b.n	8004f36 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40013400 	.word	0x40013400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800
 8004f54:	40015000 	.word	0x40015000
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	00010007 	.word	0x00010007

08004f68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e049      	b.n	800500e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f841 	bl	8005016 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f000 fdc4 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <HAL_TIM_IC_Start+0x1a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e023      	b.n	800508e <HAL_TIM_IC_Start+0x62>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b04      	cmp	r3, #4
 800504a:	d104      	bne.n	8005056 <HAL_TIM_IC_Start+0x2a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e01b      	b.n	800508e <HAL_TIM_IC_Start+0x62>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d104      	bne.n	8005066 <HAL_TIM_IC_Start+0x3a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005062:	b2db      	uxtb	r3, r3
 8005064:	e013      	b.n	800508e <HAL_TIM_IC_Start+0x62>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b0c      	cmp	r3, #12
 800506a:	d104      	bne.n	8005076 <HAL_TIM_IC_Start+0x4a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005072:	b2db      	uxtb	r3, r3
 8005074:	e00b      	b.n	800508e <HAL_TIM_IC_Start+0x62>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b10      	cmp	r3, #16
 800507a:	d104      	bne.n	8005086 <HAL_TIM_IC_Start+0x5a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e003      	b.n	800508e <HAL_TIM_IC_Start+0x62>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800508c:	b2db      	uxtb	r3, r3
 800508e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <HAL_TIM_IC_Start+0x74>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e013      	b.n	80050c8 <HAL_TIM_IC_Start+0x9c>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d104      	bne.n	80050b0 <HAL_TIM_IC_Start+0x84>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e00b      	b.n	80050c8 <HAL_TIM_IC_Start+0x9c>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d104      	bne.n	80050c0 <HAL_TIM_IC_Start+0x94>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e003      	b.n	80050c8 <HAL_TIM_IC_Start+0x9c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d102      	bne.n	80050d6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050d0:	7bbb      	ldrb	r3, [r7, #14]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d001      	beq.n	80050da <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e097      	b.n	800520a <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_TIM_IC_Start+0xbe>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	e023      	b.n	8005132 <HAL_TIM_IC_Start+0x106>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_IC_Start+0xce>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	e01b      	b.n	8005132 <HAL_TIM_IC_Start+0x106>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d104      	bne.n	800510a <HAL_TIM_IC_Start+0xde>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005108:	e013      	b.n	8005132 <HAL_TIM_IC_Start+0x106>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	d104      	bne.n	800511a <HAL_TIM_IC_Start+0xee>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005118:	e00b      	b.n	8005132 <HAL_TIM_IC_Start+0x106>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b10      	cmp	r3, #16
 800511e:	d104      	bne.n	800512a <HAL_TIM_IC_Start+0xfe>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005128:	e003      	b.n	8005132 <HAL_TIM_IC_Start+0x106>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <HAL_TIM_IC_Start+0x116>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005140:	e013      	b.n	800516a <HAL_TIM_IC_Start+0x13e>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d104      	bne.n	8005152 <HAL_TIM_IC_Start+0x126>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005150:	e00b      	b.n	800516a <HAL_TIM_IC_Start+0x13e>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d104      	bne.n	8005162 <HAL_TIM_IC_Start+0x136>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005160:	e003      	b.n	800516a <HAL_TIM_IC_Start+0x13e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fb62 	bl	800683c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a25      	ldr	r2, [pc, #148]	; (8005214 <HAL_TIM_IC_Start+0x1e8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d022      	beq.n	80051c8 <HAL_TIM_IC_Start+0x19c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d01d      	beq.n	80051c8 <HAL_TIM_IC_Start+0x19c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a21      	ldr	r2, [pc, #132]	; (8005218 <HAL_TIM_IC_Start+0x1ec>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d018      	beq.n	80051c8 <HAL_TIM_IC_Start+0x19c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a20      	ldr	r2, [pc, #128]	; (800521c <HAL_TIM_IC_Start+0x1f0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d013      	beq.n	80051c8 <HAL_TIM_IC_Start+0x19c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <HAL_TIM_IC_Start+0x1f4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00e      	beq.n	80051c8 <HAL_TIM_IC_Start+0x19c>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <HAL_TIM_IC_Start+0x1f8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_TIM_IC_Start+0x19c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <HAL_TIM_IC_Start+0x1fc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_TIM_IC_Start+0x19c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1a      	ldr	r2, [pc, #104]	; (800522c <HAL_TIM_IC_Start+0x200>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d115      	bne.n	80051f4 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <HAL_TIM_IC_Start+0x204>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d015      	beq.n	8005206 <HAL_TIM_IC_Start+0x1da>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e0:	d011      	beq.n	8005206 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f2:	e008      	b.n	8005206 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e000      	b.n	8005208 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40014000 	.word	0x40014000
 800522c:	40015000 	.word	0x40015000
 8005230:	00010007 	.word	0x00010007

08005234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d020      	beq.n	8005298 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0202 	mvn.w	r2, #2
 8005268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fc3a 	bl	8005af8 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fc2c 	bl	8005ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fc3d 	bl	8005b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d020      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0204 	mvn.w	r2, #4
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fc14 	bl	8005af8 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fc06 	bl	8005ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fc17 	bl	8005b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d020      	beq.n	8005330 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0208 	mvn.w	r2, #8
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2204      	movs	r2, #4
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fbee 	bl	8005af8 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fbe0 	bl	8005ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fbf1 	bl	8005b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	d020      	beq.n	800537c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01b      	beq.n	800537c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0210 	mvn.w	r2, #16
 800534c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2208      	movs	r2, #8
 8005352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fbc8 	bl	8005af8 <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fbba 	bl	8005ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fbcb 	bl	8005b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00c      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0201 	mvn.w	r2, #1
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fb fd0a 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00c      	beq.n	80053ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f001 fafd 	bl	80069c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 faf5 	bl	80069dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00c      	beq.n	8005416 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800540e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fb85 	bl	8005b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00c      	beq.n	800543a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f06f 0220 	mvn.w	r2, #32
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fabd 	bl	80069b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fac9 	bl	80069f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00c      	beq.n	8005482 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800547a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 fac1 	bl	8006a04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00c      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800549e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f001 fab9 	bl	8006a18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 fab1 	bl	8006a2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e088      	b.n	8005602 <HAL_TIM_IC_ConfigChannel+0x130>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11b      	bne.n	8005536 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800550e:	f000 ffcf 	bl	80064b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 020c 	bic.w	r2, r2, #12
 8005520:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6999      	ldr	r1, [r3, #24]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	619a      	str	r2, [r3, #24]
 8005534:	e060      	b.n	80055f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b04      	cmp	r3, #4
 800553a:	d11c      	bne.n	8005576 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800554c:	f001 f853 	bl	80065f6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800555e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6999      	ldr	r1, [r3, #24]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	021a      	lsls	r2, r3, #8
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	619a      	str	r2, [r3, #24]
 8005574:	e040      	b.n	80055f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d11b      	bne.n	80055b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800558c:	f001 f8a0 	bl	80066d0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 020c 	bic.w	r2, r2, #12
 800559e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69d9      	ldr	r1, [r3, #28]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	61da      	str	r2, [r3, #28]
 80055b2:	e021      	b.n	80055f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d11c      	bne.n	80055f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80055ca:	f001 f8bd 	bl	8006748 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69d9      	ldr	r1, [r3, #28]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	021a      	lsls	r2, r3, #8
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	61da      	str	r2, [r3, #28]
 80055f2:	e001      	b.n	80055f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005626:	2302      	movs	r3, #2
 8005628:	e0ff      	b.n	800582a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b14      	cmp	r3, #20
 8005636:	f200 80f0 	bhi.w	800581a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800563a:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005695 	.word	0x08005695
 8005644:	0800581b 	.word	0x0800581b
 8005648:	0800581b 	.word	0x0800581b
 800564c:	0800581b 	.word	0x0800581b
 8005650:	080056d5 	.word	0x080056d5
 8005654:	0800581b 	.word	0x0800581b
 8005658:	0800581b 	.word	0x0800581b
 800565c:	0800581b 	.word	0x0800581b
 8005660:	08005717 	.word	0x08005717
 8005664:	0800581b 	.word	0x0800581b
 8005668:	0800581b 	.word	0x0800581b
 800566c:	0800581b 	.word	0x0800581b
 8005670:	08005757 	.word	0x08005757
 8005674:	0800581b 	.word	0x0800581b
 8005678:	0800581b 	.word	0x0800581b
 800567c:	0800581b 	.word	0x0800581b
 8005680:	08005799 	.word	0x08005799
 8005684:	0800581b 	.word	0x0800581b
 8005688:	0800581b 	.word	0x0800581b
 800568c:	0800581b 	.word	0x0800581b
 8005690:	080057d9 	.word	0x080057d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fafe 	bl	8005c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0208 	orr.w	r2, r2, #8
 80056ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0204 	bic.w	r2, r2, #4
 80056be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6999      	ldr	r1, [r3, #24]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	619a      	str	r2, [r3, #24]
      break;
 80056d2:	e0a5      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fb78 	bl	8005dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6999      	ldr	r1, [r3, #24]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	021a      	lsls	r2, r3, #8
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	619a      	str	r2, [r3, #24]
      break;
 8005714:	e084      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fbeb 	bl	8005ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0208 	orr.w	r2, r2, #8
 8005730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0204 	bic.w	r2, r2, #4
 8005740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69d9      	ldr	r1, [r3, #28]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	61da      	str	r2, [r3, #28]
      break;
 8005754:	e064      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fc5d 	bl	800601c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69d9      	ldr	r1, [r3, #28]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	021a      	lsls	r2, r3, #8
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	61da      	str	r2, [r3, #28]
      break;
 8005796:	e043      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fcd0 	bl	8006144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0204 	bic.w	r2, r2, #4
 80057c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80057d6:	e023      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fd1a 	bl	8006218 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005802:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005818:	e002      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
      break;
 800581e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005828:	7dfb      	ldrb	r3, [r7, #23]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop

08005834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_TIM_ConfigClockSource+0x1c>
 800584c:	2302      	movs	r3, #2
 800584e:	e0f6      	b.n	8005a3e <HAL_TIM_ConfigClockSource+0x20a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800586e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a6f      	ldr	r2, [pc, #444]	; (8005a48 <HAL_TIM_ConfigClockSource+0x214>)
 800588a:	4293      	cmp	r3, r2
 800588c:	f000 80c1 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 8005890:	4a6d      	ldr	r2, [pc, #436]	; (8005a48 <HAL_TIM_ConfigClockSource+0x214>)
 8005892:	4293      	cmp	r3, r2
 8005894:	f200 80c6 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 8005898:	4a6c      	ldr	r2, [pc, #432]	; (8005a4c <HAL_TIM_ConfigClockSource+0x218>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f000 80b9 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 80058a0:	4a6a      	ldr	r2, [pc, #424]	; (8005a4c <HAL_TIM_ConfigClockSource+0x218>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	f200 80be 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 80058a8:	4a69      	ldr	r2, [pc, #420]	; (8005a50 <HAL_TIM_ConfigClockSource+0x21c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	f000 80b1 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 80058b0:	4a67      	ldr	r2, [pc, #412]	; (8005a50 <HAL_TIM_ConfigClockSource+0x21c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	f200 80b6 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 80058b8:	4a66      	ldr	r2, [pc, #408]	; (8005a54 <HAL_TIM_ConfigClockSource+0x220>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	f000 80a9 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 80058c0:	4a64      	ldr	r2, [pc, #400]	; (8005a54 <HAL_TIM_ConfigClockSource+0x220>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	f200 80ae 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 80058c8:	4a63      	ldr	r2, [pc, #396]	; (8005a58 <HAL_TIM_ConfigClockSource+0x224>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	f000 80a1 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 80058d0:	4a61      	ldr	r2, [pc, #388]	; (8005a58 <HAL_TIM_ConfigClockSource+0x224>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	f200 80a6 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 80058d8:	4a60      	ldr	r2, [pc, #384]	; (8005a5c <HAL_TIM_ConfigClockSource+0x228>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	f000 8099 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 80058e0:	4a5e      	ldr	r2, [pc, #376]	; (8005a5c <HAL_TIM_ConfigClockSource+0x228>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	f200 809e 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 80058e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058ec:	f000 8091 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 80058f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058f4:	f200 8096 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 80058f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fc:	f000 8089 	beq.w	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 8005900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005904:	f200 808e 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 8005908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590c:	d03e      	beq.n	800598c <HAL_TIM_ConfigClockSource+0x158>
 800590e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005912:	f200 8087 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591a:	f000 8086 	beq.w	8005a2a <HAL_TIM_ConfigClockSource+0x1f6>
 800591e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005922:	d87f      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 8005924:	2b70      	cmp	r3, #112	; 0x70
 8005926:	d01a      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x12a>
 8005928:	2b70      	cmp	r3, #112	; 0x70
 800592a:	d87b      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 800592c:	2b60      	cmp	r3, #96	; 0x60
 800592e:	d050      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x19e>
 8005930:	2b60      	cmp	r3, #96	; 0x60
 8005932:	d877      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 8005934:	2b50      	cmp	r3, #80	; 0x50
 8005936:	d03c      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x17e>
 8005938:	2b50      	cmp	r3, #80	; 0x50
 800593a:	d873      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d058      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x1be>
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d86f      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 8005944:	2b30      	cmp	r3, #48	; 0x30
 8005946:	d064      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 8005948:	2b30      	cmp	r3, #48	; 0x30
 800594a:	d86b      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 800594c:	2b20      	cmp	r3, #32
 800594e:	d060      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 8005950:	2b20      	cmp	r3, #32
 8005952:	d867      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d05c      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 8005958:	2b10      	cmp	r3, #16
 800595a:	d05a      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x1de>
 800595c:	e062      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800596e:	f000 ff45 	bl	80067fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005980:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	609a      	str	r2, [r3, #8]
      break;
 800598a:	e04f      	b.n	8005a2c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800599c:	f000 ff2e 	bl	80067fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ae:	609a      	str	r2, [r3, #8]
      break;
 80059b0:	e03c      	b.n	8005a2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059be:	461a      	mov	r2, r3
 80059c0:	f000 fdea 	bl	8006598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2150      	movs	r1, #80	; 0x50
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fef9 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 80059d0:	e02c      	b.n	8005a2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059de:	461a      	mov	r2, r3
 80059e0:	f000 fe46 	bl	8006670 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2160      	movs	r1, #96	; 0x60
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fee9 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 80059f0:	e01c      	b.n	8005a2c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fe:	461a      	mov	r2, r3
 8005a00:	f000 fdca 	bl	8006598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fed9 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 8005a10:	e00c      	b.n	8005a2c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	f000 fed0 	bl	80067c2 <TIM_ITRx_SetConfig>
      break;
 8005a22:	e003      	b.n	8005a2c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e000      	b.n	8005a2c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	00100070 	.word	0x00100070
 8005a4c:	00100060 	.word	0x00100060
 8005a50:	00100050 	.word	0x00100050
 8005a54:	00100040 	.word	0x00100040
 8005a58:	00100030 	.word	0x00100030
 8005a5c:	00100020 	.word	0x00100020

08005a60 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e031      	b.n	8005adc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fc30 	bl	80062f0 <TIM_SlaveTimer_SetConfig>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e018      	b.n	8005adc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ac8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a4c      	ldr	r2, [pc, #304]	; (8005c78 <TIM_Base_SetConfig+0x144>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d017      	beq.n	8005b7c <TIM_Base_SetConfig+0x48>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d013      	beq.n	8005b7c <TIM_Base_SetConfig+0x48>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a49      	ldr	r2, [pc, #292]	; (8005c7c <TIM_Base_SetConfig+0x148>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00f      	beq.n	8005b7c <TIM_Base_SetConfig+0x48>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a48      	ldr	r2, [pc, #288]	; (8005c80 <TIM_Base_SetConfig+0x14c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_Base_SetConfig+0x48>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a47      	ldr	r2, [pc, #284]	; (8005c84 <TIM_Base_SetConfig+0x150>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_Base_SetConfig+0x48>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a46      	ldr	r2, [pc, #280]	; (8005c88 <TIM_Base_SetConfig+0x154>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_Base_SetConfig+0x48>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a45      	ldr	r2, [pc, #276]	; (8005c8c <TIM_Base_SetConfig+0x158>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d108      	bne.n	8005b8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a39      	ldr	r2, [pc, #228]	; (8005c78 <TIM_Base_SetConfig+0x144>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d023      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9c:	d01f      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a36      	ldr	r2, [pc, #216]	; (8005c7c <TIM_Base_SetConfig+0x148>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01b      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a35      	ldr	r2, [pc, #212]	; (8005c80 <TIM_Base_SetConfig+0x14c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d017      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a34      	ldr	r2, [pc, #208]	; (8005c84 <TIM_Base_SetConfig+0x150>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a33      	ldr	r2, [pc, #204]	; (8005c88 <TIM_Base_SetConfig+0x154>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00f      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a33      	ldr	r2, [pc, #204]	; (8005c90 <TIM_Base_SetConfig+0x15c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a32      	ldr	r2, [pc, #200]	; (8005c94 <TIM_Base_SetConfig+0x160>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a31      	ldr	r2, [pc, #196]	; (8005c98 <TIM_Base_SetConfig+0x164>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_Base_SetConfig+0xaa>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <TIM_Base_SetConfig+0x158>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d108      	bne.n	8005bf0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <TIM_Base_SetConfig+0x144>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <TIM_Base_SetConfig+0x110>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <TIM_Base_SetConfig+0x154>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00f      	beq.n	8005c44 <TIM_Base_SetConfig+0x110>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <TIM_Base_SetConfig+0x15c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00b      	beq.n	8005c44 <TIM_Base_SetConfig+0x110>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <TIM_Base_SetConfig+0x160>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d007      	beq.n	8005c44 <TIM_Base_SetConfig+0x110>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <TIM_Base_SetConfig+0x164>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_Base_SetConfig+0x110>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a13      	ldr	r2, [pc, #76]	; (8005c8c <TIM_Base_SetConfig+0x158>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d103      	bne.n	8005c4c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d105      	bne.n	8005c6a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f023 0201 	bic.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	611a      	str	r2, [r3, #16]
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800
 8005c84:	40000c00 	.word	0x40000c00
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40015000 	.word	0x40015000
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800

08005c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f023 0201 	bic.w	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f023 0302 	bic.w	r3, r3, #2
 8005ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a30      	ldr	r2, [pc, #192]	; (8005db8 <TIM_OC1_SetConfig+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <TIM_OC1_SetConfig+0x88>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a2f      	ldr	r2, [pc, #188]	; (8005dbc <TIM_OC1_SetConfig+0x120>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <TIM_OC1_SetConfig+0x88>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a2e      	ldr	r2, [pc, #184]	; (8005dc0 <TIM_OC1_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_OC1_SetConfig+0x88>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <TIM_OC1_SetConfig+0x128>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_OC1_SetConfig+0x88>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a2c      	ldr	r2, [pc, #176]	; (8005dc8 <TIM_OC1_SetConfig+0x12c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC1_SetConfig+0x88>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a2b      	ldr	r2, [pc, #172]	; (8005dcc <TIM_OC1_SetConfig+0x130>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10c      	bne.n	8005d3e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0308 	bic.w	r3, r3, #8
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1d      	ldr	r2, [pc, #116]	; (8005db8 <TIM_OC1_SetConfig+0x11c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <TIM_OC1_SetConfig+0xd2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <TIM_OC1_SetConfig+0x120>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_OC1_SetConfig+0xd2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <TIM_OC1_SetConfig+0x124>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_OC1_SetConfig+0xd2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <TIM_OC1_SetConfig+0x128>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_OC1_SetConfig+0xd2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a19      	ldr	r2, [pc, #100]	; (8005dc8 <TIM_OC1_SetConfig+0x12c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_OC1_SetConfig+0xd2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a18      	ldr	r2, [pc, #96]	; (8005dcc <TIM_OC1_SetConfig+0x130>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d111      	bne.n	8005d92 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800
 8005dcc:	40015000 	.word	0x40015000

08005dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f023 0210 	bic.w	r2, r3, #16
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f023 0320 	bic.w	r3, r3, #32
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a2c      	ldr	r2, [pc, #176]	; (8005ee0 <TIM_OC2_SetConfig+0x110>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d007      	beq.n	8005e44 <TIM_OC2_SetConfig+0x74>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <TIM_OC2_SetConfig+0x114>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC2_SetConfig+0x74>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <TIM_OC2_SetConfig+0x118>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d10d      	bne.n	8005e60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <TIM_OC2_SetConfig+0x110>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <TIM_OC2_SetConfig+0xc0>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <TIM_OC2_SetConfig+0x114>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_OC2_SetConfig+0xc0>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1e      	ldr	r2, [pc, #120]	; (8005eec <TIM_OC2_SetConfig+0x11c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_OC2_SetConfig+0xc0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <TIM_OC2_SetConfig+0x120>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_OC2_SetConfig+0xc0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a1c      	ldr	r2, [pc, #112]	; (8005ef4 <TIM_OC2_SetConfig+0x124>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC2_SetConfig+0xc0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <TIM_OC2_SetConfig+0x118>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d113      	bne.n	8005eb8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40015000 	.word	0x40015000
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800

08005ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2b      	ldr	r2, [pc, #172]	; (8006004 <TIM_OC3_SetConfig+0x10c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_OC3_SetConfig+0x72>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2a      	ldr	r2, [pc, #168]	; (8006008 <TIM_OC3_SetConfig+0x110>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_OC3_SetConfig+0x72>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a29      	ldr	r2, [pc, #164]	; (800600c <TIM_OC3_SetConfig+0x114>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d10d      	bne.n	8005f86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <TIM_OC3_SetConfig+0x10c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <TIM_OC3_SetConfig+0xbe>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <TIM_OC3_SetConfig+0x110>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00f      	beq.n	8005fb6 <TIM_OC3_SetConfig+0xbe>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1d      	ldr	r2, [pc, #116]	; (8006010 <TIM_OC3_SetConfig+0x118>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_OC3_SetConfig+0xbe>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1c      	ldr	r2, [pc, #112]	; (8006014 <TIM_OC3_SetConfig+0x11c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_OC3_SetConfig+0xbe>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1b      	ldr	r2, [pc, #108]	; (8006018 <TIM_OC3_SetConfig+0x120>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC3_SetConfig+0xbe>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a16      	ldr	r2, [pc, #88]	; (800600c <TIM_OC3_SetConfig+0x114>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d113      	bne.n	8005fde <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40013400 	.word	0x40013400
 800600c:	40015000 	.word	0x40015000
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800

0800601c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800606a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	031b      	lsls	r3, r3, #12
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a2c      	ldr	r2, [pc, #176]	; (800612c <TIM_OC4_SetConfig+0x110>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC4_SetConfig+0x74>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a2b      	ldr	r2, [pc, #172]	; (8006130 <TIM_OC4_SetConfig+0x114>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC4_SetConfig+0x74>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a2a      	ldr	r2, [pc, #168]	; (8006134 <TIM_OC4_SetConfig+0x118>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10d      	bne.n	80060ac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	031b      	lsls	r3, r3, #12
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <TIM_OC4_SetConfig+0x110>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <TIM_OC4_SetConfig+0xc0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a1e      	ldr	r2, [pc, #120]	; (8006130 <TIM_OC4_SetConfig+0x114>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00f      	beq.n	80060dc <TIM_OC4_SetConfig+0xc0>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1e      	ldr	r2, [pc, #120]	; (8006138 <TIM_OC4_SetConfig+0x11c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_OC4_SetConfig+0xc0>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1d      	ldr	r2, [pc, #116]	; (800613c <TIM_OC4_SetConfig+0x120>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_OC4_SetConfig+0xc0>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1c      	ldr	r2, [pc, #112]	; (8006140 <TIM_OC4_SetConfig+0x124>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_OC4_SetConfig+0xc0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a17      	ldr	r2, [pc, #92]	; (8006134 <TIM_OC4_SetConfig+0x118>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d113      	bne.n	8006104 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	019b      	lsls	r3, r3, #6
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	019b      	lsls	r3, r3, #6
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40013400 	.word	0x40013400
 8006134:	40015000 	.word	0x40015000
 8006138:	40014000 	.word	0x40014000
 800613c:	40014400 	.word	0x40014400
 8006140:	40014800 	.word	0x40014800

08006144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006188:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	041b      	lsls	r3, r3, #16
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a19      	ldr	r2, [pc, #100]	; (8006200 <TIM_OC5_SetConfig+0xbc>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <TIM_OC5_SetConfig+0x82>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a18      	ldr	r2, [pc, #96]	; (8006204 <TIM_OC5_SetConfig+0xc0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00f      	beq.n	80061c6 <TIM_OC5_SetConfig+0x82>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a17      	ldr	r2, [pc, #92]	; (8006208 <TIM_OC5_SetConfig+0xc4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00b      	beq.n	80061c6 <TIM_OC5_SetConfig+0x82>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a16      	ldr	r2, [pc, #88]	; (800620c <TIM_OC5_SetConfig+0xc8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d007      	beq.n	80061c6 <TIM_OC5_SetConfig+0x82>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a15      	ldr	r2, [pc, #84]	; (8006210 <TIM_OC5_SetConfig+0xcc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d003      	beq.n	80061c6 <TIM_OC5_SetConfig+0x82>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <TIM_OC5_SetConfig+0xd0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d109      	bne.n	80061da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	621a      	str	r2, [r3, #32]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40013400 	.word	0x40013400
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400
 8006210:	40014800 	.word	0x40014800
 8006214:	40015000 	.word	0x40015000

08006218 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800625e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	051b      	lsls	r3, r3, #20
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <TIM_OC6_SetConfig+0xc0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <TIM_OC6_SetConfig+0x84>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a19      	ldr	r2, [pc, #100]	; (80062dc <TIM_OC6_SetConfig+0xc4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00f      	beq.n	800629c <TIM_OC6_SetConfig+0x84>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <TIM_OC6_SetConfig+0xc8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_OC6_SetConfig+0x84>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <TIM_OC6_SetConfig+0xcc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_OC6_SetConfig+0x84>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <TIM_OC6_SetConfig+0xd0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_OC6_SetConfig+0x84>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a15      	ldr	r2, [pc, #84]	; (80062ec <TIM_OC6_SetConfig+0xd4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d109      	bne.n	80062b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40014400 	.word	0x40014400
 80062e8:	40014800 	.word	0x40014800
 80062ec:	40015000 	.word	0x40015000

080062f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006322:	f023 0307 	bic.w	r3, r3, #7
 8006326:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4a56      	ldr	r2, [pc, #344]	; (8006498 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	f000 80a2 	beq.w	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 8006346:	4a54      	ldr	r2, [pc, #336]	; (8006498 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	f200 809b 	bhi.w	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 800634e:	4a53      	ldr	r2, [pc, #332]	; (800649c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006350:	4293      	cmp	r3, r2
 8006352:	f000 809a 	beq.w	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 8006356:	4a51      	ldr	r2, [pc, #324]	; (800649c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006358:	4293      	cmp	r3, r2
 800635a:	f200 8093 	bhi.w	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 800635e:	4a50      	ldr	r2, [pc, #320]	; (80064a0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	f000 8092 	beq.w	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 8006366:	4a4e      	ldr	r2, [pc, #312]	; (80064a0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	f200 808b 	bhi.w	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 800636e:	4a4d      	ldr	r2, [pc, #308]	; (80064a4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	f000 808a 	beq.w	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 8006376:	4a4b      	ldr	r2, [pc, #300]	; (80064a4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	f200 8083 	bhi.w	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 800637e:	4a4a      	ldr	r2, [pc, #296]	; (80064a8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	f000 8082 	beq.w	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 8006386:	4a48      	ldr	r2, [pc, #288]	; (80064a8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d87b      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 800638c:	4a47      	ldr	r2, [pc, #284]	; (80064ac <TIM_SlaveTimer_SetConfig+0x1bc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d07b      	beq.n	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 8006392:	4a46      	ldr	r2, [pc, #280]	; (80064ac <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d875      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 8006398:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800639c:	d075      	beq.n	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 800639e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063a2:	d86f      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 80063a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a8:	d06f      	beq.n	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 80063aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ae:	d869      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 80063b0:	2b70      	cmp	r3, #112	; 0x70
 80063b2:	d01a      	beq.n	80063ea <TIM_SlaveTimer_SetConfig+0xfa>
 80063b4:	2b70      	cmp	r3, #112	; 0x70
 80063b6:	d865      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 80063b8:	2b60      	cmp	r3, #96	; 0x60
 80063ba:	d059      	beq.n	8006470 <TIM_SlaveTimer_SetConfig+0x180>
 80063bc:	2b60      	cmp	r3, #96	; 0x60
 80063be:	d861      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 80063c0:	2b50      	cmp	r3, #80	; 0x50
 80063c2:	d04b      	beq.n	800645c <TIM_SlaveTimer_SetConfig+0x16c>
 80063c4:	2b50      	cmp	r3, #80	; 0x50
 80063c6:	d85d      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d019      	beq.n	8006400 <TIM_SlaveTimer_SetConfig+0x110>
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d859      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d05a      	beq.n	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d855      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d056      	beq.n	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d851      	bhi.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d052      	beq.n	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d050      	beq.n	800648a <TIM_SlaveTimer_SetConfig+0x19a>
 80063e8:	e04c      	b.n	8006484 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80063fa:	f000 f9ff 	bl	80067fc <TIM_ETR_SetConfig>
      break;
 80063fe:	e045      	b.n	800648c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b05      	cmp	r3, #5
 8006406:	d004      	beq.n	8006412 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800640c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006410:	d101      	bne.n	8006416 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e03b      	b.n	800648e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6a1a      	ldr	r2, [r3, #32]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800643c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]
      break;
 800645a:	e017      	b.n	800648c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006468:	461a      	mov	r2, r3
 800646a:	f000 f895 	bl	8006598 <TIM_TI1_ConfigInputStage>
      break;
 800646e:	e00d      	b.n	800648c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800647c:	461a      	mov	r2, r3
 800647e:	f000 f8f7 	bl	8006670 <TIM_TI2_ConfigInputStage>
      break;
 8006482:	e003      	b.n	800648c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
      break;
 8006488:	e000      	b.n	800648c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800648a:	bf00      	nop
  }

  return status;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	00100070 	.word	0x00100070
 800649c:	00100060 	.word	0x00100060
 80064a0:	00100050 	.word	0x00100050
 80064a4:	00100040 	.word	0x00100040
 80064a8:	00100030 	.word	0x00100030
 80064ac:	00100020 	.word	0x00100020

080064b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f023 0201 	bic.w	r2, r3, #1
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a28      	ldr	r2, [pc, #160]	; (800657c <TIM_TI1_SetConfig+0xcc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01b      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e4:	d017      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a25      	ldr	r2, [pc, #148]	; (8006580 <TIM_TI1_SetConfig+0xd0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a24      	ldr	r2, [pc, #144]	; (8006584 <TIM_TI1_SetConfig+0xd4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00f      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a23      	ldr	r2, [pc, #140]	; (8006588 <TIM_TI1_SetConfig+0xd8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00b      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a22      	ldr	r2, [pc, #136]	; (800658c <TIM_TI1_SetConfig+0xdc>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a21      	ldr	r2, [pc, #132]	; (8006590 <TIM_TI1_SetConfig+0xe0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a20      	ldr	r2, [pc, #128]	; (8006594 <TIM_TI1_SetConfig+0xe4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <TIM_TI1_SetConfig+0x6a>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <TIM_TI1_SetConfig+0x6c>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e003      	b.n	800653a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	b2db      	uxtb	r3, r3
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f023 030a 	bic.w	r3, r3, #10
 8006554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f003 030a 	and.w	r3, r3, #10
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40013400 	.word	0x40013400
 8006590:	40014000 	.word	0x40014000
 8006594:	40015000 	.word	0x40015000

08006598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 030a 	bic.w	r3, r3, #10
 80065d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b087      	sub	sp, #28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0210 	bic.w	r2, r3, #16
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	b29b      	uxth	r3, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006648:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f023 0210 	bic.w	r2, r3, #16
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800669a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	031b      	lsls	r3, r3, #12
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f023 0303 	bic.w	r3, r3, #3
 80066fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800670c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	011b      	lsls	r3, r3, #4
 8006712:	b2db      	uxtb	r3, r3
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006720:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	621a      	str	r2, [r3, #32]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006774:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006786:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	031b      	lsls	r3, r3, #12
 800678c:	b29b      	uxth	r3, r3
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800679a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	031b      	lsls	r3, r3, #12
 80067a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f043 0307 	orr.w	r3, r3, #7
 80067e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	609a      	str	r2, [r3, #8]
}
 80067f0:	bf00      	nop
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	021a      	lsls	r2, r3, #8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	431a      	orrs	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4313      	orrs	r3, r2
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	609a      	str	r2, [r3, #8]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	2201      	movs	r2, #1
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1a      	ldr	r2, [r3, #32]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	43db      	mvns	r3, r3
 800685e:	401a      	ands	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	fa01 f303 	lsl.w	r3, r1, r3
 8006874:	431a      	orrs	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	621a      	str	r2, [r3, #32]
}
 800687a:	bf00      	nop
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
	...

08006888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800689c:	2302      	movs	r3, #2
 800689e:	e074      	b.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a34      	ldr	r2, [pc, #208]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a33      	ldr	r2, [pc, #204]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a31      	ldr	r2, [pc, #196]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d108      	bne.n	80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a21      	ldr	r2, [pc, #132]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d022      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006920:	d01d      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1f      	ldr	r2, [pc, #124]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d018      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a15      	ldr	r2, [pc, #84]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a11      	ldr	r2, [pc, #68]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d10c      	bne.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4313      	orrs	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40013400 	.word	0x40013400
 80069a0:	40015000 	.word	0x40015000
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40014000 	.word	0x40014000

080069b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e042      	b.n	8006ad8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fa fbaf 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2224      	movs	r2, #36	; 0x24
 8006a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0201 	bic.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fb24 	bl	80070d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f825 	bl	8006ae0 <UART_SetConfig>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e01b      	b.n	8006ad8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fba3 	bl	800721c <UART_CheckIdleState>
 8006ad6:	4603      	mov	r3, r0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ae4:	b08c      	sub	sp, #48	; 0x30
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4baa      	ldr	r3, [pc, #680]	; (8006db8 <UART_SetConfig+0x2d8>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a9f      	ldr	r2, [pc, #636]	; (8006dbc <UART_SetConfig+0x2dc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	f023 010f 	bic.w	r1, r3, #15
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a90      	ldr	r2, [pc, #576]	; (8006dc0 <UART_SetConfig+0x2e0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d125      	bne.n	8006bd0 <UART_SetConfig+0xf0>
 8006b84:	4b8f      	ldr	r3, [pc, #572]	; (8006dc4 <UART_SetConfig+0x2e4>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d81a      	bhi.n	8006bc8 <UART_SetConfig+0xe8>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <UART_SetConfig+0xb8>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006ba9 	.word	0x08006ba9
 8006b9c:	08006bb9 	.word	0x08006bb9
 8006ba0:	08006bb1 	.word	0x08006bb1
 8006ba4:	08006bc1 	.word	0x08006bc1
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bae:	e116      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb6:	e112      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bbe:	e10e      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc6:	e10a      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e106      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a7c      	ldr	r2, [pc, #496]	; (8006dc8 <UART_SetConfig+0x2e8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d138      	bne.n	8006c4c <UART_SetConfig+0x16c>
 8006bda:	4b7a      	ldr	r3, [pc, #488]	; (8006dc4 <UART_SetConfig+0x2e4>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	2b0c      	cmp	r3, #12
 8006be6:	d82d      	bhi.n	8006c44 <UART_SetConfig+0x164>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <UART_SetConfig+0x110>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c25 	.word	0x08006c25
 8006bf4:	08006c45 	.word	0x08006c45
 8006bf8:	08006c45 	.word	0x08006c45
 8006bfc:	08006c45 	.word	0x08006c45
 8006c00:	08006c35 	.word	0x08006c35
 8006c04:	08006c45 	.word	0x08006c45
 8006c08:	08006c45 	.word	0x08006c45
 8006c0c:	08006c45 	.word	0x08006c45
 8006c10:	08006c2d 	.word	0x08006c2d
 8006c14:	08006c45 	.word	0x08006c45
 8006c18:	08006c45 	.word	0x08006c45
 8006c1c:	08006c45 	.word	0x08006c45
 8006c20:	08006c3d 	.word	0x08006c3d
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2a:	e0d8      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c32:	e0d4      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3a:	e0d0      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c42:	e0cc      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c44:	2310      	movs	r3, #16
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4a:	e0c8      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5e      	ldr	r2, [pc, #376]	; (8006dcc <UART_SetConfig+0x2ec>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d125      	bne.n	8006ca2 <UART_SetConfig+0x1c2>
 8006c56:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <UART_SetConfig+0x2e4>)
 8006c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c60:	2b30      	cmp	r3, #48	; 0x30
 8006c62:	d016      	beq.n	8006c92 <UART_SetConfig+0x1b2>
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	d818      	bhi.n	8006c9a <UART_SetConfig+0x1ba>
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d00a      	beq.n	8006c82 <UART_SetConfig+0x1a2>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d814      	bhi.n	8006c9a <UART_SetConfig+0x1ba>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <UART_SetConfig+0x19a>
 8006c74:	2b10      	cmp	r3, #16
 8006c76:	d008      	beq.n	8006c8a <UART_SetConfig+0x1aa>
 8006c78:	e00f      	b.n	8006c9a <UART_SetConfig+0x1ba>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c80:	e0ad      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c82:	2302      	movs	r3, #2
 8006c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c88:	e0a9      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c8a:	2304      	movs	r3, #4
 8006c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c90:	e0a5      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c92:	2308      	movs	r3, #8
 8006c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c98:	e0a1      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006c9a:	2310      	movs	r3, #16
 8006c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca0:	e09d      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a4a      	ldr	r2, [pc, #296]	; (8006dd0 <UART_SetConfig+0x2f0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d125      	bne.n	8006cf8 <UART_SetConfig+0x218>
 8006cac:	4b45      	ldr	r3, [pc, #276]	; (8006dc4 <UART_SetConfig+0x2e4>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cb8:	d016      	beq.n	8006ce8 <UART_SetConfig+0x208>
 8006cba:	2bc0      	cmp	r3, #192	; 0xc0
 8006cbc:	d818      	bhi.n	8006cf0 <UART_SetConfig+0x210>
 8006cbe:	2b80      	cmp	r3, #128	; 0x80
 8006cc0:	d00a      	beq.n	8006cd8 <UART_SetConfig+0x1f8>
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	d814      	bhi.n	8006cf0 <UART_SetConfig+0x210>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <UART_SetConfig+0x1f0>
 8006cca:	2b40      	cmp	r3, #64	; 0x40
 8006ccc:	d008      	beq.n	8006ce0 <UART_SetConfig+0x200>
 8006cce:	e00f      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd6:	e082      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cde:	e07e      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce6:	e07a      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006ce8:	2308      	movs	r3, #8
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cee:	e076      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	e072      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a35      	ldr	r2, [pc, #212]	; (8006dd4 <UART_SetConfig+0x2f4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d12a      	bne.n	8006d58 <UART_SetConfig+0x278>
 8006d02:	4b30      	ldr	r3, [pc, #192]	; (8006dc4 <UART_SetConfig+0x2e4>)
 8006d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d10:	d01a      	beq.n	8006d48 <UART_SetConfig+0x268>
 8006d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d16:	d81b      	bhi.n	8006d50 <UART_SetConfig+0x270>
 8006d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1c:	d00c      	beq.n	8006d38 <UART_SetConfig+0x258>
 8006d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d22:	d815      	bhi.n	8006d50 <UART_SetConfig+0x270>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <UART_SetConfig+0x250>
 8006d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2c:	d008      	beq.n	8006d40 <UART_SetConfig+0x260>
 8006d2e:	e00f      	b.n	8006d50 <UART_SetConfig+0x270>
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d36:	e052      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3e:	e04e      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006d40:	2304      	movs	r3, #4
 8006d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d46:	e04a      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4e:	e046      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006d50:	2310      	movs	r3, #16
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d56:	e042      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a17      	ldr	r2, [pc, #92]	; (8006dbc <UART_SetConfig+0x2dc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d13a      	bne.n	8006dd8 <UART_SetConfig+0x2f8>
 8006d62:	4b18      	ldr	r3, [pc, #96]	; (8006dc4 <UART_SetConfig+0x2e4>)
 8006d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d70:	d01a      	beq.n	8006da8 <UART_SetConfig+0x2c8>
 8006d72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d76:	d81b      	bhi.n	8006db0 <UART_SetConfig+0x2d0>
 8006d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7c:	d00c      	beq.n	8006d98 <UART_SetConfig+0x2b8>
 8006d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d82:	d815      	bhi.n	8006db0 <UART_SetConfig+0x2d0>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <UART_SetConfig+0x2b0>
 8006d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d8c:	d008      	beq.n	8006da0 <UART_SetConfig+0x2c0>
 8006d8e:	e00f      	b.n	8006db0 <UART_SetConfig+0x2d0>
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d96:	e022      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9e:	e01e      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006da0:	2304      	movs	r3, #4
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da6:	e01a      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006da8:	2308      	movs	r3, #8
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dae:	e016      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006db0:	2310      	movs	r3, #16
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db6:	e012      	b.n	8006dde <UART_SetConfig+0x2fe>
 8006db8:	cfff69f3 	.word	0xcfff69f3
 8006dbc:	40008000 	.word	0x40008000
 8006dc0:	40013800 	.word	0x40013800
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	40004400 	.word	0x40004400
 8006dcc:	40004800 	.word	0x40004800
 8006dd0:	40004c00 	.word	0x40004c00
 8006dd4:	40005000 	.word	0x40005000
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4aae      	ldr	r2, [pc, #696]	; (800709c <UART_SetConfig+0x5bc>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	f040 8097 	bne.w	8006f18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d823      	bhi.n	8006e3a <UART_SetConfig+0x35a>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <UART_SetConfig+0x318>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e3b 	.word	0x08006e3b
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e3b 	.word	0x08006e3b
 8006e08:	08006e2b 	.word	0x08006e2b
 8006e0c:	08006e3b 	.word	0x08006e3b
 8006e10:	08006e3b 	.word	0x08006e3b
 8006e14:	08006e3b 	.word	0x08006e3b
 8006e18:	08006e33 	.word	0x08006e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e1c:	f7fd fb30 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8006e20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e22:	e010      	b.n	8006e46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e24:	4b9e      	ldr	r3, [pc, #632]	; (80070a0 <UART_SetConfig+0x5c0>)
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e28:	e00d      	b.n	8006e46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2a:	f7fd fabb 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8006e2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e30:	e009      	b.n	8006e46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e38:	e005      	b.n	8006e46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8130 	beq.w	80070ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	4a94      	ldr	r2, [pc, #592]	; (80070a4 <UART_SetConfig+0x5c4>)
 8006e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	4413      	add	r3, r2
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d305      	bcc.n	8006e7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d903      	bls.n	8006e86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e84:	e113      	b.n	80070ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	2200      	movs	r2, #0
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	60fa      	str	r2, [r7, #12]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	4a84      	ldr	r2, [pc, #528]	; (80070a4 <UART_SetConfig+0x5c4>)
 8006e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ea8:	f7f9 f9b6 	bl	8000218 <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	020b      	lsls	r3, r1, #8
 8006ebe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ec2:	0202      	lsls	r2, r0, #8
 8006ec4:	6979      	ldr	r1, [r7, #20]
 8006ec6:	6849      	ldr	r1, [r1, #4]
 8006ec8:	0849      	lsrs	r1, r1, #1
 8006eca:	2000      	movs	r0, #0
 8006ecc:	460c      	mov	r4, r1
 8006ece:	4605      	mov	r5, r0
 8006ed0:	eb12 0804 	adds.w	r8, r2, r4
 8006ed4:	eb43 0905 	adc.w	r9, r3, r5
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	469a      	mov	sl, r3
 8006ee0:	4693      	mov	fp, r2
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	465b      	mov	r3, fp
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4649      	mov	r1, r9
 8006eea:	f7f9 f995 	bl	8000218 <__aeabi_uldivmod>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006efc:	d308      	bcc.n	8006f10 <UART_SetConfig+0x430>
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f04:	d204      	bcs.n	8006f10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6a3a      	ldr	r2, [r7, #32]
 8006f0c:	60da      	str	r2, [r3, #12]
 8006f0e:	e0ce      	b.n	80070ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f16:	e0ca      	b.n	80070ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f20:	d166      	bne.n	8006ff0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d827      	bhi.n	8006f7a <UART_SetConfig+0x49a>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x450>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f5d 	.word	0x08006f5d
 8006f38:	08006f65 	.word	0x08006f65
 8006f3c:	08006f7b 	.word	0x08006f7b
 8006f40:	08006f6b 	.word	0x08006f6b
 8006f44:	08006f7b 	.word	0x08006f7b
 8006f48:	08006f7b 	.word	0x08006f7b
 8006f4c:	08006f7b 	.word	0x08006f7b
 8006f50:	08006f73 	.word	0x08006f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f54:	f7fd fa94 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8006f58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f5a:	e014      	b.n	8006f86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7fd faa6 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8006f60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f62:	e010      	b.n	8006f86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f64:	4b4e      	ldr	r3, [pc, #312]	; (80070a0 <UART_SetConfig+0x5c0>)
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f68:	e00d      	b.n	8006f86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6a:	f7fd fa1b 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8006f6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f70:	e009      	b.n	8006f86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f78:	e005      	b.n	8006f86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8090 	beq.w	80070ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	4a44      	ldr	r2, [pc, #272]	; (80070a4 <UART_SetConfig+0x5c4>)
 8006f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa0:	005a      	lsls	r2, r3, #1
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	441a      	add	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	2b0f      	cmp	r3, #15
 8006fb8:	d916      	bls.n	8006fe8 <UART_SetConfig+0x508>
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc0:	d212      	bcs.n	8006fe8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f023 030f 	bic.w	r3, r3, #15
 8006fca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	8bfb      	ldrh	r3, [r7, #30]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	8bfa      	ldrh	r2, [r7, #30]
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	e062      	b.n	80070ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fee:	e05e      	b.n	80070ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d828      	bhi.n	800704a <UART_SetConfig+0x56a>
 8006ff8:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0x520>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007025 	.word	0x08007025
 8007004:	0800702d 	.word	0x0800702d
 8007008:	08007035 	.word	0x08007035
 800700c:	0800704b 	.word	0x0800704b
 8007010:	0800703b 	.word	0x0800703b
 8007014:	0800704b 	.word	0x0800704b
 8007018:	0800704b 	.word	0x0800704b
 800701c:	0800704b 	.word	0x0800704b
 8007020:	08007043 	.word	0x08007043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007024:	f7fd fa2c 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8007028:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800702a:	e014      	b.n	8007056 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800702c:	f7fd fa3e 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8007030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007032:	e010      	b.n	8007056 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007034:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <UART_SetConfig+0x5c0>)
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007038:	e00d      	b.n	8007056 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703a:	f7fd f9b3 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007040:	e009      	b.n	8007056 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007048:	e005      	b.n	8007056 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007054:	bf00      	nop
    }

    if (pclk != 0U)
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d028      	beq.n	80070ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <UART_SetConfig+0x5c4>)
 8007062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007066:	461a      	mov	r2, r3
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	fbb3 f2f2 	udiv	r2, r3, r2
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	085b      	lsrs	r3, r3, #1
 8007074:	441a      	add	r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	2b0f      	cmp	r3, #15
 8007084:	d910      	bls.n	80070a8 <UART_SetConfig+0x5c8>
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800708c:	d20c      	bcs.n	80070a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	b29a      	uxth	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60da      	str	r2, [r3, #12]
 8007098:	e009      	b.n	80070ae <UART_SetConfig+0x5ce>
 800709a:	bf00      	nop
 800709c:	40008000 	.word	0x40008000
 80070a0:	00f42400 	.word	0x00f42400
 80070a4:	080077a4 	.word	0x080077a4
      }
      else
      {
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2200      	movs	r2, #0
 80070c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2200      	movs	r2, #0
 80070c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80070ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3730      	adds	r7, #48	; 0x30
 80070d2:	46bd      	mov	sp, r7
 80070d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080070d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01a      	beq.n	80071ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d6:	d10a      	bne.n	80071ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b098      	sub	sp, #96	; 0x60
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800722c:	f7fa fa00 	bl	8001630 <HAL_GetTick>
 8007230:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d12f      	bne.n	80072a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007248:	2200      	movs	r2, #0
 800724a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f88e 	bl	8007370 <UART_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d022      	beq.n	80072a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800726e:	653b      	str	r3, [r7, #80]	; 0x50
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007278:	647b      	str	r3, [r7, #68]	; 0x44
 800727a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800727e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e6      	bne.n	800725a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e063      	b.n	8007368 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d149      	bne.n	8007342 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b6:	2200      	movs	r2, #0
 80072b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f857 	bl	8007370 <UART_WaitOnFlagUntilTimeout>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d03c      	beq.n	8007342 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	623b      	str	r3, [r7, #32]
   return(result);
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30
 80072e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e6      	bne.n	80072c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	60fb      	str	r3, [r7, #12]
   return(result);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	64bb      	str	r3, [r7, #72]	; 0x48
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800731a:	61fa      	str	r2, [r7, #28]
 800731c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	69b9      	ldr	r1, [r7, #24]
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	617b      	str	r3, [r7, #20]
   return(result);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e5      	bne.n	80072fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e012      	b.n	8007368 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3758      	adds	r7, #88	; 0x58
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	4613      	mov	r3, r2
 800737e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007380:	e04f      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007388:	d04b      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738a:	f7fa f951 	bl	8001630 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	429a      	cmp	r2, r3
 8007398:	d302      	bcc.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e04e      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d037      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b80      	cmp	r3, #128	; 0x80
 80073b6:	d034      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d031      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d110      	bne.n	80073ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2208      	movs	r2, #8
 80073d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 f838 	bl	800744a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2208      	movs	r2, #8
 80073de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e029      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fc:	d111      	bne.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f81e 	bl	800744a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e00f      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	4013      	ands	r3, r2
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	429a      	cmp	r2, r3
 8007430:	bf0c      	ite	eq
 8007432:	2301      	moveq	r3, #1
 8007434:	2300      	movne	r3, #0
 8007436:	b2db      	uxtb	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	429a      	cmp	r2, r3
 800743e:	d0a0      	beq.n	8007382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800744a:	b480      	push	{r7}
 800744c:	b095      	sub	sp, #84	; 0x54
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007470:	643b      	str	r3, [r7, #64]	; 0x40
 8007472:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3308      	adds	r3, #8
 800748a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	61fb      	str	r3, [r7, #28]
   return(result);
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3308      	adds	r3, #8
 80074a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e3      	bne.n	8007484 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d118      	bne.n	80074f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f023 0310 	bic.w	r3, r3, #16
 80074d8:	647b      	str	r3, [r7, #68]	; 0x44
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6979      	ldr	r1, [r7, #20]
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	613b      	str	r3, [r7, #16]
   return(result);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e6      	bne.n	80074c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	675a      	str	r2, [r3, #116]	; 0x74
}
 800750a:	bf00      	nop
 800750c:	3754      	adds	r7, #84	; 0x54
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_UARTEx_DisableFifoMode+0x16>
 8007528:	2302      	movs	r3, #2
 800752a:	e027      	b.n	800757c <HAL_UARTEx_DisableFifoMode+0x66>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2224      	movs	r2, #36	; 0x24
 8007538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0201 	bic.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800755a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800759c:	2302      	movs	r3, #2
 800759e:	e02d      	b.n	80075fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	; 0x24
 80075ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0201 	bic.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f84f 	bl	8007680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007618:	2302      	movs	r3, #2
 800761a:	e02d      	b.n	8007678 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2224      	movs	r2, #36	; 0x24
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f811 	bl	8007680 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2220      	movs	r2, #32
 800766a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768c:	2b00      	cmp	r3, #0
 800768e:	d108      	bne.n	80076a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076a0:	e031      	b.n	8007706 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076a2:	2308      	movs	r3, #8
 80076a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076a6:	2308      	movs	r3, #8
 80076a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	0e5b      	lsrs	r3, r3, #25
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	0f5b      	lsrs	r3, r3, #29
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	7b3a      	ldrb	r2, [r7, #12]
 80076ce:	4911      	ldr	r1, [pc, #68]	; (8007714 <UARTEx_SetNbDataToProcess+0x94>)
 80076d0:	5c8a      	ldrb	r2, [r1, r2]
 80076d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076d6:	7b3a      	ldrb	r2, [r7, #12]
 80076d8:	490f      	ldr	r1, [pc, #60]	; (8007718 <UARTEx_SetNbDataToProcess+0x98>)
 80076da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	7b7a      	ldrb	r2, [r7, #13]
 80076ec:	4909      	ldr	r1, [pc, #36]	; (8007714 <UARTEx_SetNbDataToProcess+0x94>)
 80076ee:	5c8a      	ldrb	r2, [r1, r2]
 80076f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076f4:	7b7a      	ldrb	r2, [r7, #13]
 80076f6:	4908      	ldr	r1, [pc, #32]	; (8007718 <UARTEx_SetNbDataToProcess+0x98>)
 80076f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80076fe:	b29a      	uxth	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	080077bc 	.word	0x080077bc
 8007718:	080077c4 	.word	0x080077c4

0800771c <memset>:
 800771c:	4402      	add	r2, r0
 800771e:	4603      	mov	r3, r0
 8007720:	4293      	cmp	r3, r2
 8007722:	d100      	bne.n	8007726 <memset+0xa>
 8007724:	4770      	bx	lr
 8007726:	f803 1b01 	strb.w	r1, [r3], #1
 800772a:	e7f9      	b.n	8007720 <memset+0x4>

0800772c <__libc_init_array>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4d0d      	ldr	r5, [pc, #52]	; (8007764 <__libc_init_array+0x38>)
 8007730:	4c0d      	ldr	r4, [pc, #52]	; (8007768 <__libc_init_array+0x3c>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	2600      	movs	r6, #0
 8007738:	42a6      	cmp	r6, r4
 800773a:	d109      	bne.n	8007750 <__libc_init_array+0x24>
 800773c:	4d0b      	ldr	r5, [pc, #44]	; (800776c <__libc_init_array+0x40>)
 800773e:	4c0c      	ldr	r4, [pc, #48]	; (8007770 <__libc_init_array+0x44>)
 8007740:	f000 f818 	bl	8007774 <_init>
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	2600      	movs	r6, #0
 800774a:	42a6      	cmp	r6, r4
 800774c:	d105      	bne.n	800775a <__libc_init_array+0x2e>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	f855 3b04 	ldr.w	r3, [r5], #4
 8007754:	4798      	blx	r3
 8007756:	3601      	adds	r6, #1
 8007758:	e7ee      	b.n	8007738 <__libc_init_array+0xc>
 800775a:	f855 3b04 	ldr.w	r3, [r5], #4
 800775e:	4798      	blx	r3
 8007760:	3601      	adds	r6, #1
 8007762:	e7f2      	b.n	800774a <__libc_init_array+0x1e>
 8007764:	080077d4 	.word	0x080077d4
 8007768:	080077d4 	.word	0x080077d4
 800776c:	080077d4 	.word	0x080077d4
 8007770:	080077d8 	.word	0x080077d8

08007774 <_init>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr

08007780 <_fini>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr
