
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b44  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d5c  08005d5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d64  08005d64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000010  08005d7c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08005d7c  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017128  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a33  00000000  00000000  000371ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00039be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fff  00000000  00000000  0003b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017446  00000000  00000000  00063a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9e2  00000000  00000000  0007aed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058f8  00000000  00000000  001898bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0018f1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005d04 	.word	0x08005d04

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005d04 	.word	0x08005d04

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd07 	bl	8000f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82c 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa1e 	bl	8000960 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f9f2 	bl	800090c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f90a 	bl	8000740 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f952 	bl	80007d4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f86c 	bl	800060c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000534:	f000 f99c 	bl	8000870 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <main+0x54>)
 800053a:	f003 ffa7 	bl	800448c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <main+0x58>)
 8000540:	f003 ffa4 	bl	800448c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <main+0x54>)
 8000546:	f004 f811 	bl	800456c <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800054a:	217f      	movs	r1, #127	; 0x7f
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <main+0x5c>)
 800054e:	f002 f86b 	bl	8002628 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 300);
 8000552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000556:	4907      	ldr	r1, [pc, #28]	; (8000574 <main+0x60>)
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <main+0x5c>)
 800055a:	f001 f957 	bl	800180c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Micros();
 800055e:	f000 fa85 	bl	8000a6c <Micros>
	  ADC_Averaged();
 8000562:	f000 faa3 	bl	8000aac <ADC_Averaged>
	  Micros();
 8000566:	e7fa      	b.n	800055e <main+0x4a>
 8000568:	2000018c 	.word	0x2000018c
 800056c:	200001d8 	.word	0x200001d8
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000234 	.word	0x20000234

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	2238      	movs	r2, #56	; 0x38
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 fb90 	bl	8005cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059a:	2000      	movs	r0, #0
 800059c:	f002 feee 	bl	800337c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	2303      	movs	r3, #3
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005b2:	2306      	movs	r3, #6
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005b6:	2355      	movs	r3, #85	; 0x55
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ff8a 	bl	80034e4 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005d6:	f000 fad1 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2104      	movs	r1, #4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa88 	bl	8003b08 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005fe:	f000 fabd 	bl	8000b7c <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f005 fb41 	bl	8005cac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062a:	4b41      	ldr	r3, [pc, #260]	; (8000730 <MX_ADC1_Init+0x124>)
 800062c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000630:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000632:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <MX_ADC1_Init+0x124>)
 8000634:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063a:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <MX_ADC1_Init+0x124>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_ADC1_Init+0x124>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <MX_ADC1_Init+0x124>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <MX_ADC1_Init+0x124>)
 800064e:	2201      	movs	r2, #1
 8000650:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <MX_ADC1_Init+0x124>)
 8000654:	2204      	movs	r2, #4
 8000656:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <MX_ADC1_Init+0x124>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <MX_ADC1_Init+0x124>)
 8000660:	2201      	movs	r2, #1
 8000662:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_ADC1_Init+0x124>)
 8000666:	2203      	movs	r2, #3
 8000668:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <MX_ADC1_Init+0x124>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_ADC1_Init+0x124>)
 8000674:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <MX_ADC1_Init+0x124>)
 800067c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000680:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <MX_ADC1_Init+0x124>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_ADC1_Init+0x124>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <MX_ADC1_Init+0x124>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	4825      	ldr	r0, [pc, #148]	; (8000730 <MX_ADC1_Init+0x124>)
 800069a:	f000 fefb 	bl	8001494 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006a4:	f000 fa6a 	bl	8000b7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b0:	4619      	mov	r1, r3
 80006b2:	481f      	ldr	r0, [pc, #124]	; (8000730 <MX_ADC1_Init+0x124>)
 80006b4:	f002 f81a 	bl	80026ec <HAL_ADCEx_MultiModeConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006be:	f000 fa5d 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_ADC1_Init+0x128>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c6:	2306      	movs	r3, #6
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006ca:	2307      	movs	r3, #7
 80006cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ce:	237f      	movs	r3, #127	; 0x7f
 80006d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d2:	2304      	movs	r3, #4
 80006d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <MX_ADC1_Init+0x124>)
 80006e0:	f001 f986 	bl	80019f0 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ea:	f000 fa47 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_ADC1_Init+0x12c>)
 80006f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f2:	230c      	movs	r3, #12
 80006f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_ADC1_Init+0x124>)
 80006fc:	f001 f978 	bl	80019f0 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000706:	f000 fa39 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_ADC1_Init+0x130>)
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800070e:	2312      	movs	r3, #18
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_ADC1_Init+0x124>)
 8000718:	f001 f96a 	bl	80019f0 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000722:	f000 fa2b 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3730      	adds	r7, #48	; 0x30
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000002c 	.word	0x2000002c
 8000734:	04300002 	.word	0x04300002
 8000738:	08600004 	.word	0x08600004
 800073c:	3ef08000 	.word	0x3ef08000

08000740 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000746:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <MX_LPUART1_UART_Init+0x90>)
 8000748:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000782:	4812      	ldr	r0, [pc, #72]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000784:	f004 fc24 	bl	8004fd0 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f9f5 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000796:	f005 f9bf 	bl	8005b18 <HAL_UARTEx_SetTxFifoThreshold>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007a0:	f000 f9ec 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	f005 f9f4 	bl	8005b94 <HAL_UARTEx_SetRxFifoThreshold>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007b2:	f000 f9e3 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	f005 f975 	bl	8005aa6 <HAL_UARTEx_DisableFifoMode>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007c2:	f000 f9db 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000f8 	.word	0x200000f8
 80007d0:	40008000 	.word	0x40008000

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_TIM2_Init+0x98>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_TIM2_Init+0x98>)
 80007fc:	22a9      	movs	r2, #169	; 0xa9
 80007fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_TIM2_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_TIM2_Init+0x98>)
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_TIM2_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_TIM2_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <MX_TIM2_Init+0x98>)
 800081c:	f003 fdde 	bl	80043dc <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000826:	f000 f9a9 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_TIM2_Init+0x98>)
 8000838:	f004 f860 	bl	80048fc <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000842:	f000 f99b 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_TIM2_Init+0x98>)
 8000854:	f004 fae0 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800085e:	f000 f98d 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000018c 	.word	0x2000018c

08000870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_TIM3_Init+0x94>)
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <MX_TIM3_Init+0x98>)
 8000892:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_TIM3_Init+0x94>)
 8000896:	f244 2267 	movw	r2, #16999	; 0x4267
 800089a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_TIM3_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM3_Init+0x94>)
 80008a4:	2203      	movs	r2, #3
 80008a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_TIM3_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM3_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM3_Init+0x94>)
 80008b6:	f003 fd91 	bl	80043dc <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008c0:	f000 f95c 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM3_Init+0x94>)
 80008d2:	f004 f813 	bl	80048fc <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f94e 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008e0:	2320      	movs	r3, #32
 80008e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM3_Init+0x94>)
 80008ee:	f004 fa93 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f940 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200001d8 	.word	0x200001d8
 8000908:	40000400 	.word	0x40000400

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_DMA_Init+0x50>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <MX_DMA_Init+0x50>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6493      	str	r3, [r2, #72]	; 0x48
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_DMA_Init+0x50>)
 8000920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_DMA_Init+0x50>)
 800092c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <MX_DMA_Init+0x50>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6493      	str	r3, [r2, #72]	; 0x48
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_DMA_Init+0x50>)
 8000938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	200b      	movs	r0, #11
 8000948:	f002 f8b3 	bl	8002ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800094c:	200b      	movs	r0, #11
 800094e:	f002 f8ca 	bl	8002ae6 <HAL_NVIC_EnableIRQ>

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <MX_GPIO_Init+0xd4>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_GPIO_Init+0xd4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f002 fc91 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <MX_GPIO_Init+0xd8>)
 80009fa:	f002 fb01 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fe:	2320      	movs	r3, #32
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f002 faf2 	bl	8003000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2028      	movs	r0, #40	; 0x28
 8000a22:	f002 f846 	bl	8002ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a26:	2028      	movs	r0, #40	; 0x28
 8000a28:	f002 f85d 	bl	8002ae6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800

08000a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d104      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		CountOver++;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a54:	6013      	str	r3, [r2, #0]
	}
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000018c 	.word	0x2000018c
 8000a68:	20000230 	.word	0x20000230

08000a6c <Micros>:

void Micros()
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
	timestamp = (CountOver * Counter_TIM2) + __HAL_TIM_GET_COUNTER(&htim2);
 8000a70:	490a      	ldr	r1, [pc, #40]	; (8000a9c <Micros+0x30>)
 8000a72:	6809      	ldr	r1, [r1, #0]
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <Micros+0x34>)
 8000a76:	6800      	ldr	r0, [r0, #0]
 8000a78:	fb01 f000 	mul.w	r0, r1, r0
 8000a7c:	4909      	ldr	r1, [pc, #36]	; (8000aa4 <Micros+0x38>)
 8000a7e:	6809      	ldr	r1, [r1, #0]
 8000a80:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000a82:	4401      	add	r1, r0
 8000a84:	2000      	movs	r0, #0
 8000a86:	460a      	mov	r2, r1
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <Micros+0x3c>)
 8000a8c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000230 	.word	0x20000230
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	2000018c 	.word	0x2000018c
 8000aa8:	20000228 	.word	0x20000228

08000aac <ADC_Averaged>:

void ADC_Averaged()
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
	ADC_SumAPot[0] = 0;
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <ADC_Averaged+0xc0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	801a      	strh	r2, [r3, #0]
	ADC_SumAPot[1] = 0;
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <ADC_Averaged+0xc0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	805a      	strh	r2, [r3, #2]
	ADC_SumAPot[2] = 0;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <ADC_Averaged+0xc0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	809a      	strh	r2, [r3, #4]

	for (int i = 0; i < 100; i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	e02b      	b.n	8000b22 <ADC_Averaged+0x76>
	{
		ADC_SumAPot[0] = ADC_SumAPot[0] + (ADCBuffer[3*i]);
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <ADC_Averaged+0xc0>)
 8000acc:	8819      	ldrh	r1, [r3, #0]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <ADC_Averaged+0xc4>)
 8000ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000adc:	440b      	add	r3, r1
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <ADC_Averaged+0xc0>)
 8000ae2:	801a      	strh	r2, [r3, #0]
		ADC_SumAPot[1] = ADC_SumAPot[1] + (ADCBuffer[1+(3*i)]);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <ADC_Averaged+0xc0>)
 8000ae6:	8859      	ldrh	r1, [r3, #2]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <ADC_Averaged+0xc4>)
 8000af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000af8:	440b      	add	r3, r1
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <ADC_Averaged+0xc0>)
 8000afe:	805a      	strh	r2, [r3, #2]
		ADC_SumAPot[2] = ADC_SumAPot[2] + (ADCBuffer[2+(3*i)]);
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <ADC_Averaged+0xc0>)
 8000b02:	8899      	ldrh	r1, [r3, #4]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <ADC_Averaged+0xc4>)
 8000b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b14:	440b      	add	r3, r1
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <ADC_Averaged+0xc0>)
 8000b1a:	809a      	strh	r2, [r3, #4]
	for (int i = 0; i < 100; i++)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b63      	cmp	r3, #99	; 0x63
 8000b26:	ddd0      	ble.n	8000aca <ADC_Averaged+0x1e>
	}

	ADC_Average[0] = ADC_SumAPot[0]/100;
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <ADC_Averaged+0xc0>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <ADC_Averaged+0xc8>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <ADC_Averaged+0xcc>)
 8000b38:	801a      	strh	r2, [r3, #0]
	ADC_Average[1] = ADC_SumAPot[1]/100;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <ADC_Averaged+0xc0>)
 8000b3c:	885b      	ldrh	r3, [r3, #2]
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <ADC_Averaged+0xc8>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	095b      	lsrs	r3, r3, #5
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <ADC_Averaged+0xcc>)
 8000b4a:	805a      	strh	r2, [r3, #2]
	ADC_Average[2] = ADC_SumAPot[2]/100;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <ADC_Averaged+0xc0>)
 8000b4e:	889b      	ldrh	r3, [r3, #4]
 8000b50:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <ADC_Averaged+0xc8>)
 8000b52:	fba2 2303 	umull	r2, r3, r2, r3
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <ADC_Averaged+0xcc>)
 8000b5c:	809a      	strh	r2, [r3, #4]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000494 	.word	0x20000494
 8000b70:	20000234 	.word	0x20000234
 8000b74:	51eb851f 	.word	0x51eb851f
 8000b78:	2000048c 	.word	0x2000048c

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bbe:	f002 fc81 	bl	80034c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0a0      	sub	sp, #128	; 0x80
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	2254      	movs	r2, #84	; 0x54
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f005 f85b 	bl	8005cac <memset>
  if(hadc->Instance==ADC1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bfe:	d177      	bne.n	8000cf0 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f995 	bl	8003f40 <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c1c:	f7ff ffae 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	4a34      	ldr	r2, [pc, #208]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	4a2e      	ldr	r2, [pc, #184]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_ADC_MspInit+0x128>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f002 f9bf 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c82:	2301      	movs	r3, #1
 8000c84:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c86:	2303      	movs	r3, #3
 8000c88:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c92:	4619      	mov	r1, r3
 8000c94:	4819      	ldr	r0, [pc, #100]	; (8000cfc <HAL_ADC_MspInit+0x12c>)
 8000c96:	f002 f9b3 	bl	8003000 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_ADC_MspInit+0x134>)
 8000c9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000ca2:	2205      	movs	r2, #5
 8000ca4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000cca:	2220      	movs	r2, #32
 8000ccc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cd4:	480a      	ldr	r0, [pc, #40]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000cd6:	f001 ff21 	bl	8002b1c <HAL_DMA_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000ce0:	f7ff ff4c 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000ce8:	655a      	str	r2, [r3, #84]	; 0x54
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_ADC_MspInit+0x130>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3780      	adds	r7, #128	; 0x80
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	20000098 	.word	0x20000098
 8000d04:	40020008 	.word	0x40020008

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b09e      	sub	sp, #120	; 0x78
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	2254      	movs	r2, #84	; 0x54
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 ffbf 	bl	8005cac <memset>
  if(huart->Instance==LPUART1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <HAL_UART_MspInit+0xa8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d136      	bne.n	8000da6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d38:	2320      	movs	r3, #32
 8000d3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 f8fb 	bl	8003f40 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d50:	f7ff ff14 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0xac>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d84:	230c      	movs	r3, #12
 8000d86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d94:	230c      	movs	r3, #12
 8000d96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f002 f92d 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3778      	adds	r7, #120	; 0x78
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40008000 	.word	0x40008000
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc8:	d114      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201c      	movs	r0, #28
 8000de8:	f001 fe63 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dec:	201c      	movs	r0, #28
 8000dee:	f001 fe7a 	bl	8002ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000df2:	e010      	b.n	8000e16 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_TIM_Base_MspInit+0x6c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10b      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_TIM_Base_MspInit+0x68>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40000400 	.word	0x40000400

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 f8ac 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA1_Channel1_IRQHandler+0x10>)
 8000e82:	f001 ff6e 	bl	8002d62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000098 	.word	0x20000098

08000e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM2_IRQHandler+0x10>)
 8000e96:	f003 fbe1 	bl	800465c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000018c 	.word	0x2000018c

08000ea4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ea8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eac:	f002 fa42 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000edc:	f7ff ffea 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	; (8000f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <LoopForever+0xe>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <LoopForever+0x16>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f06:	f004 fed9 	bl	8005cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0a:	f7ff fb03 	bl	8000514 <main>

08000f0e <LoopForever>:

LoopForever:
    b LoopForever
 8000f0e:	e7fe      	b.n	8000f0e <LoopForever>
  ldr   r0, =_estack
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f1c:	08005d6c 	.word	0x08005d6c
  ldr r2, =_sbss
 8000f20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f24:	200004a0 	.word	0x200004a0

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>

08000f2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f001 fdb1 	bl	8002a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f80e 	bl	8000f5c <HAL_InitTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	e001      	b.n	8000f50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f4c:	f7ff fe1c 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f50:	79fb      	ldrb	r3, [r7, #7]

}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_InitTick+0x68>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d022      	beq.n	8000fb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_InitTick+0x6c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_InitTick+0x68>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fdbc 	bl	8002b02 <HAL_SYSTICK_Config>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10f      	bne.n	8000fb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	d809      	bhi.n	8000faa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	2200      	movs	r2, #0
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9e:	f001 fd88 	bl	8002ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_InitTick+0x70>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e007      	b.n	8000fba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e004      	b.n	8000fba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e001      	b.n	8000fba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x1c>)
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	2000049c 	.word	0x2000049c
 8000ff0:	2000000c 	.word	0x2000000c

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000049c 	.word	0x2000049c

0800100c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	609a      	str	r2, [r3, #8]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3360      	adds	r3, #96	; 0x60
 8001086:	461a      	mov	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <LL_ADC_SetOffset+0x44>)
 8001096:	4013      	ands	r3, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	4313      	orrs	r3, r2
 80010a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	03fff000 	.word	0x03fff000

080010bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3360      	adds	r3, #96	; 0x60
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3360      	adds	r3, #96	; 0x60
 80010f8:	461a      	mov	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800111e:	b480      	push	{r7}
 8001120:	b087      	sub	sp, #28
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3360      	adds	r3, #96	; 0x60
 800112e:	461a      	mov	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	431a      	orrs	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001148:	bf00      	nop
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3360      	adds	r3, #96	; 0x60
 8001164:	461a      	mov	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	431a      	orrs	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	615a      	str	r2, [r3, #20]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b087      	sub	sp, #28
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3330      	adds	r3, #48	; 0x30
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	211f      	movs	r1, #31
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	401a      	ands	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	0e9b      	lsrs	r3, r3, #26
 800120e:	f003 011f 	and.w	r1, r3, #31
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800122e:	b480      	push	{r7}
 8001230:	b087      	sub	sp, #28
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3314      	adds	r3, #20
 800123e:	461a      	mov	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	0e5b      	lsrs	r3, r3, #25
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	0d1b      	lsrs	r3, r3, #20
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	2107      	movs	r1, #7
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	401a      	ands	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	0d1b      	lsrs	r3, r3, #20
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	431a      	orrs	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001278:	bf00      	nop
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800129c:	43db      	mvns	r3, r3
 800129e:	401a      	ands	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0318 	and.w	r3, r3, #24
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012a8:	40d9      	lsrs	r1, r3
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	400b      	ands	r3, r1
 80012ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b2:	431a      	orrs	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	0007ffff 	.word	0x0007ffff

080012cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 031f 	and.w	r3, r3, #31
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6093      	str	r3, [r2, #8]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800131c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001320:	d101      	bne.n	8001326 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001348:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001370:	d101      	bne.n	8001376 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c0:	f043 0202 	orr.w	r2, r3, #2
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <LL_ADC_IsEnabled+0x18>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <LL_ADC_IsEnabled+0x1a>
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b02      	cmp	r3, #2
 800140c:	d101      	bne.n	8001412 <LL_ADC_IsDisableOngoing+0x18>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <LL_ADC_IsDisableOngoing+0x1a>
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001434:	f043 0204 	orr.w	r2, r3, #4
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b04      	cmp	r3, #4
 800145a:	d101      	bne.n	8001460 <LL_ADC_REG_IsConversionOngoing+0x18>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b08      	cmp	r3, #8
 8001480:	d101      	bne.n	8001486 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1a9      	b.n	8001802 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fb87 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff19 	bl	800130c <LL_ADC_IsDeepPowerDownEnabled>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff feff 	bl	80012e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff34 	bl	800135c <LL_ADC_IsInternalRegulatorEnabled>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d115      	bne.n	8001526 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff18 	bl	8001334 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001504:	4b9c      	ldr	r3, [pc, #624]	; (8001778 <HAL_ADC_Init+0x2e4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	099b      	lsrs	r3, r3, #6
 800150a:	4a9c      	ldr	r2, [pc, #624]	; (800177c <HAL_ADC_Init+0x2e8>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	3301      	adds	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001518:	e002      	b.n	8001520 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3b01      	subs	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f9      	bne.n	800151a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff16 	bl	800135c <LL_ADC_IsInternalRegulatorEnabled>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10d      	bne.n	8001552 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	f043 0210 	orr.w	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff76 	bl	8001448 <LL_ADC_REG_IsConversionOngoing>
 800155c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8142 	bne.w	80017f0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 813e 	bne.w	80017f0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800157c:	f043 0202 	orr.w	r2, r3, #2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff23 	bl	80013d4 <LL_ADC_IsEnabled>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d141      	bne.n	8001618 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800159c:	d004      	beq.n	80015a8 <HAL_ADC_Init+0x114>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a77      	ldr	r2, [pc, #476]	; (8001780 <HAL_ADC_Init+0x2ec>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d10f      	bne.n	80015c8 <HAL_ADC_Init+0x134>
 80015a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015ac:	f7ff ff12 	bl	80013d4 <LL_ADC_IsEnabled>
 80015b0:	4604      	mov	r4, r0
 80015b2:	4873      	ldr	r0, [pc, #460]	; (8001780 <HAL_ADC_Init+0x2ec>)
 80015b4:	f7ff ff0e 	bl	80013d4 <LL_ADC_IsEnabled>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4323      	orrs	r3, r4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	e012      	b.n	80015ee <HAL_ADC_Init+0x15a>
 80015c8:	486e      	ldr	r0, [pc, #440]	; (8001784 <HAL_ADC_Init+0x2f0>)
 80015ca:	f7ff ff03 	bl	80013d4 <LL_ADC_IsEnabled>
 80015ce:	4604      	mov	r4, r0
 80015d0:	486d      	ldr	r0, [pc, #436]	; (8001788 <HAL_ADC_Init+0x2f4>)
 80015d2:	f7ff feff 	bl	80013d4 <LL_ADC_IsEnabled>
 80015d6:	4603      	mov	r3, r0
 80015d8:	431c      	orrs	r4, r3
 80015da:	486c      	ldr	r0, [pc, #432]	; (800178c <HAL_ADC_Init+0x2f8>)
 80015dc:	f7ff fefa 	bl	80013d4 <LL_ADC_IsEnabled>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4323      	orrs	r3, r4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d012      	beq.n	8001618 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015fa:	d004      	beq.n	8001606 <HAL_ADC_Init+0x172>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a5f      	ldr	r2, [pc, #380]	; (8001780 <HAL_ADC_Init+0x2ec>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_ADC_Init+0x176>
 8001606:	4a62      	ldr	r2, [pc, #392]	; (8001790 <HAL_ADC_Init+0x2fc>)
 8001608:	e000      	b.n	800160c <HAL_ADC_Init+0x178>
 800160a:	4a62      	ldr	r2, [pc, #392]	; (8001794 <HAL_ADC_Init+0x300>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fcfa 	bl	800100c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7f5b      	ldrb	r3, [r3, #29]
 800161c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001622:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001628:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800162e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001636:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001642:	2b01      	cmp	r3, #1
 8001644:	d106      	bne.n	8001654 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	3b01      	subs	r3, #1
 800164c:	045b      	lsls	r3, r3, #17
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d009      	beq.n	8001670 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	4b48      	ldr	r3, [pc, #288]	; (8001798 <HAL_ADC_Init+0x304>)
 8001678:	4013      	ands	r3, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	430b      	orrs	r3, r1
 8001682:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fee5 	bl	800146e <LL_ADC_INJ_IsConversionOngoing>
 80016a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d17f      	bne.n	80017ac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d17c      	bne.n	80017ac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ce:	f023 0302 	bic.w	r3, r3, #2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	430b      	orrs	r3, r1
 80016da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d017      	beq.n	8001714 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6911      	ldr	r1, [r2, #16]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	430b      	orrs	r3, r1
 800170e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001712:	e013      	b.n	800173c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001722:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001738:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001742:	2b01      	cmp	r3, #1
 8001744:	d12a      	bne.n	800179c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800175c:	4311      	orrs	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001768:	430a      	orrs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	e019      	b.n	80017ac <HAL_ADC_Init+0x318>
 8001778:	20000004 	.word	0x20000004
 800177c:	053e2d63 	.word	0x053e2d63
 8001780:	50000100 	.word	0x50000100
 8001784:	50000400 	.word	0x50000400
 8001788:	50000500 	.word	0x50000500
 800178c:	50000600 	.word	0x50000600
 8001790:	50000300 	.word	0x50000300
 8001794:	50000700 	.word	0x50000700
 8001798:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d10c      	bne.n	80017ce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f023 010f 	bic.w	r1, r3, #15
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
 80017cc:	e007      	b.n	80017de <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 020f 	bic.w	r2, r2, #15
 80017dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e2:	f023 0303 	bic.w	r3, r3, #3
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ee:	e007      	b.n	8001800 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	f043 0210 	orr.w	r2, r3, #16
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001800:	7ffb      	ldrb	r3, [r7, #31]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop

0800180c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001820:	d004      	beq.n	800182c <HAL_ADC_Start_DMA+0x20>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <HAL_ADC_Start_DMA+0x184>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_ADC_Start_DMA+0x24>
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_ADC_Start_DMA+0x188>)
 800182e:	e000      	b.n	8001832 <HAL_ADC_Start_DMA+0x26>
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_ADC_Start_DMA+0x18c>)
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fd4a 	bl	80012cc <LL_ADC_GetMultimode>
 8001838:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fe02 	bl	8001448 <LL_ADC_REG_IsConversionOngoing>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 809b 	bne.w	8001982 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_ADC_Start_DMA+0x4e>
 8001856:	2302      	movs	r3, #2
 8001858:	e096      	b.n	8001988 <HAL_ADC_Start_DMA+0x17c>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a4d      	ldr	r2, [pc, #308]	; (800199c <HAL_ADC_Start_DMA+0x190>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d008      	beq.n	800187e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d002      	beq.n	800187e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b09      	cmp	r3, #9
 800187c:	d17a      	bne.n	8001974 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fcf6 	bl	8002270 <ADC_Enable>
 8001884:	4603      	mov	r3, r0
 8001886:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d16d      	bne.n	800196a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <HAL_ADC_Start_DMA+0x184>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d009      	beq.n	80018c0 <HAL_ADC_Start_DMA+0xb4>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <HAL_ADC_Start_DMA+0x194>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d002      	beq.n	80018bc <HAL_ADC_Start_DMA+0xb0>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	e003      	b.n	80018c4 <HAL_ADC_Start_DMA+0xb8>
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_ADC_Start_DMA+0x198>)
 80018be:	e001      	b.n	80018c4 <HAL_ADC_Start_DMA+0xb8>
 80018c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d002      	beq.n	80018d2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	f023 0206 	bic.w	r2, r3, #6
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	661a      	str	r2, [r3, #96]	; 0x60
 80018f6:	e002      	b.n	80018fe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <HAL_ADC_Start_DMA+0x19c>)
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	4a28      	ldr	r2, [pc, #160]	; (80019ac <HAL_ADC_Start_DMA+0x1a0>)
 800190c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <HAL_ADC_Start_DMA+0x1a4>)
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	221c      	movs	r2, #28
 800191c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0210 	orr.w	r2, r2, #16
 8001934:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3340      	adds	r3, #64	; 0x40
 8001950:	4619      	mov	r1, r3
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f001 f989 	bl	8002c6c <HAL_DMA_Start_IT>
 800195a:	4603      	mov	r3, r0
 800195c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fd5c 	bl	8001420 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001968:	e00d      	b.n	8001986 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001972:	e008      	b.n	8001986 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001980:	e001      	b.n	8001986 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001982:	2302      	movs	r3, #2
 8001984:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	50000100 	.word	0x50000100
 8001994:	50000300 	.word	0x50000300
 8001998:	50000700 	.word	0x50000700
 800199c:	50000600 	.word	0x50000600
 80019a0:	50000500 	.word	0x50000500
 80019a4:	50000400 	.word	0x50000400
 80019a8:	0800245b 	.word	0x0800245b
 80019ac:	08002533 	.word	0x08002533
 80019b0:	0800254f 	.word	0x0800254f

080019b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0b6      	sub	sp, #216	; 0xd8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d102      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x24>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f000 bc13 	b.w	800223a <HAL_ADC_ConfigChannel+0x84a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fd11 	bl	8001448 <LL_ADC_REG_IsConversionOngoing>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 83f3 	bne.w	8002214 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f7ff fbcb 	bl	80011d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fcff 	bl	8001448 <LL_ADC_REG_IsConversionOngoing>
 8001a4a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fd0b 	bl	800146e <LL_ADC_INJ_IsConversionOngoing>
 8001a58:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f040 81d9 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 81d4 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a78:	d10f      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff fbd2 	bl	800122e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fb79 	bl	800118a <LL_ADC_SetSamplingTimeCommonConfig>
 8001a98:	e00e      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f7ff fbc1 	bl	800122e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fb69 	bl	800118a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	08db      	lsrs	r3, r3, #3
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d022      	beq.n	8001b20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6919      	ldr	r1, [r3, #16]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aea:	f7ff fac3 	bl	8001074 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6919      	ldr	r1, [r3, #16]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f7ff fb0f 	bl	800111e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d102      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x126>
 8001b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b14:	e000      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x128>
 8001b16:	2300      	movs	r3, #0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f7ff fb1b 	bl	8001154 <LL_ADC_SetOffsetSaturation>
 8001b1e:	e17b      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fac8 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x15c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fabd 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	f003 021f 	and.w	r2, r3, #31
 8001b4a:	e01e      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x19a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fab2 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	e004      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x1b2>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0e9b      	lsrs	r3, r3, #26
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	e018      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x1e4>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	e004      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d106      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fa81 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fa65 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10a      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x222>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fa5a 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	0e9b      	lsrs	r3, r3, #26
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	e01e      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x260>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2101      	movs	r1, #1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fa4f 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c40:	2320      	movs	r3, #32
 8001c42:	e004      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x278>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0e9b      	lsrs	r3, r3, #26
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	e018      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x2aa>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	e004      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d106      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fa1e 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fa02 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x2e8>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f9f7 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	0e9b      	lsrs	r3, r3, #26
 8001cd2:	f003 021f 	and.w	r2, r3, #31
 8001cd6:	e01e      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x326>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2102      	movs	r1, #2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f9ec 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d06:	2320      	movs	r3, #32
 8001d08:	e004      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x33e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0e9b      	lsrs	r3, r3, #26
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	e016      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x36c>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e004      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2102      	movs	r1, #2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f9bd 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2103      	movs	r1, #3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f9a1 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x3aa>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2103      	movs	r1, #3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f996 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	0e9b      	lsrs	r3, r3, #26
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	e017      	b.n	8001dca <HAL_ADC_ConfigChannel+0x3da>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2103      	movs	r1, #3
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f98b 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001db4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e003      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x3f2>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	e011      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x416>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	e003      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2103      	movs	r1, #3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f968 	bl	80010e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fad9 	bl	80013d4 <LL_ADC_IsEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 813d 	bne.w	80020a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f7ff fa24 	bl	8001284 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4aa2      	ldr	r2, [pc, #648]	; (80020cc <HAL_ADC_ConfigChannel+0x6dc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	f040 812e 	bne.w	80020a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x480>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	bf94      	ite	ls
 8001e68:	2301      	movls	r3, #1
 8001e6a:	2300      	movhi	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e019      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x4b4>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e80:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e003      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2b09      	cmp	r3, #9
 8001e9c:	bf94      	ite	ls
 8001e9e:	2301      	movls	r3, #1
 8001ea0:	2300      	movhi	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d079      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x4d4>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0e9b      	lsrs	r3, r3, #26
 8001eba:	3301      	adds	r3, #1
 8001ebc:	069b      	lsls	r3, r3, #26
 8001ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec2:	e015      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x500>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e003      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	069b      	lsls	r3, r3, #26
 8001eec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x520>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	e017      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x550>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e003      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	ea42 0103 	orr.w	r1, r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x576>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e9b      	lsrs	r3, r3, #26
 8001f56:	3301      	adds	r3, #1
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	051b      	lsls	r3, r3, #20
 8001f64:	e018      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x5a8>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	e07e      	b.n	800209a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x5c8>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	3301      	adds	r3, #1
 8001fb0:	069b      	lsls	r3, r3, #26
 8001fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb6:	e015      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x5f4>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e003      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	069b      	lsls	r3, r3, #26
 8001fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d109      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x614>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	e017      	b.n	8002034 <HAL_ADC_ConfigChannel+0x644>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	61fb      	str	r3, [r7, #28]
  return result;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e003      	b.n	8002028 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	ea42 0103 	orr.w	r1, r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x670>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	3301      	adds	r3, #1
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	3b1e      	subs	r3, #30
 8002058:	051b      	lsls	r3, r3, #20
 800205a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205e:	e01b      	b.n	8002098 <HAL_ADC_ConfigChannel+0x6a8>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	613b      	str	r3, [r7, #16]
  return result;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e003      	b.n	8002084 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	3301      	adds	r3, #1
 8002086:	f003 021f 	and.w	r2, r3, #31
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	3b1e      	subs	r3, #30
 8002092:	051b      	lsls	r3, r3, #20
 8002094:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002098:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800209e:	4619      	mov	r1, r3
 80020a0:	f7ff f8c5 	bl	800122e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80be 	beq.w	800222e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_ConfigChannel+0x6d6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10a      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x6ec>
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80020c8:	e009      	b.n	80020de <HAL_ADC_ConfigChannel+0x6ee>
 80020ca:	bf00      	nop
 80020cc:	407f0000 	.word	0x407f0000
 80020d0:	80080000 	.word	0x80080000
 80020d4:	50000100 	.word	0x50000100
 80020d8:	50000300 	.word	0x50000300
 80020dc:	4b59      	ldr	r3, [pc, #356]	; (8002244 <HAL_ADC_ConfigChannel+0x854>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe ffba 	bl	8001058 <LL_ADC_GetCommonPathInternalCh>
 80020e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a56      	ldr	r2, [pc, #344]	; (8002248 <HAL_ADC_ConfigChannel+0x858>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_ADC_ConfigChannel+0x70c>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a55      	ldr	r2, [pc, #340]	; (800224c <HAL_ADC_ConfigChannel+0x85c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d13a      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d134      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002110:	d005      	beq.n	800211e <HAL_ADC_ConfigChannel+0x72e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_ADC_ConfigChannel+0x860>)
 8002118:	4293      	cmp	r3, r2
 800211a:	f040 8085 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002126:	d004      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x742>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a49      	ldr	r2, [pc, #292]	; (8002254 <HAL_ADC_ConfigChannel+0x864>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x746>
 8002132:	4a49      	ldr	r2, [pc, #292]	; (8002258 <HAL_ADC_ConfigChannel+0x868>)
 8002134:	e000      	b.n	8002138 <HAL_ADC_ConfigChannel+0x748>
 8002136:	4a43      	ldr	r2, [pc, #268]	; (8002244 <HAL_ADC_ConfigChannel+0x854>)
 8002138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800213c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f7fe ff75 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002148:	4b44      	ldr	r3, [pc, #272]	; (800225c <HAL_ADC_ConfigChannel+0x86c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	4a44      	ldr	r2, [pc, #272]	; (8002260 <HAL_ADC_ConfigChannel+0x870>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002162:	e002      	b.n	800216a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3b01      	subs	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f9      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002170:	e05a      	b.n	8002228 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a3b      	ldr	r2, [pc, #236]	; (8002264 <HAL_ADC_ConfigChannel+0x874>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d125      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800217c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d11f      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a31      	ldr	r2, [pc, #196]	; (8002254 <HAL_ADC_ConfigChannel+0x864>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d104      	bne.n	800219c <HAL_ADC_ConfigChannel+0x7ac>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a34      	ldr	r2, [pc, #208]	; (8002268 <HAL_ADC_ConfigChannel+0x878>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d047      	beq.n	800222c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x7c0>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <HAL_ADC_ConfigChannel+0x864>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x7c4>
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <HAL_ADC_ConfigChannel+0x868>)
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x7c6>
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <HAL_ADC_ConfigChannel+0x854>)
 80021b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f7fe ff36 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021c6:	e031      	b.n	800222c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_ADC_ConfigChannel+0x87c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d12d      	bne.n	800222e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d127      	bne.n	800222e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_ADC_ConfigChannel+0x864>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f0:	d004      	beq.n	80021fc <HAL_ADC_ConfigChannel+0x80c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_ADC_ConfigChannel+0x864>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x810>
 80021fc:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_ADC_ConfigChannel+0x868>)
 80021fe:	e000      	b.n	8002202 <HAL_ADC_ConfigChannel+0x812>
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_ADC_ConfigChannel+0x854>)
 8002202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7fe ff10 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
 8002212:	e00c      	b.n	800222e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002226:	e002      	b.n	800222e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002228:	bf00      	nop
 800222a:	e000      	b.n	800222e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800222c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002236:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800223a:	4618      	mov	r0, r3
 800223c:	37d8      	adds	r7, #216	; 0xd8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	50000700 	.word	0x50000700
 8002248:	c3210000 	.word	0xc3210000
 800224c:	90c00010 	.word	0x90c00010
 8002250:	50000600 	.word	0x50000600
 8002254:	50000100 	.word	0x50000100
 8002258:	50000300 	.word	0x50000300
 800225c:	20000004 	.word	0x20000004
 8002260:	053e2d63 	.word	0x053e2d63
 8002264:	c7520000 	.word	0xc7520000
 8002268:	50000500 	.word	0x50000500
 800226c:	cb840000 	.word	0xcb840000

08002270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f8a7 	bl	80013d4 <LL_ADC_IsEnabled>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d176      	bne.n	800237a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <ADC_Enable+0x114>)
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e062      	b.n	800237c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f862 	bl	8001384 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c8:	d004      	beq.n	80022d4 <ADC_Enable+0x64>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2e      	ldr	r2, [pc, #184]	; (8002388 <ADC_Enable+0x118>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <ADC_Enable+0x68>
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <ADC_Enable+0x11c>)
 80022d6:	e000      	b.n	80022da <ADC_Enable+0x6a>
 80022d8:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <ADC_Enable+0x120>)
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe febc 	bl	8001058 <LL_ADC_GetCommonPathInternalCh>
 80022e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80022e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d013      	beq.n	8002312 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022ea:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <ADC_Enable+0x124>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <ADC_Enable+0x128>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002304:	e002      	b.n	800230c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3b01      	subs	r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002312:	f7fe fe6f 	bl	8000ff4 <HAL_GetTick>
 8002316:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002318:	e028      	b.n	800236c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f858 	bl	80013d4 <LL_ADC_IsEnabled>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d104      	bne.n	8002334 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f828 	bl	8001384 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002334:	f7fe fe5e 	bl	8000ff4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d914      	bls.n	800236c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d00d      	beq.n	800236c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	f043 0210 	orr.w	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e007      	b.n	800237c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d1cf      	bne.n	800231a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	8000003f 	.word	0x8000003f
 8002388:	50000100 	.word	0x50000100
 800238c:	50000300 	.word	0x50000300
 8002390:	50000700 	.word	0x50000700
 8002394:	20000004 	.word	0x20000004
 8002398:	053e2d63 	.word	0x053e2d63

0800239c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff f826 	bl	80013fa <LL_ADC_IsDisableOngoing>
 80023ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff f80d 	bl	80013d4 <LL_ADC_IsEnabled>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d047      	beq.n	8002450 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d144      	bne.n	8002450 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030d 	and.w	r3, r3, #13
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10c      	bne.n	80023ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe ffe7 	bl	80013ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2203      	movs	r2, #3
 80023e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023e6:	f7fe fe05 	bl	8000ff4 <HAL_GetTick>
 80023ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023ec:	e029      	b.n	8002442 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e023      	b.n	8002452 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800240a:	f7fe fdf3 	bl	8000ff4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d914      	bls.n	8002442 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e007      	b.n	8002452 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1dc      	bne.n	800240a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002470:	2b00      	cmp	r3, #0
 8002472:	d14b      	bne.n	800250c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d021      	beq.n	80024d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fe8c 	bl	80011b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d032      	beq.n	8002504 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d12b      	bne.n	8002504 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d11f      	bne.n	8002504 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80024d0:	e018      	b.n	8002504 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7ff fa55 	bl	80019b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800250a:	e00e      	b.n	800252a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fa5f 	bl	80019dc <HAL_ADC_ErrorCallback>
}
 800251e:	e004      	b.n	800252a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff fa41 	bl	80019c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256c:	f043 0204 	orr.w	r2, r3, #4
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7ff fa31 	bl	80019dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <LL_ADC_IsEnabled>:
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <LL_ADC_IsEnabled+0x18>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_ADC_IsEnabled+0x1a>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_StartCalibration>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80025ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	609a      	str	r2, [r3, #8]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_ADC_IsCalibrationOnGoing>:
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ee:	d101      	bne.n	80025f4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_REG_IsConversionOngoing>:
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d101      	bne.n	800261a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_ADCEx_Calibration_Start+0x1c>
 8002640:	2302      	movs	r3, #2
 8002642:	e04d      	b.n	80026e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fea5 	bl	800239c <ADC_Disable>
 8002652:	4603      	mov	r3, r0
 8002654:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d136      	bne.n	80026ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002664:	f023 0302 	bic.w	r3, r3, #2
 8002668:	f043 0202 	orr.w	r2, r3, #2
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff96 	bl	80025a8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800267c:	e014      	b.n	80026a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d90d      	bls.n	80026a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	f023 0312 	bic.w	r3, r3, #18
 8002694:	f043 0210 	orr.w	r2, r3, #16
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e01b      	b.n	80026e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff94 	bl	80025da <LL_ADC_IsCalibrationOnGoing>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e2      	bne.n	800267e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	f023 0303 	bic.w	r3, r3, #3
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80026c8:	e005      	b.n	80026d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	0004de01 	.word	0x0004de01

080026ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b0a1      	sub	sp, #132	; 0x84
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002706:	2302      	movs	r3, #2
 8002708:	e0e7      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002712:	2300      	movs	r3, #0
 8002714:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002716:	2300      	movs	r3, #0
 8002718:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002722:	d102      	bne.n	800272a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	e009      	b.n	800273e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d102      	bne.n	800273a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002734:	4b6d      	ldr	r3, [pc, #436]	; (80028ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	e001      	b.n	800273e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0be      	b.n	80028da <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff4f 	bl	8002602 <LL_ADC_REG_IsConversionOngoing>
 8002764:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff49 	bl	8002602 <LL_ADC_REG_IsConversionOngoing>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 80a0 	bne.w	80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 809c 	bne.w	80028b8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002788:	d004      	beq.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a55      	ldr	r2, [pc, #340]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002794:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002796:	e000      	b.n	800279a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002798:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800279a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d04b      	beq.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027b6:	035b      	lsls	r3, r3, #13
 80027b8:	430b      	orrs	r3, r1
 80027ba:	431a      	orrs	r2, r3
 80027bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c8:	d004      	beq.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a45      	ldr	r2, [pc, #276]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d10f      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80027d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027d8:	f7ff fed3 	bl	8002582 <LL_ADC_IsEnabled>
 80027dc:	4604      	mov	r4, r0
 80027de:	4841      	ldr	r0, [pc, #260]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027e0:	f7ff fecf 	bl	8002582 <LL_ADC_IsEnabled>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4323      	orrs	r3, r4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e012      	b.n	800281a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80027f4:	483c      	ldr	r0, [pc, #240]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027f6:	f7ff fec4 	bl	8002582 <LL_ADC_IsEnabled>
 80027fa:	4604      	mov	r4, r0
 80027fc:	483b      	ldr	r0, [pc, #236]	; (80028ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80027fe:	f7ff fec0 	bl	8002582 <LL_ADC_IsEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	431c      	orrs	r4, r3
 8002806:	483c      	ldr	r0, [pc, #240]	; (80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002808:	f7ff febb 	bl	8002582 <LL_ADC_IsEnabled>
 800280c:	4603      	mov	r3, r0
 800280e:	4323      	orrs	r3, r4
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d056      	beq.n	80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002826:	f023 030f 	bic.w	r3, r3, #15
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	6811      	ldr	r1, [r2, #0]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	6892      	ldr	r2, [r2, #8]
 8002832:	430a      	orrs	r2, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002838:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800283a:	e047      	b.n	80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800283c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002846:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002850:	d004      	beq.n	800285c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d10f      	bne.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800285c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002860:	f7ff fe8f 	bl	8002582 <LL_ADC_IsEnabled>
 8002864:	4604      	mov	r4, r0
 8002866:	481f      	ldr	r0, [pc, #124]	; (80028e4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002868:	f7ff fe8b 	bl	8002582 <LL_ADC_IsEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	4323      	orrs	r3, r4
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e012      	b.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800287c:	481a      	ldr	r0, [pc, #104]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800287e:	f7ff fe80 	bl	8002582 <LL_ADC_IsEnabled>
 8002882:	4604      	mov	r4, r0
 8002884:	4819      	ldr	r0, [pc, #100]	; (80028ec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002886:	f7ff fe7c 	bl	8002582 <LL_ADC_IsEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	431c      	orrs	r4, r3
 800288e:	481a      	ldr	r0, [pc, #104]	; (80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002890:	f7ff fe77 	bl	8002582 <LL_ADC_IsEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	4323      	orrs	r3, r4
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028ae:	f023 030f 	bic.w	r3, r3, #15
 80028b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028b6:	e009      	b.n	80028cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028ca:	e000      	b.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3784      	adds	r7, #132	; 0x84
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	50000100 	.word	0x50000100
 80028e8:	50000400 	.word	0x50000400
 80028ec:	50000500 	.word	0x50000500
 80028f0:	50000300 	.word	0x50000300
 80028f4:	50000700 	.word	0x50000700
 80028f8:	50000600 	.word	0x50000600

080028fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db0b      	blt.n	800298a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <__NVIC_EnableIRQ+0x38>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100

0800299c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db0a      	blt.n	80029c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	490c      	ldr	r1, [pc, #48]	; (80029e8 <__NVIC_SetPriority+0x4c>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	440b      	add	r3, r1
 80029c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c4:	e00a      	b.n	80029dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4908      	ldr	r1, [pc, #32]	; (80029ec <__NVIC_SetPriority+0x50>)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	3b04      	subs	r3, #4
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	440b      	add	r3, r1
 80029da:	761a      	strb	r2, [r3, #24]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f1c3 0307 	rsb	r3, r3, #7
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	bf28      	it	cs
 8002a0e:	2304      	movcs	r3, #4
 8002a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d902      	bls.n	8002a20 <NVIC_EncodePriority+0x30>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3b03      	subs	r3, #3
 8002a1e:	e000      	b.n	8002a22 <NVIC_EncodePriority+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	401a      	ands	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43d9      	mvns	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	4313      	orrs	r3, r2
         );
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a68:	d301      	bcc.n	8002a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00f      	b.n	8002a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <SysTick_Config+0x40>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a76:	210f      	movs	r1, #15
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7c:	f7ff ff8e 	bl	800299c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <SysTick_Config+0x40>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <SysTick_Config+0x40>)
 8002a88:	2207      	movs	r2, #7
 8002a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	e000e010 	.word	0xe000e010

08002a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff29 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac0:	f7ff ff40 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002ac4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	6978      	ldr	r0, [r7, #20]
 8002acc:	f7ff ff90 	bl	80029f0 <NVIC_EncodePriority>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff5f 	bl	800299c <__NVIC_SetPriority>
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff33 	bl	8002960 <__NVIC_EnableIRQ>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ffa4 	bl	8002a58 <SysTick_Config>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e08d      	b.n	8002c4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_DMA_Init+0x138>)
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d80f      	bhi.n	8002b5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <HAL_DMA_Init+0x13c>)
 8002b42:	4413      	add	r3, r2
 8002b44:	4a45      	ldr	r2, [pc, #276]	; (8002c5c <HAL_DMA_Init+0x140>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	009a      	lsls	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_DMA_Init+0x144>)
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
 8002b58:	e00e      	b.n	8002b78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_DMA_Init+0x148>)
 8002b62:	4413      	add	r3, r2
 8002b64:	4a3d      	ldr	r2, [pc, #244]	; (8002c5c <HAL_DMA_Init+0x140>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	009a      	lsls	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <HAL_DMA_Init+0x14c>)
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9b6 	bl	8002f3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd8:	d102      	bne.n	8002be0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bf4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <HAL_DMA_Init+0x104>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d80c      	bhi.n	8002c20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f9d6 	bl	8002fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	e008      	b.n	8002c32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40020407 	.word	0x40020407
 8002c58:	bffdfff8 	.word	0xbffdfff8
 8002c5c:	cccccccd 	.word	0xcccccccd
 8002c60:	40020000 	.word	0x40020000
 8002c64:	bffdfbf8 	.word	0xbffdfbf8
 8002c68:	40020400 	.word	0x40020400

08002c6c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_Start_IT+0x20>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e066      	b.n	8002d5a <HAL_DMA_Start_IT+0xee>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d155      	bne.n	8002d4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0201 	bic.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f8fb 	bl	8002ec0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 020e 	orr.w	r2, r2, #14
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e00f      	b.n	8002d04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 020a 	orr.w	r2, r2, #10
 8002d02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e005      	b.n	8002d58 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
 8002d56:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2204      	movs	r2, #4
 8002d84:	409a      	lsls	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d026      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x7a>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d021      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0204 	bic.w	r2, r2, #4
 8002db4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f003 021f 	and.w	r2, r3, #31
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d071      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002dda:	e06c      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2202      	movs	r2, #2
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02e      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d029      	beq.n	8002e4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 020a 	bic.w	r2, r2, #10
 8002e16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d038      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e4c:	e033      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	2208      	movs	r2, #8
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d02a      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d025      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 020e 	bic.w	r2, r2, #14
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002eb6:	bf00      	nop
 8002eb8:	bf00      	nop
}
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ed6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ee8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f003 021f 	and.w	r2, r3, #31
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d108      	bne.n	8002f20 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f1e:	e007      	b.n	8002f30 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	60da      	str	r2, [r3, #12]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d802      	bhi.n	8002f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e001      	b.n	8002f5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f58:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3b08      	subs	r3, #8
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002f86:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2201      	movs	r2, #1
 8002f90:	409a      	lsls	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40020407 	.word	0x40020407
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020820 	.word	0x40020820
 8002fb0:	cccccccd 	.word	0xcccccccd
 8002fb4:	40020880 	.word	0x40020880

08002fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002fda:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	1000823f 	.word	0x1000823f
 8002ffc:	40020940 	.word	0x40020940

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800300e:	e15a      	b.n	80032c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 814c 	beq.w	80032c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800303c:	2b02      	cmp	r3, #2
 800303e:	d130      	bne.n	80030a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003076:	2201      	movs	r2, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 0201 	and.w	r2, r3, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d017      	beq.n	80030de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d123      	bne.n	8003132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	08da      	lsrs	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3208      	adds	r2, #8
 80030f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	6939      	ldr	r1, [r7, #16]
 800312e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0203 	and.w	r2, r3, #3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80a6 	beq.w	80032c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003174:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_GPIO_Init+0x2e4>)
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	4a5a      	ldr	r2, [pc, #360]	; (80032e4 <HAL_GPIO_Init+0x2e4>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6613      	str	r3, [r2, #96]	; 0x60
 8003180:	4b58      	ldr	r3, [pc, #352]	; (80032e4 <HAL_GPIO_Init+0x2e4>)
 8003182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318c:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	3302      	adds	r3, #2
 8003194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031b6:	d01f      	beq.n	80031f8 <HAL_GPIO_Init+0x1f8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a4c      	ldr	r2, [pc, #304]	; (80032ec <HAL_GPIO_Init+0x2ec>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d019      	beq.n	80031f4 <HAL_GPIO_Init+0x1f4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_GPIO_Init+0x1f0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <HAL_GPIO_Init+0x2f4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00d      	beq.n	80031ec <HAL_GPIO_Init+0x1ec>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a49      	ldr	r2, [pc, #292]	; (80032f8 <HAL_GPIO_Init+0x2f8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <HAL_GPIO_Init+0x1e8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a48      	ldr	r2, [pc, #288]	; (80032fc <HAL_GPIO_Init+0x2fc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_GPIO_Init+0x1e4>
 80031e0:	2305      	movs	r3, #5
 80031e2:	e00a      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031e4:	2306      	movs	r3, #6
 80031e6:	e008      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031e8:	2304      	movs	r3, #4
 80031ea:	e006      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031ec:	2303      	movs	r3, #3
 80031ee:	e004      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e002      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031f8:	2300      	movs	r3, #0
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	f002 0203 	and.w	r2, r2, #3
 8003200:	0092      	lsls	r2, r2, #2
 8003202:	4093      	lsls	r3, r2
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320a:	4937      	ldr	r1, [pc, #220]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	089b      	lsrs	r3, r3, #2
 8003210:	3302      	adds	r3, #2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003218:	4b39      	ldr	r3, [pc, #228]	; (8003300 <HAL_GPIO_Init+0x300>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <HAL_GPIO_Init+0x300>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_GPIO_Init+0x300>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43db      	mvns	r3, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003266:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_GPIO_Init+0x300>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_GPIO_Init+0x300>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_GPIO_Init+0x300>)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <HAL_GPIO_Init+0x300>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	43db      	mvns	r3, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ba:	4a11      	ldr	r2, [pc, #68]	; (8003300 <HAL_GPIO_Init+0x300>)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3301      	adds	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f ae9d 	bne.w	8003010 <HAL_GPIO_Init+0x10>
  }
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40010000 	.word	0x40010000
 80032ec:	48000400 	.word	0x48000400
 80032f0:	48000800 	.word	0x48000800
 80032f4:	48000c00 	.word	0x48000c00
 80032f8:	48001000 	.word	0x48001000
 80032fc:	48001400 	.word	0x48001400
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
 8003310:	4613      	mov	r3, r2
 8003312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003314:	787b      	ldrb	r3, [r7, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003320:	e002      	b.n	8003328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334a:	4a05      	ldr	r2, [pc, #20]	; (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f806 	bl	8003364 <HAL_GPIO_EXTI_Callback>
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d141      	bne.n	800340e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800338a:	4b4b      	ldr	r3, [pc, #300]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003396:	d131      	bne.n	80033fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003398:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339e:	4a46      	ldr	r2, [pc, #280]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033a8:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b0:	4a41      	ldr	r2, [pc, #260]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033b8:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2232      	movs	r2, #50	; 0x32
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	4a3f      	ldr	r2, [pc, #252]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	0c9b      	lsrs	r3, r3, #18
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ce:	e002      	b.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d102      	bne.n	80033ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f2      	bne.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f6:	d158      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e057      	b.n	80034ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033fc:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003402:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800340c:	e04d      	b.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003414:	d141      	bne.n	800349a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d131      	bne.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342a:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800343c:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2232      	movs	r2, #50	; 0x32
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	0c9b      	lsrs	r3, r3, #18
 8003456:	3301      	adds	r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800345a:	e002      	b.n	8003462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3b01      	subs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346e:	d102      	bne.n	8003476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f2      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d112      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e011      	b.n	80034ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003498:	e007      	b.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a2:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40007000 	.word	0x40007000
 80034bc:	20000004 	.word	0x20000004
 80034c0:	431bde83 	.word	0x431bde83

080034c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d2:	6093      	str	r3, [r2, #8]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40007000 	.word	0x40007000

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e2fe      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d075      	beq.n	80035ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003502:	4b97      	ldr	r3, [pc, #604]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800350c:	4b94      	ldr	r3, [pc, #592]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d102      	bne.n	8003522 <HAL_RCC_OscConfig+0x3e>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d002      	beq.n	8003528 <HAL_RCC_OscConfig+0x44>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b8d      	ldr	r3, [pc, #564]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e2d9      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x74>
 800354a:	4b85      	ldr	r3, [pc, #532]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a84      	ldr	r2, [pc, #528]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b7f      	ldr	r3, [pc, #508]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7e      	ldr	r2, [pc, #504]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 800357c:	4b78      	ldr	r3, [pc, #480]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a77      	ldr	r2, [pc, #476]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b75      	ldr	r3, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a74      	ldr	r2, [pc, #464]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fd2a 	bl	8000ff4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fd fd26 	bl	8000ff4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e29e      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd fd16 	bl	8000ff4 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fd fd12 	bl	8000ff4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e28a      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035de:	4b60      	ldr	r3, [pc, #384]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d075      	beq.n	80036e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fa:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003604:	4b56      	ldr	r3, [pc, #344]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d102      	bne.n	800361a <HAL_RCC_OscConfig+0x136>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d002      	beq.n	8003620 <HAL_RCC_OscConfig+0x13c>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d11f      	bne.n	8003660 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003620:	4b4f      	ldr	r3, [pc, #316]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x154>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e25d      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b49      	ldr	r3, [pc, #292]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	4946      	ldr	r1, [pc, #280]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800364c:	4b45      	ldr	r3, [pc, #276]	; (8003764 <HAL_RCC_OscConfig+0x280>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fc83 	bl	8000f5c <HAL_InitTick>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d043      	beq.n	80036e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e249      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d023      	beq.n	80036b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3c      	ldr	r2, [pc, #240]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800366e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7fd fcbe 	bl	8000ff4 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367c:	f7fd fcba 	bl	8000ff4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e232      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368e:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	492d      	ldr	r1, [pc, #180]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
 80036ae:	e01a      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd fc9a 	bl	8000ff4 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fd fc96 	bl	8000ff4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e20e      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x1e0>
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d041      	beq.n	8003776 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01c      	beq.n	8003734 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fd fc73 	bl	8000ff4 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fd fc6f 	bl	8000ff4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1e7      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ef      	beq.n	8003712 <HAL_RCC_OscConfig+0x22e>
 8003732:	e020      	b.n	8003776 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_OscConfig+0x27c>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd fc56 	bl	8000ff4 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374a:	e00d      	b.n	8003768 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7fd fc52 	bl	8000ff4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d906      	bls.n	8003768 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1ca      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003768:	4b8c      	ldr	r3, [pc, #560]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ea      	bne.n	800374c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80a6 	beq.w	80038d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003788:	4b84      	ldr	r3, [pc, #528]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_OscConfig+0x2b4>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x2b6>
 8003798:	2300      	movs	r3, #0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	4b7f      	ldr	r3, [pc, #508]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a2:	4a7e      	ldr	r2, [pc, #504]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6593      	str	r3, [r2, #88]	; 0x58
 80037aa:	4b7c      	ldr	r3, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037b6:	2301      	movs	r3, #1
 80037b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ba:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d118      	bne.n	80037f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d2:	f7fd fc0f 	bl	8000ff4 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037da:	f7fd fc0b 	bl	8000ff4 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e183      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ec:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x4bc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d108      	bne.n	8003812 <HAL_RCC_OscConfig+0x32e>
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a65      	ldr	r2, [pc, #404]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003810:	e024      	b.n	800385c <HAL_RCC_OscConfig+0x378>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b05      	cmp	r3, #5
 8003818:	d110      	bne.n	800383c <HAL_RCC_OscConfig+0x358>
 800381a:	4b60      	ldr	r3, [pc, #384]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003820:	4a5e      	ldr	r2, [pc, #376]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	4a5a      	ldr	r2, [pc, #360]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383a:	e00f      	b.n	800385c <HAL_RCC_OscConfig+0x378>
 800383c:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	4a52      	ldr	r2, [pc, #328]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d016      	beq.n	8003892 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fd fbc6 	bl	8000ff4 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fd fbc2 	bl	8000ff4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e138      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003882:	4b46      	ldr	r3, [pc, #280]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ed      	beq.n	800386c <HAL_RCC_OscConfig+0x388>
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fd fbaf 	bl	8000ff4 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fd fbab 	bl	8000ff4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e121      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ed      	bne.n	800389a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c4:	4b35      	ldr	r3, [pc, #212]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	4a34      	ldr	r2, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d03c      	beq.n	8003956 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01c      	beq.n	800391e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ea:	4a2c      	ldr	r2, [pc, #176]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fd fb7e 	bl	8000ff4 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038fc:	f7fd fb7a 	bl	8000ff4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0f2      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ef      	beq.n	80038fc <HAL_RCC_OscConfig+0x418>
 800391c:	e01b      	b.n	8003956 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800391e:	4b1f      	ldr	r3, [pc, #124]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392e:	f7fd fb61 	bl	8000ff4 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003936:	f7fd fb5d 	bl	8000ff4 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0d5      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800394a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ef      	bne.n	8003936 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80c9 	beq.w	8003af2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b0c      	cmp	r3, #12
 800396a:	f000 8083 	beq.w	8003a74 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d15e      	bne.n	8003a34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_RCC_OscConfig+0x4b8>)
 800397c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fd fb37 	bl	8000ff4 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003988:	e00c      	b.n	80039a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7fd fb33 	bl	8000ff4 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d905      	bls.n	80039a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e0ab      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
 800399c:	40021000 	.word	0x40021000
 80039a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	4b55      	ldr	r3, [pc, #340]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ec      	bne.n	800398a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b0:	4b52      	ldr	r3, [pc, #328]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	4b52      	ldr	r3, [pc, #328]	; (8003b00 <HAL_RCC_OscConfig+0x61c>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6a11      	ldr	r1, [r2, #32]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039ca:	0212      	lsls	r2, r2, #8
 80039cc:	4311      	orrs	r1, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d2:	0852      	lsrs	r2, r2, #1
 80039d4:	3a01      	subs	r2, #1
 80039d6:	0552      	lsls	r2, r2, #21
 80039d8:	4311      	orrs	r1, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039de:	0852      	lsrs	r2, r2, #1
 80039e0:	3a01      	subs	r2, #1
 80039e2:	0652      	lsls	r2, r2, #25
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ea:	06d2      	lsls	r2, r2, #27
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4943      	ldr	r1, [pc, #268]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f4:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a40      	ldr	r2, [pc, #256]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 80039fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a00:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a3d      	ldr	r2, [pc, #244]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fd faf2 	bl	8000ff4 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fd faee 	bl	8000ff4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e066      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a26:	4b35      	ldr	r3, [pc, #212]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x530>
 8003a32:	e05e      	b.n	8003af2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a34:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a30      	ldr	r2, [pc, #192]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd fad8 	bl	8000ff4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fd fad4 	bl	8000ff4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e04c      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a5a:	4b28      	ldr	r3, [pc, #160]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a66:	4b25      	ldr	r3, [pc, #148]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	4924      	ldr	r1, [pc, #144]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <HAL_RCC_OscConfig+0x620>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	60cb      	str	r3, [r1, #12]
 8003a72:	e03e      	b.n	8003af2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e039      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a80:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <HAL_RCC_OscConfig+0x618>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0203 	and.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d12c      	bne.n	8003aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d123      	bne.n	8003aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d11b      	bne.n	8003aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d113      	bne.n	8003aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40021000 	.word	0x40021000
 8003b00:	019f800c 	.word	0x019f800c
 8003b04:	feeefffc 	.word	0xfeeefffc

08003b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e11e      	b.n	8003d5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b91      	ldr	r3, [pc, #580]	; (8003d68 <HAL_RCC_ClockConfig+0x260>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d910      	bls.n	8003b50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b8e      	ldr	r3, [pc, #568]	; (8003d68 <HAL_RCC_ClockConfig+0x260>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 020f 	bic.w	r2, r3, #15
 8003b36:	498c      	ldr	r1, [pc, #560]	; (8003d68 <HAL_RCC_ClockConfig+0x260>)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b8a      	ldr	r3, [pc, #552]	; (8003d68 <HAL_RCC_ClockConfig+0x260>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e106      	b.n	8003d5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d073      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d129      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b64:	4b81      	ldr	r3, [pc, #516]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0f4      	b.n	8003d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b74:	f000 f99e 	bl	8003eb4 <RCC_GetSysClockFreqFromPLLSource>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4a7c      	ldr	r2, [pc, #496]	; (8003d70 <HAL_RCC_ClockConfig+0x268>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d93f      	bls.n	8003c02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b82:	4b7a      	ldr	r3, [pc, #488]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d033      	beq.n	8003c02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d12f      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ba2:	4b72      	ldr	r3, [pc, #456]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003baa:	4a70      	ldr	r2, [pc, #448]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e024      	b.n	8003c02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc0:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0c6      	b.n	8003d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd0:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0be      	b.n	8003d5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003be0:	f000 f8ce 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4a61      	ldr	r2, [pc, #388]	; (8003d70 <HAL_RCC_ClockConfig+0x268>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d909      	bls.n	8003c02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bee:	4b5f      	ldr	r3, [pc, #380]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf6:	4a5d      	ldr	r2, [pc, #372]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c02:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4957      	ldr	r1, [pc, #348]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c14:	f7fd f9ee 	bl	8000ff4 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1c:	f7fd f9ea 	bl	8000ff4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e095      	b.n	8003d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4b4e      	ldr	r3, [pc, #312]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 020c 	and.w	r2, r3, #12
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d1eb      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d023      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c5c:	4b43      	ldr	r3, [pc, #268]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a42      	ldr	r2, [pc, #264]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c74:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c7c:	4a3b      	ldr	r2, [pc, #236]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c84:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4936      	ldr	r1, [pc, #216]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
 8003c96:	e008      	b.n	8003caa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	d105      	bne.n	8003caa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	4a32      	ldr	r2, [pc, #200]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ca8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_RCC_ClockConfig+0x260>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d21d      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_RCC_ClockConfig+0x260>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 020f 	bic.w	r2, r3, #15
 8003cc0:	4929      	ldr	r1, [pc, #164]	; (8003d68 <HAL_RCC_ClockConfig+0x260>)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cc8:	f7fd f994 	bl	8000ff4 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fd f990 	bl	8000ff4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e03b      	b.n	8003d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_ClockConfig+0x260>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1ed      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4917      	ldr	r1, [pc, #92]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1e:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	490f      	ldr	r1, [pc, #60]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d32:	f000 f825 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490c      	ldr	r1, [pc, #48]	; (8003d74 <HAL_RCC_ClockConfig+0x26c>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <HAL_RCC_ClockConfig+0x270>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_RCC_ClockConfig+0x274>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd f900 	bl	8000f5c <HAL_InitTick>
 8003d5c:	4603      	mov	r3, r0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	04c4b400 	.word	0x04c4b400
 8003d74:	08005d1c 	.word	0x08005d1c
 8003d78:	20000004 	.word	0x20000004
 8003d7c:	20000008 	.word	0x20000008

08003d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d86:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d102      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d92:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e047      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d98:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d102      	bne.n	8003daa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	e03e      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d136      	bne.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dd4:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dde:	68d2      	ldr	r2, [r2, #12]
 8003de0:	0a12      	lsrs	r2, r2, #8
 8003de2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	617b      	str	r3, [r7, #20]
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dee:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	0a12      	lsrs	r2, r2, #8
 8003dfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]
      break;
 8003e06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0e5b      	lsrs	r3, r3, #25
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	3301      	adds	r3, #1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	e001      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e28:	693b      	ldr	r3, [r7, #16]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	00f42400 	.word	0x00f42400
 8003e40:	016e3600 	.word	0x016e3600

08003e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000004 	.word	0x20000004

08003e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e60:	f7ff fff0 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4904      	ldr	r1, [pc, #16]	; (8003e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	08005d2c 	.word	0x08005d2c

08003e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e8c:	f7ff ffda 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0adb      	lsrs	r3, r3, #11
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4904      	ldr	r1, [pc, #16]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	08005d2c 	.word	0x08005d2c

08003eb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eba:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d10c      	bne.n	8003ef2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed8:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ee2:	68d2      	ldr	r2, [r2, #12]
 8003ee4:	0a12      	lsrs	r2, r2, #8
 8003ee6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	617b      	str	r3, [r7, #20]
    break;
 8003ef0:	e00c      	b.n	8003f0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ef2:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003efc:	68d2      	ldr	r2, [r2, #12]
 8003efe:	0a12      	lsrs	r2, r2, #8
 8003f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
    break;
 8003f0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	0e5b      	lsrs	r3, r3, #25
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f26:	687b      	ldr	r3, [r7, #4]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40021000 	.word	0x40021000
 8003f38:	016e3600 	.word	0x016e3600
 8003f3c:	00f42400 	.word	0x00f42400

08003f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f48:	2300      	movs	r3, #0
 8003f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8098 	beq.w	800408e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b40      	ldr	r3, [pc, #256]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	4a3f      	ldr	r2, [pc, #252]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6593      	str	r3, [r2, #88]	; 0x58
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8a:	4b3a      	ldr	r3, [pc, #232]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a39      	ldr	r2, [pc, #228]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f96:	f7fd f82d 	bl	8000ff4 <HAL_GetTick>
 8003f9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9c:	e009      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fd f829 	bl	8000ff4 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d902      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	74fb      	strb	r3, [r7, #19]
        break;
 8003fb0:	e005      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0ef      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d159      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01e      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d019      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fe0:	4b23      	ldr	r3, [pc, #140]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fec:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800400c:	4a18      	ldr	r2, [pc, #96]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fc ffe9 	bl	8000ff4 <HAL_GetTick>
 8004022:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004024:	e00b      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fc ffe5 	bl	8000ff4 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	; 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d902      	bls.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	74fb      	strb	r3, [r7, #19]
            break;
 800403c:	e006      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ec      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004068:	e008      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	74bb      	strb	r3, [r7, #18]
 800406e:	e005      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004070:	40021000 	.word	0x40021000
 8004074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800407c:	7c7b      	ldrb	r3, [r7, #17]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d105      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004082:	4ba7      	ldr	r3, [pc, #668]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	4aa6      	ldr	r2, [pc, #664]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800409a:	4ba1      	ldr	r3, [pc, #644]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	f023 0203 	bic.w	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	499d      	ldr	r1, [pc, #628]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040bc:	4b98      	ldr	r3, [pc, #608]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 020c 	bic.w	r2, r3, #12
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4995      	ldr	r1, [pc, #596]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040de:	4b90      	ldr	r3, [pc, #576]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	498c      	ldr	r1, [pc, #560]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004100:	4b87      	ldr	r3, [pc, #540]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	4984      	ldr	r1, [pc, #528]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004122:	4b7f      	ldr	r3, [pc, #508]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	497b      	ldr	r1, [pc, #492]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004144:	4b76      	ldr	r3, [pc, #472]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	4973      	ldr	r1, [pc, #460]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004166:	4b6e      	ldr	r3, [pc, #440]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	496a      	ldr	r1, [pc, #424]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004188:	4b65      	ldr	r3, [pc, #404]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4962      	ldr	r1, [pc, #392]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041aa:	4b5d      	ldr	r3, [pc, #372]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	4959      	ldr	r1, [pc, #356]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041cc:	4b54      	ldr	r3, [pc, #336]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	4951      	ldr	r1, [pc, #324]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ee:	4b4c      	ldr	r3, [pc, #304]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	4948      	ldr	r1, [pc, #288]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004210:	4b43      	ldr	r3, [pc, #268]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	4940      	ldr	r1, [pc, #256]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004230:	4b3b      	ldr	r3, [pc, #236]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a3a      	ldr	r2, [pc, #232]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	4932      	ldr	r1, [pc, #200]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004272:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004280:	4b27      	ldr	r3, [pc, #156]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	4924      	ldr	r1, [pc, #144]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a0:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d015      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	4916      	ldr	r1, [pc, #88]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d6:	d105      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d8:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a10      	ldr	r2, [pc, #64]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d019      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4908      	ldr	r1, [pc, #32]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800430e:	d109      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a02      	ldr	r2, [pc, #8]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431a:	60d3      	str	r3, [r2, #12]
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d015      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004330:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	4926      	ldr	r1, [pc, #152]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800434e:	d105      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d015      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004376:	4918      	ldr	r1, [pc, #96]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d105      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004392:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	490a      	ldr	r1, [pc, #40]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043be:	d105      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000

080043dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e049      	b.n	8004482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fc fcd8 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f000 fbac 	bl	8004b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d001      	beq.n	80044a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04c      	b.n	800453e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a26      	ldr	r2, [pc, #152]	; (800454c <HAL_TIM_Base_Start+0xc0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d022      	beq.n	80044fc <HAL_TIM_Base_Start+0x70>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d01d      	beq.n	80044fc <HAL_TIM_Base_Start+0x70>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a22      	ldr	r2, [pc, #136]	; (8004550 <HAL_TIM_Base_Start+0xc4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d018      	beq.n	80044fc <HAL_TIM_Base_Start+0x70>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a21      	ldr	r2, [pc, #132]	; (8004554 <HAL_TIM_Base_Start+0xc8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_TIM_Base_Start+0x70>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_TIM_Base_Start+0xcc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_TIM_Base_Start+0x70>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_TIM_Base_Start+0xd0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_TIM_Base_Start+0x70>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <HAL_TIM_Base_Start+0xd4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIM_Base_Start+0x70>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <HAL_TIM_Base_Start+0xd8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d115      	bne.n	8004528 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_TIM_Base_Start+0xdc>)
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d015      	beq.n	800453a <HAL_TIM_Base_Start+0xae>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d011      	beq.n	800453a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	e008      	b.n	800453a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e000      	b.n	800453c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40000c00 	.word	0x40000c00
 800455c:	40013400 	.word	0x40013400
 8004560:	40014000 	.word	0x40014000
 8004564:	40015000 	.word	0x40015000
 8004568:	00010007 	.word	0x00010007

0800456c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d001      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e054      	b.n	800462e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a26      	ldr	r2, [pc, #152]	; (800463c <HAL_TIM_Base_Start_IT+0xd0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d022      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x80>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d01d      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x80>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <HAL_TIM_Base_Start_IT+0xd4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x80>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a21      	ldr	r2, [pc, #132]	; (8004644 <HAL_TIM_Base_Start_IT+0xd8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x80>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <HAL_TIM_Base_Start_IT+0xdc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x80>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1e      	ldr	r2, [pc, #120]	; (800464c <HAL_TIM_Base_Start_IT+0xe0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x80>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <HAL_TIM_Base_Start_IT+0xe4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x80>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_TIM_Base_Start_IT+0xe8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d115      	bne.n	8004618 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_TIM_Base_Start_IT+0xec>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d015      	beq.n	800462a <HAL_TIM_Base_Start_IT+0xbe>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d011      	beq.n	800462a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	e008      	b.n	800462a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e000      	b.n	800462c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40012c00 	.word	0x40012c00
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40013400 	.word	0x40013400
 8004650:	40014000 	.word	0x40014000
 8004654:	40015000 	.word	0x40015000
 8004658:	00010007 	.word	0x00010007

0800465c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d020      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01b      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0202 	mvn.w	r2, #2
 8004690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa48 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa3a 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fa4b 	bl	8004b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d020      	beq.n	800470c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0204 	mvn.w	r2, #4
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa22 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa14 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fa25 	bl	8004b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d020      	beq.n	8004758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0208 	mvn.w	r2, #8
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9fc 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9ee 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f9ff 	bl	8004b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d020      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01b      	beq.n	80047a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0210 	mvn.w	r2, #16
 8004774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2208      	movs	r2, #8
 800477a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f9d6 	bl	8004b3c <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f9c8 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f9d9 	bl	8004b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00c      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0201 	mvn.w	r2, #1
 80047c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fc f93a 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80047ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fbb1 	bl	8004f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fba9 	bl	8004f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00c      	beq.n	800483e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f993 	bl	8004b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00c      	beq.n	8004862 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f06f 0220 	mvn.w	r2, #32
 800485a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fb71 	bl	8004f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00c      	beq.n	8004886 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800487e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fb7d 	bl	8004f80 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00c      	beq.n	80048aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80048a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fb75 	bl	8004f94 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00c      	beq.n	80048ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80048c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb6d 	bl	8004fa8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80048ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb65 	bl	8004fbc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_TIM_ConfigClockSource+0x1c>
 8004914:	2302      	movs	r3, #2
 8004916:	e0f6      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x20a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800493a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6f      	ldr	r2, [pc, #444]	; (8004b10 <HAL_TIM_ConfigClockSource+0x214>)
 8004952:	4293      	cmp	r3, r2
 8004954:	f000 80c1 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004958:	4a6d      	ldr	r2, [pc, #436]	; (8004b10 <HAL_TIM_ConfigClockSource+0x214>)
 800495a:	4293      	cmp	r3, r2
 800495c:	f200 80c6 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 8004960:	4a6c      	ldr	r2, [pc, #432]	; (8004b14 <HAL_TIM_ConfigClockSource+0x218>)
 8004962:	4293      	cmp	r3, r2
 8004964:	f000 80b9 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004968:	4a6a      	ldr	r2, [pc, #424]	; (8004b14 <HAL_TIM_ConfigClockSource+0x218>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f200 80be 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 8004970:	4a69      	ldr	r2, [pc, #420]	; (8004b18 <HAL_TIM_ConfigClockSource+0x21c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	f000 80b1 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004978:	4a67      	ldr	r2, [pc, #412]	; (8004b18 <HAL_TIM_ConfigClockSource+0x21c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	f200 80b6 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 8004980:	4a66      	ldr	r2, [pc, #408]	; (8004b1c <HAL_TIM_ConfigClockSource+0x220>)
 8004982:	4293      	cmp	r3, r2
 8004984:	f000 80a9 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004988:	4a64      	ldr	r2, [pc, #400]	; (8004b1c <HAL_TIM_ConfigClockSource+0x220>)
 800498a:	4293      	cmp	r3, r2
 800498c:	f200 80ae 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 8004990:	4a63      	ldr	r2, [pc, #396]	; (8004b20 <HAL_TIM_ConfigClockSource+0x224>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f000 80a1 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004998:	4a61      	ldr	r2, [pc, #388]	; (8004b20 <HAL_TIM_ConfigClockSource+0x224>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f200 80a6 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 80049a0:	4a60      	ldr	r2, [pc, #384]	; (8004b24 <HAL_TIM_ConfigClockSource+0x228>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f000 8099 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 80049a8:	4a5e      	ldr	r2, [pc, #376]	; (8004b24 <HAL_TIM_ConfigClockSource+0x228>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f200 809e 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 80049b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80049b4:	f000 8091 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 80049b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80049bc:	f200 8096 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 80049c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c4:	f000 8089 	beq.w	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 80049c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049cc:	f200 808e 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d4:	d03e      	beq.n	8004a54 <HAL_TIM_ConfigClockSource+0x158>
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049da:	f200 8087 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	f000 8086 	beq.w	8004af2 <HAL_TIM_ConfigClockSource+0x1f6>
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d87f      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 80049ec:	2b70      	cmp	r3, #112	; 0x70
 80049ee:	d01a      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x12a>
 80049f0:	2b70      	cmp	r3, #112	; 0x70
 80049f2:	d87b      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 80049f4:	2b60      	cmp	r3, #96	; 0x60
 80049f6:	d050      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0x19e>
 80049f8:	2b60      	cmp	r3, #96	; 0x60
 80049fa:	d877      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 80049fc:	2b50      	cmp	r3, #80	; 0x50
 80049fe:	d03c      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x17e>
 8004a00:	2b50      	cmp	r3, #80	; 0x50
 8004a02:	d873      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d058      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x1be>
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d86f      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 8004a0c:	2b30      	cmp	r3, #48	; 0x30
 8004a0e:	d064      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004a10:	2b30      	cmp	r3, #48	; 0x30
 8004a12:	d86b      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d060      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d867      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05c      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d05a      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x1de>
 8004a24:	e062      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a36:	f000 f9cf 	bl	8004dd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	609a      	str	r2, [r3, #8]
      break;
 8004a52:	e04f      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a64:	f000 f9b8 	bl	8004dd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a76:	609a      	str	r2, [r3, #8]
      break;
 8004a78:	e03c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a86:	461a      	mov	r2, r3
 8004a88:	f000 f92a 	bl	8004ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2150      	movs	r1, #80	; 0x50
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f983 	bl	8004d9e <TIM_ITRx_SetConfig>
      break;
 8004a98:	e02c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f000 f949 	bl	8004d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2160      	movs	r1, #96	; 0x60
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f973 	bl	8004d9e <TIM_ITRx_SetConfig>
      break;
 8004ab8:	e01c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f000 f90a 	bl	8004ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2140      	movs	r1, #64	; 0x40
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f963 	bl	8004d9e <TIM_ITRx_SetConfig>
      break;
 8004ad8:	e00c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f000 f95a 	bl	8004d9e <TIM_ITRx_SetConfig>
      break;
 8004aea:	e003      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      break;
 8004af0:	e000      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	00100070 	.word	0x00100070
 8004b14:	00100060 	.word	0x00100060
 8004b18:	00100050 	.word	0x00100050
 8004b1c:	00100040 	.word	0x00100040
 8004b20:	00100030 	.word	0x00100030
 8004b24:	00100020 	.word	0x00100020

08004b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a4c      	ldr	r2, [pc, #304]	; (8004cbc <TIM_Base_SetConfig+0x144>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d017      	beq.n	8004bc0 <TIM_Base_SetConfig+0x48>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d013      	beq.n	8004bc0 <TIM_Base_SetConfig+0x48>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a49      	ldr	r2, [pc, #292]	; (8004cc0 <TIM_Base_SetConfig+0x148>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_Base_SetConfig+0x48>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a48      	ldr	r2, [pc, #288]	; (8004cc4 <TIM_Base_SetConfig+0x14c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0x48>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a47      	ldr	r2, [pc, #284]	; (8004cc8 <TIM_Base_SetConfig+0x150>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0x48>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a46      	ldr	r2, [pc, #280]	; (8004ccc <TIM_Base_SetConfig+0x154>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0x48>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a45      	ldr	r2, [pc, #276]	; (8004cd0 <TIM_Base_SetConfig+0x158>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a39      	ldr	r2, [pc, #228]	; (8004cbc <TIM_Base_SetConfig+0x144>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d023      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be0:	d01f      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a36      	ldr	r2, [pc, #216]	; (8004cc0 <TIM_Base_SetConfig+0x148>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01b      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a35      	ldr	r2, [pc, #212]	; (8004cc4 <TIM_Base_SetConfig+0x14c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d017      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a34      	ldr	r2, [pc, #208]	; (8004cc8 <TIM_Base_SetConfig+0x150>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <TIM_Base_SetConfig+0x154>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00f      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a33      	ldr	r2, [pc, #204]	; (8004cd4 <TIM_Base_SetConfig+0x15c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a32      	ldr	r2, [pc, #200]	; (8004cd8 <TIM_Base_SetConfig+0x160>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a31      	ldr	r2, [pc, #196]	; (8004cdc <TIM_Base_SetConfig+0x164>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0xaa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <TIM_Base_SetConfig+0x158>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <TIM_Base_SetConfig+0x144>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <TIM_Base_SetConfig+0x110>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <TIM_Base_SetConfig+0x154>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_Base_SetConfig+0x110>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a1a      	ldr	r2, [pc, #104]	; (8004cd4 <TIM_Base_SetConfig+0x15c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x110>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a19      	ldr	r2, [pc, #100]	; (8004cd8 <TIM_Base_SetConfig+0x160>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x110>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <TIM_Base_SetConfig+0x164>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x110>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <TIM_Base_SetConfig+0x158>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d103      	bne.n	8004c90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	611a      	str	r2, [r3, #16]
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40015000 	.word	0x40015000
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800

08004ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f023 0201 	bic.w	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 030a 	bic.w	r3, r3, #10
 8004d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b087      	sub	sp, #28
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f023 0210 	bic.w	r2, r3, #16
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	031b      	lsls	r3, r3, #12
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f043 0307 	orr.w	r3, r3, #7
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e074      	b.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a34      	ldr	r2, [pc, #208]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a33      	ldr	r2, [pc, #204]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a31      	ldr	r2, [pc, #196]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a21      	ldr	r2, [pc, #132]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d022      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d01d      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d018      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10c      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	40013400 	.word	0x40013400
 8004f30:	40015000 	.word	0x40015000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40014000 	.word	0x40014000

08004f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e042      	b.n	8005068 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fb fe87 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2224      	movs	r2, #36	; 0x24
 8004ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fb24 	bl	8005668 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f825 	bl	8005070 <UART_SetConfig>
 8005026:	4603      	mov	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e01b      	b.n	8005068 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800503e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800504e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fba3 	bl	80057ac <UART_CheckIdleState>
 8005066:	4603      	mov	r3, r0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005074:	b08c      	sub	sp, #48	; 0x30
 8005076:	af00      	add	r7, sp, #0
 8005078:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	431a      	orrs	r2, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	431a      	orrs	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	4313      	orrs	r3, r2
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4baa      	ldr	r3, [pc, #680]	; (8005348 <UART_SetConfig+0x2d8>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a9f      	ldr	r2, [pc, #636]	; (800534c <UART_SetConfig+0x2dc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050d8:	4313      	orrs	r3, r2
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f0:	430b      	orrs	r3, r1
 80050f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	f023 010f 	bic.w	r1, r3, #15
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a90      	ldr	r2, [pc, #576]	; (8005350 <UART_SetConfig+0x2e0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d125      	bne.n	8005160 <UART_SetConfig+0xf0>
 8005114:	4b8f      	ldr	r3, [pc, #572]	; (8005354 <UART_SetConfig+0x2e4>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b03      	cmp	r3, #3
 8005120:	d81a      	bhi.n	8005158 <UART_SetConfig+0xe8>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0xb8>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	08005139 	.word	0x08005139
 800512c:	08005149 	.word	0x08005149
 8005130:	08005141 	.word	0x08005141
 8005134:	08005151 	.word	0x08005151
 8005138:	2301      	movs	r3, #1
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513e:	e116      	b.n	800536e <UART_SetConfig+0x2fe>
 8005140:	2302      	movs	r3, #2
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005146:	e112      	b.n	800536e <UART_SetConfig+0x2fe>
 8005148:	2304      	movs	r3, #4
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514e:	e10e      	b.n	800536e <UART_SetConfig+0x2fe>
 8005150:	2308      	movs	r3, #8
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005156:	e10a      	b.n	800536e <UART_SetConfig+0x2fe>
 8005158:	2310      	movs	r3, #16
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515e:	e106      	b.n	800536e <UART_SetConfig+0x2fe>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a7c      	ldr	r2, [pc, #496]	; (8005358 <UART_SetConfig+0x2e8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d138      	bne.n	80051dc <UART_SetConfig+0x16c>
 800516a:	4b7a      	ldr	r3, [pc, #488]	; (8005354 <UART_SetConfig+0x2e4>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d82d      	bhi.n	80051d4 <UART_SetConfig+0x164>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0x110>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051b5 	.word	0x080051b5
 8005184:	080051d5 	.word	0x080051d5
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051d5 	.word	0x080051d5
 8005190:	080051c5 	.word	0x080051c5
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051d5 	.word	0x080051d5
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051cd 	.word	0x080051cd
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ba:	e0d8      	b.n	800536e <UART_SetConfig+0x2fe>
 80051bc:	2302      	movs	r3, #2
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c2:	e0d4      	b.n	800536e <UART_SetConfig+0x2fe>
 80051c4:	2304      	movs	r3, #4
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ca:	e0d0      	b.n	800536e <UART_SetConfig+0x2fe>
 80051cc:	2308      	movs	r3, #8
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051d2:	e0cc      	b.n	800536e <UART_SetConfig+0x2fe>
 80051d4:	2310      	movs	r3, #16
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051da:	e0c8      	b.n	800536e <UART_SetConfig+0x2fe>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5e      	ldr	r2, [pc, #376]	; (800535c <UART_SetConfig+0x2ec>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d125      	bne.n	8005232 <UART_SetConfig+0x1c2>
 80051e6:	4b5b      	ldr	r3, [pc, #364]	; (8005354 <UART_SetConfig+0x2e4>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d016      	beq.n	8005222 <UART_SetConfig+0x1b2>
 80051f4:	2b30      	cmp	r3, #48	; 0x30
 80051f6:	d818      	bhi.n	800522a <UART_SetConfig+0x1ba>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d00a      	beq.n	8005212 <UART_SetConfig+0x1a2>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d814      	bhi.n	800522a <UART_SetConfig+0x1ba>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <UART_SetConfig+0x19a>
 8005204:	2b10      	cmp	r3, #16
 8005206:	d008      	beq.n	800521a <UART_SetConfig+0x1aa>
 8005208:	e00f      	b.n	800522a <UART_SetConfig+0x1ba>
 800520a:	2300      	movs	r3, #0
 800520c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005210:	e0ad      	b.n	800536e <UART_SetConfig+0x2fe>
 8005212:	2302      	movs	r3, #2
 8005214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005218:	e0a9      	b.n	800536e <UART_SetConfig+0x2fe>
 800521a:	2304      	movs	r3, #4
 800521c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005220:	e0a5      	b.n	800536e <UART_SetConfig+0x2fe>
 8005222:	2308      	movs	r3, #8
 8005224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005228:	e0a1      	b.n	800536e <UART_SetConfig+0x2fe>
 800522a:	2310      	movs	r3, #16
 800522c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005230:	e09d      	b.n	800536e <UART_SetConfig+0x2fe>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a4a      	ldr	r2, [pc, #296]	; (8005360 <UART_SetConfig+0x2f0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d125      	bne.n	8005288 <UART_SetConfig+0x218>
 800523c:	4b45      	ldr	r3, [pc, #276]	; (8005354 <UART_SetConfig+0x2e4>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005246:	2bc0      	cmp	r3, #192	; 0xc0
 8005248:	d016      	beq.n	8005278 <UART_SetConfig+0x208>
 800524a:	2bc0      	cmp	r3, #192	; 0xc0
 800524c:	d818      	bhi.n	8005280 <UART_SetConfig+0x210>
 800524e:	2b80      	cmp	r3, #128	; 0x80
 8005250:	d00a      	beq.n	8005268 <UART_SetConfig+0x1f8>
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d814      	bhi.n	8005280 <UART_SetConfig+0x210>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <UART_SetConfig+0x1f0>
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d008      	beq.n	8005270 <UART_SetConfig+0x200>
 800525e:	e00f      	b.n	8005280 <UART_SetConfig+0x210>
 8005260:	2300      	movs	r3, #0
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005266:	e082      	b.n	800536e <UART_SetConfig+0x2fe>
 8005268:	2302      	movs	r3, #2
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526e:	e07e      	b.n	800536e <UART_SetConfig+0x2fe>
 8005270:	2304      	movs	r3, #4
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005276:	e07a      	b.n	800536e <UART_SetConfig+0x2fe>
 8005278:	2308      	movs	r3, #8
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800527e:	e076      	b.n	800536e <UART_SetConfig+0x2fe>
 8005280:	2310      	movs	r3, #16
 8005282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005286:	e072      	b.n	800536e <UART_SetConfig+0x2fe>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a35      	ldr	r2, [pc, #212]	; (8005364 <UART_SetConfig+0x2f4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d12a      	bne.n	80052e8 <UART_SetConfig+0x278>
 8005292:	4b30      	ldr	r3, [pc, #192]	; (8005354 <UART_SetConfig+0x2e4>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a0:	d01a      	beq.n	80052d8 <UART_SetConfig+0x268>
 80052a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a6:	d81b      	bhi.n	80052e0 <UART_SetConfig+0x270>
 80052a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ac:	d00c      	beq.n	80052c8 <UART_SetConfig+0x258>
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b2:	d815      	bhi.n	80052e0 <UART_SetConfig+0x270>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <UART_SetConfig+0x250>
 80052b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052bc:	d008      	beq.n	80052d0 <UART_SetConfig+0x260>
 80052be:	e00f      	b.n	80052e0 <UART_SetConfig+0x270>
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e052      	b.n	800536e <UART_SetConfig+0x2fe>
 80052c8:	2302      	movs	r3, #2
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e04e      	b.n	800536e <UART_SetConfig+0x2fe>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d6:	e04a      	b.n	800536e <UART_SetConfig+0x2fe>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052de:	e046      	b.n	800536e <UART_SetConfig+0x2fe>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052e6:	e042      	b.n	800536e <UART_SetConfig+0x2fe>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a17      	ldr	r2, [pc, #92]	; (800534c <UART_SetConfig+0x2dc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d13a      	bne.n	8005368 <UART_SetConfig+0x2f8>
 80052f2:	4b18      	ldr	r3, [pc, #96]	; (8005354 <UART_SetConfig+0x2e4>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005300:	d01a      	beq.n	8005338 <UART_SetConfig+0x2c8>
 8005302:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005306:	d81b      	bhi.n	8005340 <UART_SetConfig+0x2d0>
 8005308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530c:	d00c      	beq.n	8005328 <UART_SetConfig+0x2b8>
 800530e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005312:	d815      	bhi.n	8005340 <UART_SetConfig+0x2d0>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <UART_SetConfig+0x2b0>
 8005318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531c:	d008      	beq.n	8005330 <UART_SetConfig+0x2c0>
 800531e:	e00f      	b.n	8005340 <UART_SetConfig+0x2d0>
 8005320:	2300      	movs	r3, #0
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005326:	e022      	b.n	800536e <UART_SetConfig+0x2fe>
 8005328:	2302      	movs	r3, #2
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532e:	e01e      	b.n	800536e <UART_SetConfig+0x2fe>
 8005330:	2304      	movs	r3, #4
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005336:	e01a      	b.n	800536e <UART_SetConfig+0x2fe>
 8005338:	2308      	movs	r3, #8
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800533e:	e016      	b.n	800536e <UART_SetConfig+0x2fe>
 8005340:	2310      	movs	r3, #16
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005346:	e012      	b.n	800536e <UART_SetConfig+0x2fe>
 8005348:	cfff69f3 	.word	0xcfff69f3
 800534c:	40008000 	.word	0x40008000
 8005350:	40013800 	.word	0x40013800
 8005354:	40021000 	.word	0x40021000
 8005358:	40004400 	.word	0x40004400
 800535c:	40004800 	.word	0x40004800
 8005360:	40004c00 	.word	0x40004c00
 8005364:	40005000 	.word	0x40005000
 8005368:	2310      	movs	r3, #16
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4aae      	ldr	r2, [pc, #696]	; (800562c <UART_SetConfig+0x5bc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	f040 8097 	bne.w	80054a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800537a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800537e:	2b08      	cmp	r3, #8
 8005380:	d823      	bhi.n	80053ca <UART_SetConfig+0x35a>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <UART_SetConfig+0x318>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053cb 	.word	0x080053cb
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053cb 	.word	0x080053cb
 8005398:	080053bb 	.word	0x080053bb
 800539c:	080053cb 	.word	0x080053cb
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053cb 	.word	0x080053cb
 80053a8:	080053c3 	.word	0x080053c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ac:	f7fe fd56 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053b2:	e010      	b.n	80053d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b4:	4b9e      	ldr	r3, [pc, #632]	; (8005630 <UART_SetConfig+0x5c0>)
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053b8:	e00d      	b.n	80053d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ba:	f7fe fce1 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 80053be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053c0:	e009      	b.n	80053d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053c8:	e005      	b.n	80053d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8130 	beq.w	800563e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	4a94      	ldr	r2, [pc, #592]	; (8005634 <UART_SetConfig+0x5c4>)
 80053e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d305      	bcc.n	800540e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	429a      	cmp	r2, r3
 800540c:	d903      	bls.n	8005416 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005414:	e113      	b.n	800563e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	2200      	movs	r2, #0
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	60fa      	str	r2, [r7, #12]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	4a84      	ldr	r2, [pc, #528]	; (8005634 <UART_SetConfig+0x5c4>)
 8005424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005428:	b29b      	uxth	r3, r3
 800542a:	2200      	movs	r2, #0
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005438:	f7fa feee 	bl	8000218 <__aeabi_uldivmod>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4610      	mov	r0, r2
 8005442:	4619      	mov	r1, r3
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	020b      	lsls	r3, r1, #8
 800544e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005452:	0202      	lsls	r2, r0, #8
 8005454:	6979      	ldr	r1, [r7, #20]
 8005456:	6849      	ldr	r1, [r1, #4]
 8005458:	0849      	lsrs	r1, r1, #1
 800545a:	2000      	movs	r0, #0
 800545c:	460c      	mov	r4, r1
 800545e:	4605      	mov	r5, r0
 8005460:	eb12 0804 	adds.w	r8, r2, r4
 8005464:	eb43 0905 	adc.w	r9, r3, r5
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	469a      	mov	sl, r3
 8005470:	4693      	mov	fp, r2
 8005472:	4652      	mov	r2, sl
 8005474:	465b      	mov	r3, fp
 8005476:	4640      	mov	r0, r8
 8005478:	4649      	mov	r1, r9
 800547a:	f7fa fecd 	bl	8000218 <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4613      	mov	r3, r2
 8005484:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800548c:	d308      	bcc.n	80054a0 <UART_SetConfig+0x430>
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005494:	d204      	bcs.n	80054a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	60da      	str	r2, [r3, #12]
 800549e:	e0ce      	b.n	800563e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054a6:	e0ca      	b.n	800563e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b0:	d166      	bne.n	8005580 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80054b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d827      	bhi.n	800550a <UART_SetConfig+0x49a>
 80054ba:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <UART_SetConfig+0x450>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	0800550b 	.word	0x0800550b
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	0800550b 	.word	0x0800550b
 80054d8:	0800550b 	.word	0x0800550b
 80054dc:	0800550b 	.word	0x0800550b
 80054e0:	08005503 	.word	0x08005503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e4:	f7fe fcba 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 80054e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ea:	e014      	b.n	8005516 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ec:	f7fe fccc 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 80054f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054f2:	e010      	b.n	8005516 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f4:	4b4e      	ldr	r3, [pc, #312]	; (8005630 <UART_SetConfig+0x5c0>)
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054f8:	e00d      	b.n	8005516 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fa:	f7fe fc41 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005500:	e009      	b.n	8005516 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005508:	e005      	b.n	8005516 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005514:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8090 	beq.w	800563e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	4a44      	ldr	r2, [pc, #272]	; (8005634 <UART_SetConfig+0x5c4>)
 8005524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005528:	461a      	mov	r2, r3
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005530:	005a      	lsls	r2, r3, #1
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	441a      	add	r2, r3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d916      	bls.n	8005578 <UART_SetConfig+0x508>
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005550:	d212      	bcs.n	8005578 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f023 030f 	bic.w	r3, r3, #15
 800555a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	b29b      	uxth	r3, r3
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	b29a      	uxth	r2, r3
 8005568:	8bfb      	ldrh	r3, [r7, #30]
 800556a:	4313      	orrs	r3, r2
 800556c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	8bfa      	ldrh	r2, [r7, #30]
 8005574:	60da      	str	r2, [r3, #12]
 8005576:	e062      	b.n	800563e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800557e:	e05e      	b.n	800563e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005584:	2b08      	cmp	r3, #8
 8005586:	d828      	bhi.n	80055da <UART_SetConfig+0x56a>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <UART_SetConfig+0x520>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055bd 	.word	0x080055bd
 8005598:	080055c5 	.word	0x080055c5
 800559c:	080055db 	.word	0x080055db
 80055a0:	080055cb 	.word	0x080055cb
 80055a4:	080055db 	.word	0x080055db
 80055a8:	080055db 	.word	0x080055db
 80055ac:	080055db 	.word	0x080055db
 80055b0:	080055d3 	.word	0x080055d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b4:	f7fe fc52 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055ba:	e014      	b.n	80055e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055bc:	f7fe fc64 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055c2:	e010      	b.n	80055e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c4:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <UART_SetConfig+0x5c0>)
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055c8:	e00d      	b.n	80055e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ca:	f7fe fbd9 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 80055ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055d0:	e009      	b.n	80055e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055d8:	e005      	b.n	80055e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055e4:	bf00      	nop
    }

    if (pclk != 0U)
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d028      	beq.n	800563e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	4a10      	ldr	r2, [pc, #64]	; (8005634 <UART_SetConfig+0x5c4>)
 80055f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f6:	461a      	mov	r2, r3
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	441a      	add	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	2b0f      	cmp	r3, #15
 8005614:	d910      	bls.n	8005638 <UART_SetConfig+0x5c8>
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561c:	d20c      	bcs.n	8005638 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	b29a      	uxth	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60da      	str	r2, [r3, #12]
 8005628:	e009      	b.n	800563e <UART_SetConfig+0x5ce>
 800562a:	bf00      	nop
 800562c:	40008000 	.word	0x40008000
 8005630:	00f42400 	.word	0x00f42400
 8005634:	08005d34 	.word	0x08005d34
      }
      else
      {
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2201      	movs	r2, #1
 8005642:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2201      	movs	r2, #1
 800564a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800565a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800565e:	4618      	mov	r0, r3
 8005660:	3730      	adds	r7, #48	; 0x30
 8005662:	46bd      	mov	sp, r7
 8005664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01a      	beq.n	800577e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005766:	d10a      	bne.n	800577e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	605a      	str	r2, [r3, #4]
  }
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b098      	sub	sp, #96	; 0x60
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057bc:	f7fb fc1a 	bl	8000ff4 <HAL_GetTick>
 80057c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d12f      	bne.n	8005830 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d8:	2200      	movs	r2, #0
 80057da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f88e 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d022      	beq.n	8005830 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005808:	647b      	str	r3, [r7, #68]	; 0x44
 800580a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800580e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e6      	bne.n	80057ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e063      	b.n	80058f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b04      	cmp	r3, #4
 800583c:	d149      	bne.n	80058d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005846:	2200      	movs	r2, #0
 8005848:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f857 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d03c      	beq.n	80058d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	623b      	str	r3, [r7, #32]
   return(result);
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800586c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005876:	633b      	str	r3, [r7, #48]	; 0x30
 8005878:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800587c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e6      	bne.n	8005858 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3308      	adds	r3, #8
 8005890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	60fb      	str	r3, [r7, #12]
   return(result);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3308      	adds	r3, #8
 80058a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058aa:	61fa      	str	r2, [r7, #28]
 80058ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	69b9      	ldr	r1, [r7, #24]
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	617b      	str	r3, [r7, #20]
   return(result);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e5      	bne.n	800588a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e012      	b.n	80058f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3758      	adds	r7, #88	; 0x58
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	e04f      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d04b      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fb fb6b 	bl	8000ff4 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <UART_WaitOnFlagUntilTimeout+0x30>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e04e      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d037      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b80      	cmp	r3, #128	; 0x80
 8005946:	d034      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d031      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b08      	cmp	r3, #8
 800595a:	d110      	bne.n	800597e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2208      	movs	r2, #8
 8005962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f838 	bl	80059da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2208      	movs	r2, #8
 800596e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e029      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598c:	d111      	bne.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f81e 	bl	80059da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e00f      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d0a0      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059da:	b480      	push	{r7}
 80059dc:	b095      	sub	sp, #84	; 0x54
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a00:	643b      	str	r3, [r7, #64]	; 0x40
 8005a02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e6      	bne.n	80059e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	f023 0301 	bic.w	r3, r3, #1
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e3      	bne.n	8005a14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d118      	bne.n	8005a86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f023 0310 	bic.w	r3, r3, #16
 8005a68:	647b      	str	r3, [r7, #68]	; 0x44
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6979      	ldr	r1, [r7, #20]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e6      	bne.n	8005a54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a9a:	bf00      	nop
 8005a9c:	3754      	adds	r7, #84	; 0x54
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_UARTEx_DisableFifoMode+0x16>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e027      	b.n	8005b0c <HAL_UARTEx_DisableFifoMode+0x66>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2224      	movs	r2, #36	; 0x24
 8005ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005aea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e02d      	b.n	8005b8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2224      	movs	r2, #36	; 0x24
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f84f 	bl	8005c10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e02d      	b.n	8005c08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f811 	bl	8005c10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d108      	bne.n	8005c32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c30:	e031      	b.n	8005c96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c32:	2308      	movs	r3, #8
 8005c34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c36:	2308      	movs	r3, #8
 8005c38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	0e5b      	lsrs	r3, r3, #25
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	0f5b      	lsrs	r3, r3, #29
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c5a:	7bbb      	ldrb	r3, [r7, #14]
 8005c5c:	7b3a      	ldrb	r2, [r7, #12]
 8005c5e:	4911      	ldr	r1, [pc, #68]	; (8005ca4 <UARTEx_SetNbDataToProcess+0x94>)
 8005c60:	5c8a      	ldrb	r2, [r1, r2]
 8005c62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c66:	7b3a      	ldrb	r2, [r7, #12]
 8005c68:	490f      	ldr	r1, [pc, #60]	; (8005ca8 <UARTEx_SetNbDataToProcess+0x98>)
 8005c6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	7b7a      	ldrb	r2, [r7, #13]
 8005c7c:	4909      	ldr	r1, [pc, #36]	; (8005ca4 <UARTEx_SetNbDataToProcess+0x94>)
 8005c7e:	5c8a      	ldrb	r2, [r1, r2]
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c84:	7b7a      	ldrb	r2, [r7, #13]
 8005c86:	4908      	ldr	r1, [pc, #32]	; (8005ca8 <UARTEx_SetNbDataToProcess+0x98>)
 8005c88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	08005d4c 	.word	0x08005d4c
 8005ca8:	08005d54 	.word	0x08005d54

08005cac <memset>:
 8005cac:	4402      	add	r2, r0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d100      	bne.n	8005cb6 <memset+0xa>
 8005cb4:	4770      	bx	lr
 8005cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cba:	e7f9      	b.n	8005cb0 <memset+0x4>

08005cbc <__libc_init_array>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	4d0d      	ldr	r5, [pc, #52]	; (8005cf4 <__libc_init_array+0x38>)
 8005cc0:	4c0d      	ldr	r4, [pc, #52]	; (8005cf8 <__libc_init_array+0x3c>)
 8005cc2:	1b64      	subs	r4, r4, r5
 8005cc4:	10a4      	asrs	r4, r4, #2
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	d109      	bne.n	8005ce0 <__libc_init_array+0x24>
 8005ccc:	4d0b      	ldr	r5, [pc, #44]	; (8005cfc <__libc_init_array+0x40>)
 8005cce:	4c0c      	ldr	r4, [pc, #48]	; (8005d00 <__libc_init_array+0x44>)
 8005cd0:	f000 f818 	bl	8005d04 <_init>
 8005cd4:	1b64      	subs	r4, r4, r5
 8005cd6:	10a4      	asrs	r4, r4, #2
 8005cd8:	2600      	movs	r6, #0
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	d105      	bne.n	8005cea <__libc_init_array+0x2e>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce4:	4798      	blx	r3
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__libc_init_array+0xc>
 8005cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cee:	4798      	blx	r3
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7f2      	b.n	8005cda <__libc_init_array+0x1e>
 8005cf4:	08005d64 	.word	0x08005d64
 8005cf8:	08005d64 	.word	0x08005d64
 8005cfc:	08005d64 	.word	0x08005d64
 8005d00:	08005d68 	.word	0x08005d68

08005d04 <_init>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr

08005d10 <_fini>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	bf00      	nop
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr
