
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a74  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c8c  08005c8c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c94  08005c94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000010  08005cac  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08005cac  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000170c5  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a00  00000000  00000000  00037148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00039b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff8  00000000  00000000  0003afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017385  00000000  00000000  000639ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9bd  00000000  00000000  0007ad6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058d0  00000000  00000000  0018972c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0018effc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005c34 	.word	0x08005c34

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005c34 	.word	0x08005c34

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc9f 	bl	8000e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82a 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa1e 	bl	8000960 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f9f2 	bl	800090c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f908 	bl	800073c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f950 	bl	80007d0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f86a 	bl	8000608 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000534:	f000 f99a 	bl	800086c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <main+0x50>)
 800053a:	f003 ff3f 	bl	80043bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800053e:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0x54>)
 8000540:	f003 ff3c 	bl	80043bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <main+0x50>)
 8000546:	f003 ffa9 	bl	800449c <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800054a:	217f      	movs	r1, #127	; 0x7f
 800054c:	4807      	ldr	r0, [pc, #28]	; (800056c <main+0x58>)
 800054e:	f002 f803 	bl	8002558 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 300);
 8000552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000556:	4906      	ldr	r1, [pc, #24]	; (8000570 <main+0x5c>)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0x58>)
 800055a:	f001 f8ef 	bl	800173c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Micros();
 800055e:	f000 fa85 	bl	8000a6c <Micros>
 8000562:	e7fc      	b.n	800055e <main+0x4a>
 8000564:	2000018c 	.word	0x2000018c
 8000568:	200001d8 	.word	0x200001d8
 800056c:	2000002c 	.word	0x2000002c
 8000570:	20000234 	.word	0x20000234

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	2238      	movs	r2, #56	; 0x38
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fb2a 	bl	8005bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000596:	2000      	movs	r0, #0
 8000598:	f002 fe88 	bl	80032ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	2303      	movs	r3, #3
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005ae:	2306      	movs	r3, #6
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005b2:	2355      	movs	r3, #85	; 0x55
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 ff24 	bl	8003414 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005d2:	f000 fa6b 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fa22 	bl	8003a38 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005fa:	f000 fa57 	bl	8000aac <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f005 fadb 	bl	8005bdc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000626:	4b41      	ldr	r3, [pc, #260]	; (800072c <MX_ADC1_Init+0x124>)
 8000628:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800062c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062e:	4b3f      	ldr	r3, [pc, #252]	; (800072c <MX_ADC1_Init+0x124>)
 8000630:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000636:	4b3d      	ldr	r3, [pc, #244]	; (800072c <MX_ADC1_Init+0x124>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063c:	4b3b      	ldr	r3, [pc, #236]	; (800072c <MX_ADC1_Init+0x124>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000642:	4b3a      	ldr	r3, [pc, #232]	; (800072c <MX_ADC1_Init+0x124>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000648:	4b38      	ldr	r3, [pc, #224]	; (800072c <MX_ADC1_Init+0x124>)
 800064a:	2201      	movs	r2, #1
 800064c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <MX_ADC1_Init+0x124>)
 8000650:	2204      	movs	r2, #4
 8000652:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <MX_ADC1_Init+0x124>)
 8000656:	2200      	movs	r2, #0
 8000658:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800065a:	4b34      	ldr	r3, [pc, #208]	; (800072c <MX_ADC1_Init+0x124>)
 800065c:	2201      	movs	r2, #1
 800065e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000660:	4b32      	ldr	r3, [pc, #200]	; (800072c <MX_ADC1_Init+0x124>)
 8000662:	2203      	movs	r2, #3
 8000664:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <MX_ADC1_Init+0x124>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_ADC1_Init+0x124>)
 8000670:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <MX_ADC1_Init+0x124>)
 8000678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800067e:	4b2b      	ldr	r3, [pc, #172]	; (800072c <MX_ADC1_Init+0x124>)
 8000680:	2201      	movs	r2, #1
 8000682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_ADC1_Init+0x124>)
 8000688:	2200      	movs	r2, #0
 800068a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC1_Init+0x124>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	4825      	ldr	r0, [pc, #148]	; (800072c <MX_ADC1_Init+0x124>)
 8000696:	f000 fe95 	bl	80013c4 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006a0:	f000 fa04 	bl	8000aac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	481f      	ldr	r0, [pc, #124]	; (800072c <MX_ADC1_Init+0x124>)
 80006b0:	f001 ffb4 	bl	800261c <HAL_ADCEx_MultiModeConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006ba:	f000 f9f7 	bl	8000aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_ADC1_Init+0x128>)
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c2:	2306      	movs	r3, #6
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006c6:	2307      	movs	r3, #7
 80006c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ca:	237f      	movs	r3, #127	; 0x7f
 80006cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <MX_ADC1_Init+0x124>)
 80006dc:	f001 f920 	bl	8001920 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006e6:	f000 f9e1 	bl	8000aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_ADC1_Init+0x12c>)
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ee:	230c      	movs	r3, #12
 80006f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_ADC1_Init+0x124>)
 80006f8:	f001 f912 	bl	8001920 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000702:	f000 f9d3 	bl	8000aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_ADC1_Init+0x130>)
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800070a:	2312      	movs	r3, #18
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_ADC1_Init+0x124>)
 8000714:	f001 f904 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800071e:	f000 f9c5 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3730      	adds	r7, #48	; 0x30
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000002c 	.word	0x2000002c
 8000730:	04300002 	.word	0x04300002
 8000734:	08600004 	.word	0x08600004
 8000738:	3ef08000 	.word	0x3ef08000

0800073c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000742:	4a22      	ldr	r2, [pc, #136]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000744:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800077e:	4812      	ldr	r0, [pc, #72]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000780:	f004 fbbe 	bl	8004f00 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f98f 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 8000792:	f005 f959 	bl	8005a48 <HAL_UARTEx_SetTxFifoThreshold>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800079c:	f000 f986 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 80007a4:	f005 f98e 	bl	8005ac4 <HAL_UARTEx_SetRxFifoThreshold>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007ae:	f000 f97d 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	f005 f90f 	bl	80059d6 <HAL_UARTEx_DisableFifoMode>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007be:	f000 f975 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000f8 	.word	0x200000f8
 80007cc:	40008000 	.word	0x40008000

080007d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_TIM2_Init+0x98>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_TIM2_Init+0x98>)
 80007f8:	22a9      	movs	r2, #169	; 0xa9
 80007fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM2_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_TIM2_Init+0x98>)
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_TIM2_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM2_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000816:	4814      	ldr	r0, [pc, #80]	; (8000868 <MX_TIM2_Init+0x98>)
 8000818:	f003 fd78 	bl	800430c <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000822:	f000 f943 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_TIM2_Init+0x98>)
 8000834:	f003 fffa 	bl	800482c <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800083e:	f000 f935 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM2_Init+0x98>)
 8000850:	f004 fa7a 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800085a:	f000 f927 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000018c 	.word	0x2000018c

0800086c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_TIM3_Init+0x98>)
 800088c:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <MX_TIM3_Init+0x9c>)
 800088e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 56666;
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_TIM3_Init+0x98>)
 8000892:	f64d 525a 	movw	r2, #56666	; 0xdd5a
 8000896:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_TIM3_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_TIM3_Init+0x98>)
 80008a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_TIM3_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM3_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b2:	4814      	ldr	r0, [pc, #80]	; (8000904 <MX_TIM3_Init+0x98>)
 80008b4:	f003 fd2a 	bl	800430c <HAL_TIM_Base_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80008be:	f000 f8f5 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_TIM3_Init+0x98>)
 80008d0:	f003 ffac 	bl	800482c <HAL_TIM_ConfigClockSource>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008da:	f000 f8e7 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008de:	2320      	movs	r3, #32
 80008e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <MX_TIM3_Init+0x98>)
 80008ec:	f004 fa2c 	bl	8004d48 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008f6:	f000 f8d9 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001d8 	.word	0x200001d8
 8000908:	40000400 	.word	0x40000400

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_DMA_Init+0x50>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <MX_DMA_Init+0x50>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6493      	str	r3, [r2, #72]	; 0x48
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_DMA_Init+0x50>)
 8000920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_DMA_Init+0x50>)
 800092c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <MX_DMA_Init+0x50>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6493      	str	r3, [r2, #72]	; 0x48
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_DMA_Init+0x50>)
 8000938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	200b      	movs	r0, #11
 8000948:	f002 f84b 	bl	80029e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800094c:	200b      	movs	r0, #11
 800094e:	f002 f862 	bl	8002a16 <HAL_NVIC_EnableIRQ>

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <MX_GPIO_Init+0xd4>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xd4>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_GPIO_Init+0xd4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_GPIO_Init+0xd4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2120      	movs	r1, #32
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f002 fc29 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <MX_GPIO_Init+0xd8>)
 80009fa:	f002 fa99 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fe:	2320      	movs	r3, #32
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f002 fa8a 	bl	8002f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2028      	movs	r0, #40	; 0x28
 8000a22:	f001 ffde 	bl	80029e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a26:	2028      	movs	r0, #40	; 0x28
 8000a28:	f001 fff5 	bl	8002a16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800

08000a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d104      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		CountOver++;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a54:	6013      	str	r3, [r2, #0]
	}
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000018c 	.word	0x2000018c
 8000a68:	20000230 	.word	0x20000230

08000a6c <Micros>:

void Micros()
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
	timestamp = (CountOver * Counter_TIM2) + __HAL_TIM_GET_COUNTER(&htim2);
 8000a70:	490a      	ldr	r1, [pc, #40]	; (8000a9c <Micros+0x30>)
 8000a72:	6809      	ldr	r1, [r1, #0]
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <Micros+0x34>)
 8000a76:	6800      	ldr	r0, [r0, #0]
 8000a78:	fb01 f000 	mul.w	r0, r1, r0
 8000a7c:	4909      	ldr	r1, [pc, #36]	; (8000aa4 <Micros+0x38>)
 8000a7e:	6809      	ldr	r1, [r1, #0]
 8000a80:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000a82:	4401      	add	r1, r0
 8000a84:	2000      	movs	r0, #0
 8000a86:	460a      	mov	r2, r1
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <Micros+0x3c>)
 8000a8c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000230 	.word	0x20000230
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	2000018c 	.word	0x2000018c
 8000aa8:	20000228 	.word	0x20000228

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_MspInit+0x44>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x44>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aee:	f002 fc81 	bl	80033f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0a0      	sub	sp, #128	; 0x80
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	2254      	movs	r2, #84	; 0x54
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 f85b 	bl	8005bdc <memset>
  if(hadc->Instance==ADC1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b2e:	d177      	bne.n	8000c20 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 f995 	bl	8003e70 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b4c:	f7ff ffae 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b50:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	4a34      	ldr	r2, [pc, #208]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5c:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <HAL_ADC_MspInit+0x128>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f002 f9bf 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4819      	ldr	r0, [pc, #100]	; (8000c2c <HAL_ADC_MspInit+0x12c>)
 8000bc6:	f002 f9b3 	bl	8002f30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_ADC_MspInit+0x134>)
 8000bce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000c06:	f001 ff21 	bl	8002a4c <HAL_DMA_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000c10:	f7ff ff4c 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000c18:	655a      	str	r2, [r3, #84]	; 0x54
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <HAL_ADC_MspInit+0x130>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3780      	adds	r7, #128	; 0x80
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	20000098 	.word	0x20000098
 8000c34:	40020008 	.word	0x40020008

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b09e      	sub	sp, #120	; 0x78
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	2254      	movs	r2, #84	; 0x54
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 ffbf 	bl	8005bdc <memset>
  if(huart->Instance==LPUART1)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a1f      	ldr	r2, [pc, #124]	; (8000ce0 <HAL_UART_MspInit+0xa8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d136      	bne.n	8000cd6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c68:	2320      	movs	r3, #32
 8000c6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 f8fb 	bl	8003e70 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c80:	f7ff ff14 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_UART_MspInit+0xac>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f002 f92d 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3778      	adds	r7, #120	; 0x78
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40008000 	.word	0x40008000
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d114      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_TIM_Base_MspInit+0x68>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <HAL_TIM_Base_MspInit+0x68>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_TIM_Base_MspInit+0x68>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	201c      	movs	r0, #28
 8000d18:	f001 fe63 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f001 fe7a 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d22:	e010      	b.n	8000d46 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_TIM_Base_MspInit+0x6c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10b      	bne.n	8000d46 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_TIM_Base_MspInit+0x68>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_TIM_Base_MspInit+0x68>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_TIM_Base_MspInit+0x68>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40000400 	.word	0x40000400

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 f8ac 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA1_Channel1_IRQHandler+0x10>)
 8000db2:	f001 ff6e 	bl	8002c92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000098 	.word	0x20000098

08000dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM2_IRQHandler+0x10>)
 8000dc6:	f003 fbe1 	bl	800458c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000018c 	.word	0x2000018c

08000dd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ddc:	f002 fa42 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	; (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	; (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f004 fed9 	bl	8005bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3a:	f7ff fb6b 	bl	8000514 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   r0, =_estack
 8000e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e4c:	08005c9c 	.word	0x08005c9c
  ldr r2, =_sbss
 8000e50:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e54:	20000244 	.word	0x20000244

08000e58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_2_IRQHandler>

08000e5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f001 fdb1 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f80e 	bl	8000e8c <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	e001      	b.n	8000e80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7c:	f7ff fe1c 	bl	8000ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e80:	79fb      	ldrb	r3, [r7, #7]

}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_InitTick+0x68>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d022      	beq.n	8000ee6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_InitTick+0x6c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_InitTick+0x68>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fdbc 	bl	8002a32 <HAL_SYSTICK_Config>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10f      	bne.n	8000ee0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	d809      	bhi.n	8000eda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ece:	f001 fd88 	bl	80029e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_InitTick+0x70>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e007      	b.n	8000eea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e004      	b.n	8000eea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e001      	b.n	8000eea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	20000008 	.word	0x20000008

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x20>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f10:	6013      	str	r3, [r2, #0]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	20000240 	.word	0x20000240
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000240 	.word	0x20000240

08000f3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	609a      	str	r2, [r3, #8]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3360      	adds	r3, #96	; 0x60
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <LL_ADC_SetOffset+0x44>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fdc:	bf00      	nop
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	03fff000 	.word	0x03fff000

08000fec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3360      	adds	r3, #96	; 0x60
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3360      	adds	r3, #96	; 0x60
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800104e:	b480      	push	{r7}
 8001050:	b087      	sub	sp, #28
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3360      	adds	r3, #96	; 0x60
 800105e:	461a      	mov	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	431a      	orrs	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3360      	adds	r3, #96	; 0x60
 8001094:	461a      	mov	r2, r3
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	615a      	str	r2, [r3, #20]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001106:	b480      	push	{r7}
 8001108:	b087      	sub	sp, #28
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3330      	adds	r3, #48	; 0x30
 8001116:	461a      	mov	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	4413      	add	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	211f      	movs	r1, #31
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	401a      	ands	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	0e9b      	lsrs	r3, r3, #26
 800113e:	f003 011f 	and.w	r1, r3, #31
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	431a      	orrs	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001152:	bf00      	nop
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3314      	adds	r3, #20
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	0e5b      	lsrs	r3, r3, #25
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	0d1b      	lsrs	r3, r3, #20
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	2107      	movs	r1, #7
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	0d1b      	lsrs	r3, r3, #20
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	431a      	orrs	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011a8:	bf00      	nop
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011cc:	43db      	mvns	r3, r3
 80011ce:	401a      	ands	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0318 	and.w	r3, r3, #24
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011d8:	40d9      	lsrs	r1, r3
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	400b      	ands	r3, r1
 80011de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e2:	431a      	orrs	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	0007ffff 	.word	0x0007ffff

080011fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 031f 	and.w	r3, r3, #31
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6093      	str	r3, [r2, #8]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800124c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001250:	d101      	bne.n	8001256 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001278:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012a0:	d101      	bne.n	80012a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f0:	f043 0202 	orr.w	r2, r3, #2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <LL_ADC_IsEnabled+0x18>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_ADC_IsEnabled+0x1a>
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d101      	bne.n	8001342 <LL_ADC_IsDisableOngoing+0x18>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_IsDisableOngoing+0x1a>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001364:	f043 0204 	orr.w	r2, r3, #4
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b04      	cmp	r3, #4
 800138a:	d101      	bne.n	8001390 <LL_ADC_REG_IsConversionOngoing+0x18>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d101      	bne.n	80013b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1a9      	b.n	8001732 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fb87 	bl	8000b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff19 	bl	800123c <LL_ADC_IsDeepPowerDownEnabled>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff feff 	bl	8001218 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff34 	bl	800128c <LL_ADC_IsInternalRegulatorEnabled>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d115      	bne.n	8001456 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff18 	bl	8001264 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001434:	4b9c      	ldr	r3, [pc, #624]	; (80016a8 <HAL_ADC_Init+0x2e4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	099b      	lsrs	r3, r3, #6
 800143a:	4a9c      	ldr	r2, [pc, #624]	; (80016ac <HAL_ADC_Init+0x2e8>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	099b      	lsrs	r3, r3, #6
 8001442:	3301      	adds	r3, #1
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001448:	e002      	b.n	8001450 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3b01      	subs	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f9      	bne.n	800144a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff16 	bl	800128c <LL_ADC_IsInternalRegulatorEnabled>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10d      	bne.n	8001482 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	f043 0210 	orr.w	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001476:	f043 0201 	orr.w	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff76 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 800148c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 8142 	bne.w	8001720 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 813e 	bne.w	8001720 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014ac:	f043 0202 	orr.w	r2, r3, #2
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff23 	bl	8001304 <LL_ADC_IsEnabled>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d141      	bne.n	8001548 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014cc:	d004      	beq.n	80014d8 <HAL_ADC_Init+0x114>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_ADC_Init+0x2ec>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d10f      	bne.n	80014f8 <HAL_ADC_Init+0x134>
 80014d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014dc:	f7ff ff12 	bl	8001304 <LL_ADC_IsEnabled>
 80014e0:	4604      	mov	r4, r0
 80014e2:	4873      	ldr	r0, [pc, #460]	; (80016b0 <HAL_ADC_Init+0x2ec>)
 80014e4:	f7ff ff0e 	bl	8001304 <LL_ADC_IsEnabled>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4323      	orrs	r3, r4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e012      	b.n	800151e <HAL_ADC_Init+0x15a>
 80014f8:	486e      	ldr	r0, [pc, #440]	; (80016b4 <HAL_ADC_Init+0x2f0>)
 80014fa:	f7ff ff03 	bl	8001304 <LL_ADC_IsEnabled>
 80014fe:	4604      	mov	r4, r0
 8001500:	486d      	ldr	r0, [pc, #436]	; (80016b8 <HAL_ADC_Init+0x2f4>)
 8001502:	f7ff feff 	bl	8001304 <LL_ADC_IsEnabled>
 8001506:	4603      	mov	r3, r0
 8001508:	431c      	orrs	r4, r3
 800150a:	486c      	ldr	r0, [pc, #432]	; (80016bc <HAL_ADC_Init+0x2f8>)
 800150c:	f7ff fefa 	bl	8001304 <LL_ADC_IsEnabled>
 8001510:	4603      	mov	r3, r0
 8001512:	4323      	orrs	r3, r4
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d012      	beq.n	8001548 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800152a:	d004      	beq.n	8001536 <HAL_ADC_Init+0x172>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a5f      	ldr	r2, [pc, #380]	; (80016b0 <HAL_ADC_Init+0x2ec>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_ADC_Init+0x176>
 8001536:	4a62      	ldr	r2, [pc, #392]	; (80016c0 <HAL_ADC_Init+0x2fc>)
 8001538:	e000      	b.n	800153c <HAL_ADC_Init+0x178>
 800153a:	4a62      	ldr	r2, [pc, #392]	; (80016c4 <HAL_ADC_Init+0x300>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff fcfa 	bl	8000f3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7f5b      	ldrb	r3, [r3, #29]
 800154c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001552:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001558:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800155e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001566:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001572:	2b01      	cmp	r3, #1
 8001574:	d106      	bne.n	8001584 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	3b01      	subs	r3, #1
 800157c:	045b      	lsls	r3, r3, #17
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	2b00      	cmp	r3, #0
 800158a:	d009      	beq.n	80015a0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <HAL_ADC_Init+0x304>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	69b9      	ldr	r1, [r7, #24]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fee5 	bl	800139e <LL_ADC_INJ_IsConversionOngoing>
 80015d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d17f      	bne.n	80016dc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d17c      	bne.n	80016dc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015fe:	f023 0302 	bic.w	r3, r3, #2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	430b      	orrs	r3, r1
 800160a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d017      	beq.n	8001644 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001622:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800162c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001630:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6911      	ldr	r1, [r2, #16]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	430b      	orrs	r3, r1
 800163e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001642:	e013      	b.n	800166c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001652:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001668:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001672:	2b01      	cmp	r3, #1
 8001674:	d12a      	bne.n	80016cc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001692:	4311      	orrs	r1, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001698:	430a      	orrs	r2, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	e019      	b.n	80016dc <HAL_ADC_Init+0x318>
 80016a8:	20000004 	.word	0x20000004
 80016ac:	053e2d63 	.word	0x053e2d63
 80016b0:	50000100 	.word	0x50000100
 80016b4:	50000400 	.word	0x50000400
 80016b8:	50000500 	.word	0x50000500
 80016bc:	50000600 	.word	0x50000600
 80016c0:	50000300 	.word	0x50000300
 80016c4:	50000700 	.word	0x50000700
 80016c8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d10c      	bne.n	80016fe <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f023 010f 	bic.w	r1, r3, #15
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	1e5a      	subs	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
 80016fc:	e007      	b.n	800170e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 020f 	bic.w	r2, r2, #15
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c
 800171e:	e007      	b.n	8001730 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	f043 0210 	orr.w	r2, r3, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001730:	7ffb      	ldrb	r3, [r7, #31]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	bf00      	nop

0800173c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001750:	d004      	beq.n	800175c <HAL_ADC_Start_DMA+0x20>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a5a      	ldr	r2, [pc, #360]	; (80018c0 <HAL_ADC_Start_DMA+0x184>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_ADC_Start_DMA+0x24>
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_ADC_Start_DMA+0x188>)
 800175e:	e000      	b.n	8001762 <HAL_ADC_Start_DMA+0x26>
 8001760:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <HAL_ADC_Start_DMA+0x18c>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fd4a 	bl	80011fc <LL_ADC_GetMultimode>
 8001768:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fe02 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 809b 	bne.w	80018b2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_ADC_Start_DMA+0x4e>
 8001786:	2302      	movs	r3, #2
 8001788:	e096      	b.n	80018b8 <HAL_ADC_Start_DMA+0x17c>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_ADC_Start_DMA+0x190>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d008      	beq.n	80017ae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d002      	beq.n	80017ae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	d17a      	bne.n	80018a4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 fcf6 	bl	80021a0 <ADC_Enable>
 80017b4:	4603      	mov	r3, r0
 80017b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d16d      	bne.n	800189a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a3a      	ldr	r2, [pc, #232]	; (80018c0 <HAL_ADC_Start_DMA+0x184>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_ADC_Start_DMA+0xb4>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a3b      	ldr	r2, [pc, #236]	; (80018d0 <HAL_ADC_Start_DMA+0x194>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d002      	beq.n	80017ec <HAL_ADC_Start_DMA+0xb0>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	e003      	b.n	80017f4 <HAL_ADC_Start_DMA+0xb8>
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <HAL_ADC_Start_DMA+0x198>)
 80017ee:	e001      	b.n	80017f4 <HAL_ADC_Start_DMA+0xb8>
 80017f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d002      	beq.n	8001802 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	f023 0206 	bic.w	r2, r3, #6
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	661a      	str	r2, [r3, #96]	; 0x60
 8001826:	e002      	b.n	800182e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001832:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <HAL_ADC_Start_DMA+0x19c>)
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	4a28      	ldr	r2, [pc, #160]	; (80018dc <HAL_ADC_Start_DMA+0x1a0>)
 800183c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <HAL_ADC_Start_DMA+0x1a4>)
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	221c      	movs	r2, #28
 800184c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0210 	orr.w	r2, r2, #16
 8001864:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0201 	orr.w	r2, r2, #1
 8001874:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3340      	adds	r3, #64	; 0x40
 8001880:	4619      	mov	r1, r3
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f001 f989 	bl	8002b9c <HAL_DMA_Start_IT>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fd5c 	bl	8001350 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001898:	e00d      	b.n	80018b6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80018a2:	e008      	b.n	80018b6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80018b0:	e001      	b.n	80018b6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018b2:	2302      	movs	r3, #2
 80018b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	50000100 	.word	0x50000100
 80018c4:	50000300 	.word	0x50000300
 80018c8:	50000700 	.word	0x50000700
 80018cc:	50000600 	.word	0x50000600
 80018d0:	50000500 	.word	0x50000500
 80018d4:	50000400 	.word	0x50000400
 80018d8:	0800238b 	.word	0x0800238b
 80018dc:	08002463 	.word	0x08002463
 80018e0:	0800247f 	.word	0x0800247f

080018e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0b6      	sub	sp, #216	; 0xd8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x24>
 800193e:	2302      	movs	r3, #2
 8001940:	f000 bc13 	b.w	800216a <HAL_ADC_ConfigChannel+0x84a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fd11 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 83f3 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6859      	ldr	r1, [r3, #4]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f7ff fbcb 	bl	8001106 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fcff 	bl	8001378 <LL_ADC_REG_IsConversionOngoing>
 800197a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fd0b 	bl	800139e <LL_ADC_INJ_IsConversionOngoing>
 8001988:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800198c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 81d9 	bne.w	8001d48 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 81d4 	bne.w	8001d48 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019a8:	d10f      	bne.n	80019ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff fbd2 	bl	800115e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb79 	bl	80010ba <LL_ADC_SetSamplingTimeCommonConfig>
 80019c8:	e00e      	b.n	80019e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6819      	ldr	r1, [r3, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f7ff fbc1 	bl	800115e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fb69 	bl	80010ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d022      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a1a:	f7ff fac3 	bl	8000fa4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6919      	ldr	r1, [r3, #16]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f7ff fb0f 	bl	800104e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x126>
 8001a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a44:	e000      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x128>
 8001a46:	2300      	movs	r3, #0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f7ff fb1b 	bl	8001084 <LL_ADC_SetOffsetSaturation>
 8001a4e:	e17b      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fac8 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x15c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fabd 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	f003 021f 	and.w	r2, r3, #31
 8001a7a:	e01e      	b.n	8001aba <HAL_ADC_ConfigChannel+0x19a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fab2 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e004      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x1b2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	0e9b      	lsrs	r3, r3, #26
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	e018      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1e4>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001af6:	2320      	movs	r3, #32
 8001af8:	e004      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d106      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fa81 	bl	8001018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fa65 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10a      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x222>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fa5a 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	0e9b      	lsrs	r3, r3, #26
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	e01e      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x260>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2101      	movs	r1, #1
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fa4f 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b70:	2320      	movs	r3, #32
 8001b72:	e004      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x278>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0e9b      	lsrs	r3, r3, #26
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	e018      	b.n	8001bca <HAL_ADC_ConfigChannel+0x2aa>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	e004      	b.n	8001bca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d106      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fa1e 	bl	8001018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2102      	movs	r1, #2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fa02 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10a      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x2e8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f9f7 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	0e9b      	lsrs	r3, r3, #26
 8001c02:	f003 021f 	and.w	r2, r3, #31
 8001c06:	e01e      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x326>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f9ec 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001c36:	2320      	movs	r3, #32
 8001c38:	e004      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x33e>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	e016      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x36c>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e004      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d106      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	2102      	movs	r1, #2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f9bd 	bl	8001018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f9a1 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x3aa>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2103      	movs	r1, #3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f996 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	0e9b      	lsrs	r3, r3, #26
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	e017      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x3da>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2103      	movs	r1, #3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f98b 	bl	8000fec <LL_ADC_GetOffsetChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x3f2>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0e9b      	lsrs	r3, r3, #26
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	e011      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x416>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e003      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d106      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2103      	movs	r1, #3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f968 	bl	8001018 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fad9 	bl	8001304 <LL_ADC_IsEnabled>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f040 813d 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f7ff fa24 	bl	80011b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4aa2      	ldr	r2, [pc, #648]	; (8001ffc <HAL_ADC_ConfigChannel+0x6dc>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	f040 812e 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x480>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	bf94      	ite	ls
 8001d98:	2301      	movls	r3, #1
 8001d9a:	2300      	movhi	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e019      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x4b4>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001db0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	bf94      	ite	ls
 8001dce:	2301      	movls	r3, #1
 8001dd0:	2300      	movhi	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d079      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d107      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x4d4>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	3301      	adds	r3, #1
 8001dec:	069b      	lsls	r3, r3, #26
 8001dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001df2:	e015      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x500>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	e003      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	069b      	lsls	r3, r3, #26
 8001e1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x520>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	e017      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x550>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e003      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	ea42 0103 	orr.w	r1, r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x576>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	3301      	adds	r3, #1
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	051b      	lsls	r3, r3, #20
 8001e94:	e018      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x5a8>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e003      	b.n	8001eba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	e07e      	b.n	8001fca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x5c8>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	3301      	adds	r3, #1
 8001ee0:	069b      	lsls	r3, r3, #26
 8001ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee6:	e015      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x5f4>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001f00:	2320      	movs	r3, #32
 8001f02:	e003      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	069b      	lsls	r3, r3, #26
 8001f10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x614>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	3301      	adds	r3, #1
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	e017      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x644>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	61fb      	str	r3, [r7, #28]
  return result;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e003      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	ea42 0103 	orr.w	r1, r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x670>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	3b1e      	subs	r3, #30
 8001f88:	051b      	lsls	r3, r3, #20
 8001f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	e01b      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x6a8>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	613b      	str	r3, [r7, #16]
  return result;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f003 021f 	and.w	r2, r3, #31
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b1e      	subs	r3, #30
 8001fc2:	051b      	lsls	r3, r3, #20
 8001fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7ff f8c5 	bl	800115e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_ADC_ConfigChannel+0x6e0>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80be 	beq.w	800215e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fea:	d004      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x6d6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_ADC_ConfigChannel+0x6e4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10a      	bne.n	800200c <HAL_ADC_ConfigChannel+0x6ec>
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_ADC_ConfigChannel+0x6e8>)
 8001ff8:	e009      	b.n	800200e <HAL_ADC_ConfigChannel+0x6ee>
 8001ffa:	bf00      	nop
 8001ffc:	407f0000 	.word	0x407f0000
 8002000:	80080000 	.word	0x80080000
 8002004:	50000100 	.word	0x50000100
 8002008:	50000300 	.word	0x50000300
 800200c:	4b59      	ldr	r3, [pc, #356]	; (8002174 <HAL_ADC_ConfigChannel+0x854>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe ffba 	bl	8000f88 <LL_ADC_GetCommonPathInternalCh>
 8002014:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a56      	ldr	r2, [pc, #344]	; (8002178 <HAL_ADC_ConfigChannel+0x858>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_ADC_ConfigChannel+0x70c>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a55      	ldr	r2, [pc, #340]	; (800217c <HAL_ADC_ConfigChannel+0x85c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d13a      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800202c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d134      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002040:	d005      	beq.n	800204e <HAL_ADC_ConfigChannel+0x72e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_ADC_ConfigChannel+0x860>)
 8002048:	4293      	cmp	r3, r2
 800204a:	f040 8085 	bne.w	8002158 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002056:	d004      	beq.n	8002062 <HAL_ADC_ConfigChannel+0x742>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a49      	ldr	r2, [pc, #292]	; (8002184 <HAL_ADC_ConfigChannel+0x864>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x746>
 8002062:	4a49      	ldr	r2, [pc, #292]	; (8002188 <HAL_ADC_ConfigChannel+0x868>)
 8002064:	e000      	b.n	8002068 <HAL_ADC_ConfigChannel+0x748>
 8002066:	4a43      	ldr	r2, [pc, #268]	; (8002174 <HAL_ADC_ConfigChannel+0x854>)
 8002068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800206c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f7fe ff75 	bl	8000f62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002078:	4b44      	ldr	r3, [pc, #272]	; (800218c <HAL_ADC_ConfigChannel+0x86c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	4a44      	ldr	r2, [pc, #272]	; (8002190 <HAL_ADC_ConfigChannel+0x870>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002092:	e002      	b.n	800209a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3b01      	subs	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f9      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020a0:	e05a      	b.n	8002158 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_ADC_ConfigChannel+0x874>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d125      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11f      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a31      	ldr	r2, [pc, #196]	; (8002184 <HAL_ADC_ConfigChannel+0x864>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d104      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x7ac>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a34      	ldr	r2, [pc, #208]	; (8002198 <HAL_ADC_ConfigChannel+0x878>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d047      	beq.n	800215c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x7c0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2a      	ldr	r2, [pc, #168]	; (8002184 <HAL_ADC_ConfigChannel+0x864>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x7c4>
 80020e0:	4a29      	ldr	r2, [pc, #164]	; (8002188 <HAL_ADC_ConfigChannel+0x868>)
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x7c6>
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_ADC_ConfigChannel+0x854>)
 80020e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f7fe ff36 	bl	8000f62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020f6:	e031      	b.n	800215c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a27      	ldr	r2, [pc, #156]	; (800219c <HAL_ADC_ConfigChannel+0x87c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d12d      	bne.n	800215e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d127      	bne.n	800215e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_ADC_ConfigChannel+0x864>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d022      	beq.n	800215e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002120:	d004      	beq.n	800212c <HAL_ADC_ConfigChannel+0x80c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a17      	ldr	r2, [pc, #92]	; (8002184 <HAL_ADC_ConfigChannel+0x864>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x810>
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <HAL_ADC_ConfigChannel+0x868>)
 800212e:	e000      	b.n	8002132 <HAL_ADC_ConfigChannel+0x812>
 8002130:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_ADC_ConfigChannel+0x854>)
 8002132:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002136:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f7fe ff10 	bl	8000f62 <LL_ADC_SetCommonPathInternalCh>
 8002142:	e00c      	b.n	800215e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002156:	e002      	b.n	800215e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002158:	bf00      	nop
 800215a:	e000      	b.n	800215e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800215c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002166:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800216a:	4618      	mov	r0, r3
 800216c:	37d8      	adds	r7, #216	; 0xd8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	50000700 	.word	0x50000700
 8002178:	c3210000 	.word	0xc3210000
 800217c:	90c00010 	.word	0x90c00010
 8002180:	50000600 	.word	0x50000600
 8002184:	50000100 	.word	0x50000100
 8002188:	50000300 	.word	0x50000300
 800218c:	20000004 	.word	0x20000004
 8002190:	053e2d63 	.word	0x053e2d63
 8002194:	c7520000 	.word	0xc7520000
 8002198:	50000500 	.word	0x50000500
 800219c:	cb840000 	.word	0xcb840000

080021a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff f8a7 	bl	8001304 <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d176      	bne.n	80022aa <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <ADC_Enable+0x114>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	f043 0210 	orr.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	f043 0201 	orr.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e062      	b.n	80022ac <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f862 	bl	80012b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d004      	beq.n	8002204 <ADC_Enable+0x64>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2e      	ldr	r2, [pc, #184]	; (80022b8 <ADC_Enable+0x118>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <ADC_Enable+0x68>
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <ADC_Enable+0x11c>)
 8002206:	e000      	b.n	800220a <ADC_Enable+0x6a>
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <ADC_Enable+0x120>)
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe febc 	bl	8000f88 <LL_ADC_GetCommonPathInternalCh>
 8002210:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002216:	2b00      	cmp	r3, #0
 8002218:	d013      	beq.n	8002242 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <ADC_Enable+0x124>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <ADC_Enable+0x128>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002234:	e002      	b.n	800223c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3b01      	subs	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f9      	bne.n	8002236 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002242:	f7fe fe6f 	bl	8000f24 <HAL_GetTick>
 8002246:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002248:	e028      	b.n	800229c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f858 	bl	8001304 <LL_ADC_IsEnabled>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f828 	bl	80012b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002264:	f7fe fe5e 	bl	8000f24 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d914      	bls.n	800229c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d00d      	beq.n	800229c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	f043 0210 	orr.w	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e007      	b.n	80022ac <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d1cf      	bne.n	800224a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	8000003f 	.word	0x8000003f
 80022b8:	50000100 	.word	0x50000100
 80022bc:	50000300 	.word	0x50000300
 80022c0:	50000700 	.word	0x50000700
 80022c4:	20000004 	.word	0x20000004
 80022c8:	053e2d63 	.word	0x053e2d63

080022cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff f826 	bl	800132a <LL_ADC_IsDisableOngoing>
 80022de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f80d 	bl	8001304 <LL_ADC_IsEnabled>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d047      	beq.n	8002380 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d144      	bne.n	8002380 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030d 	and.w	r3, r3, #13
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10c      	bne.n	800231e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe ffe7 	bl	80012dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2203      	movs	r2, #3
 8002314:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002316:	f7fe fe05 	bl	8000f24 <HAL_GetTick>
 800231a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800231c:	e029      	b.n	8002372 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	f043 0210 	orr.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e023      	b.n	8002382 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800233a:	f7fe fdf3 	bl	8000f24 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d914      	bls.n	8002372 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	f043 0210 	orr.w	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e007      	b.n	8002382 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1dc      	bne.n	800233a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d14b      	bne.n	800243c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d021      	beq.n	8002402 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fe8c 	bl	80010e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d032      	beq.n	8002434 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d12b      	bne.n	8002434 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11f      	bne.n	8002434 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002400:	e018      	b.n	8002434 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d111      	bne.n	8002434 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	f043 0201 	orr.w	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff fa55 	bl	80018e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800243a:	e00e      	b.n	800245a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff fa5f 	bl	800190c <HAL_ADC_ErrorCallback>
}
 800244e:	e004      	b.n	800245a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff fa41 	bl	80018f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	f043 0204 	orr.w	r2, r3, #4
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff fa31 	bl	800190c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <LL_ADC_IsEnabled>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <LL_ADC_IsEnabled+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_ADC_IsEnabled+0x1a>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_StartCalibration>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80024ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	609a      	str	r2, [r3, #8]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_IsCalibrationOnGoing>:
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800251a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800251e:	d101      	bne.n	8002524 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_ADC_REG_IsConversionOngoing>:
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b04      	cmp	r3, #4
 8002544:	d101      	bne.n	800254a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_ADCEx_Calibration_Start+0x1c>
 8002570:	2302      	movs	r3, #2
 8002572:	e04d      	b.n	8002610 <HAL_ADCEx_Calibration_Start+0xb8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fea5 	bl	80022cc <ADC_Disable>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d136      	bne.n	80025fa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002590:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002594:	f023 0302 	bic.w	r3, r3, #2
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6839      	ldr	r1, [r7, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff96 	bl	80024d8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025ac:	e014      	b.n	80025d8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3301      	adds	r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_ADCEx_Calibration_Start+0xc0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d90d      	bls.n	80025d8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	f023 0312 	bic.w	r3, r3, #18
 80025c4:	f043 0210 	orr.w	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e01b      	b.n	8002610 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff94 	bl	800250a <LL_ADC_IsCalibrationOnGoing>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e2      	bne.n	80025ae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	f023 0303 	bic.w	r3, r3, #3
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80025f8:	e005      	b.n	8002606 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	f043 0210 	orr.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	0004de01 	.word	0x0004de01

0800261c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b0a1      	sub	sp, #132	; 0x84
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002636:	2302      	movs	r3, #2
 8002638:	e0e7      	b.n	800280a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002642:	2300      	movs	r3, #0
 8002644:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002646:	2300      	movs	r3, #0
 8002648:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002652:	d102      	bne.n	800265a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	e009      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d102      	bne.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002664:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	e001      	b.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0be      	b.n	800280a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff4f 	bl	8002532 <LL_ADC_REG_IsConversionOngoing>
 8002694:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff49 	bl	8002532 <LL_ADC_REG_IsConversionOngoing>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80a0 	bne.w	80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80026a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 809c 	bne.w	80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b8:	d004      	beq.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a55      	ldr	r2, [pc, #340]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80026c4:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80026c6:	e000      	b.n	80026ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80026c8:	4b56      	ldr	r3, [pc, #344]	; (8002824 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80026ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d04b      	beq.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e6:	035b      	lsls	r3, r3, #13
 80026e8:	430b      	orrs	r3, r1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f8:	d004      	beq.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a45      	ldr	r2, [pc, #276]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d10f      	bne.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002704:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002708:	f7ff fed3 	bl	80024b2 <LL_ADC_IsEnabled>
 800270c:	4604      	mov	r4, r0
 800270e:	4841      	ldr	r0, [pc, #260]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002710:	f7ff fecf 	bl	80024b2 <LL_ADC_IsEnabled>
 8002714:	4603      	mov	r3, r0
 8002716:	4323      	orrs	r3, r4
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e012      	b.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002724:	483c      	ldr	r0, [pc, #240]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002726:	f7ff fec4 	bl	80024b2 <LL_ADC_IsEnabled>
 800272a:	4604      	mov	r4, r0
 800272c:	483b      	ldr	r0, [pc, #236]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800272e:	f7ff fec0 	bl	80024b2 <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	431c      	orrs	r4, r3
 8002736:	483c      	ldr	r0, [pc, #240]	; (8002828 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002738:	f7ff febb 	bl	80024b2 <LL_ADC_IsEnabled>
 800273c:	4603      	mov	r3, r0
 800273e:	4323      	orrs	r3, r4
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d056      	beq.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800274e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002756:	f023 030f 	bic.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	6811      	ldr	r1, [r2, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	6892      	ldr	r2, [r2, #8]
 8002762:	430a      	orrs	r2, r1
 8002764:	431a      	orrs	r2, r3
 8002766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002768:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800276a:	e047      	b.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800276c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002776:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002780:	d004      	beq.n	800278c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a23      	ldr	r2, [pc, #140]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10f      	bne.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800278c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002790:	f7ff fe8f 	bl	80024b2 <LL_ADC_IsEnabled>
 8002794:	4604      	mov	r4, r0
 8002796:	481f      	ldr	r0, [pc, #124]	; (8002814 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002798:	f7ff fe8b 	bl	80024b2 <LL_ADC_IsEnabled>
 800279c:	4603      	mov	r3, r0
 800279e:	4323      	orrs	r3, r4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	e012      	b.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80027ac:	481a      	ldr	r0, [pc, #104]	; (8002818 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027ae:	f7ff fe80 	bl	80024b2 <LL_ADC_IsEnabled>
 80027b2:	4604      	mov	r4, r0
 80027b4:	4819      	ldr	r0, [pc, #100]	; (800281c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80027b6:	f7ff fe7c 	bl	80024b2 <LL_ADC_IsEnabled>
 80027ba:	4603      	mov	r3, r0
 80027bc:	431c      	orrs	r4, r3
 80027be:	481a      	ldr	r0, [pc, #104]	; (8002828 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80027c0:	f7ff fe77 	bl	80024b2 <LL_ADC_IsEnabled>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4323      	orrs	r3, r4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d012      	beq.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027de:	f023 030f 	bic.w	r3, r3, #15
 80027e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027e6:	e009      	b.n	80027fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027fa:	e000      	b.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002806:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800280a:	4618      	mov	r0, r3
 800280c:	3784      	adds	r7, #132	; 0x84
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}
 8002812:	bf00      	nop
 8002814:	50000100 	.word	0x50000100
 8002818:	50000400 	.word	0x50000400
 800281c:	50000500 	.word	0x50000500
 8002820:	50000300 	.word	0x50000300
 8002824:	50000700 	.word	0x50000700
 8002828:	50000600 	.word	0x50000600

0800282c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285e:	4a04      	ldr	r2, [pc, #16]	; (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	60d3      	str	r3, [r2, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <__NVIC_GetPriorityGrouping+0x18>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 0307 	and.w	r3, r3, #7
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	db0b      	blt.n	80028ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4907      	ldr	r1, [pc, #28]	; (80028c8 <__NVIC_EnableIRQ+0x38>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2001      	movs	r0, #1
 80028b2:	fa00 f202 	lsl.w	r2, r0, r2
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	; (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	; (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002998:	d301      	bcc.n	800299e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <SysTick_Config+0x40>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a6:	210f      	movs	r1, #15
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f7ff ff8e 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <SysTick_Config+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <SysTick_Config+0x40>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff29 	bl	800282c <__NVIC_SetPriorityGrouping>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029f0:	f7ff ff40 	bl	8002874 <__NVIC_GetPriorityGrouping>
 80029f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff ff90 	bl	8002920 <NVIC_EncodePriority>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff5f 	bl	80028cc <__NVIC_SetPriority>
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff33 	bl	8002890 <__NVIC_EnableIRQ>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffa4 	bl	8002988 <SysTick_Config>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e08d      	b.n	8002b7a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_DMA_Init+0x138>)
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d80f      	bhi.n	8002a8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <HAL_DMA_Init+0x13c>)
 8002a72:	4413      	add	r3, r2
 8002a74:	4a45      	ldr	r2, [pc, #276]	; (8002b8c <HAL_DMA_Init+0x140>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	009a      	lsls	r2, r3, #2
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_DMA_Init+0x144>)
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
 8002a88:	e00e      	b.n	8002aa8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <HAL_DMA_Init+0x148>)
 8002a92:	4413      	add	r3, r2
 8002a94:	4a3d      	ldr	r2, [pc, #244]	; (8002b8c <HAL_DMA_Init+0x140>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	009a      	lsls	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a3c      	ldr	r2, [pc, #240]	; (8002b98 <HAL_DMA_Init+0x14c>)
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f9b6 	bl	8002e6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b08:	d102      	bne.n	8002b10 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b24:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d010      	beq.n	8002b50 <HAL_DMA_Init+0x104>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d80c      	bhi.n	8002b50 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9d6 	bl	8002ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	e008      	b.n	8002b62 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40020407 	.word	0x40020407
 8002b88:	bffdfff8 	.word	0xbffdfff8
 8002b8c:	cccccccd 	.word	0xcccccccd
 8002b90:	40020000 	.word	0x40020000
 8002b94:	bffdfbf8 	.word	0xbffdfbf8
 8002b98:	40020400 	.word	0x40020400

08002b9c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_DMA_Start_IT+0x20>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e066      	b.n	8002c8a <HAL_DMA_Start_IT+0xee>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d155      	bne.n	8002c7c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f8fb 	bl	8002df0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 020e 	orr.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e00f      	b.n	8002c34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 020a 	orr.w	r2, r2, #10
 8002c32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c50:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e005      	b.n	8002c88 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
 8002c86:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d026      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x7a>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d021      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0204 	bic.w	r2, r2, #4
 8002ce4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f003 021f 	and.w	r2, r3, #31
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d071      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d0a:	e06c      	b.n	8002de6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2202      	movs	r2, #2
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02e      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d029      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020a 	bic.w	r2, r2, #10
 8002d46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d038      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d7c:	e033      	b.n	8002de6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	2208      	movs	r2, #8
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02a      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d025      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 020e 	bic.w	r2, r2, #14
 8002daa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
}
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f003 021f 	and.w	r2, r3, #31
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d108      	bne.n	8002e50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e4e:	e007      	b.n	8002e60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d802      	bhi.n	8002e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002e80:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e001      	b.n	8002e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e88:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3b08      	subs	r3, #8
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	009a      	lsls	r2, r3, #2
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002eb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40020407 	.word	0x40020407
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020820 	.word	0x40020820
 8002ee0:	cccccccd 	.word	0xcccccccd
 8002ee4:	40020880 	.word	0x40020880

08002ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	461a      	mov	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f0a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2201      	movs	r2, #1
 8002f16:	409a      	lsls	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	1000823f 	.word	0x1000823f
 8002f2c:	40020940 	.word	0x40020940

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f3e:	e15a      	b.n	80031f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 814c 	beq.w	80031f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d005      	beq.n	8002f70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d130      	bne.n	8002fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 0201 	and.w	r2, r3, #1
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d017      	beq.n	800300e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	2203      	movs	r2, #3
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d123      	bne.n	8003062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	08da      	lsrs	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3208      	adds	r2, #8
 8003022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	08da      	lsrs	r2, r3, #3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3208      	adds	r2, #8
 800305c:	6939      	ldr	r1, [r7, #16]
 800305e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0203 	and.w	r2, r3, #3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80a6 	beq.w	80031f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a4:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <HAL_GPIO_Init+0x2e4>)
 80030a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a8:	4a5a      	ldr	r2, [pc, #360]	; (8003214 <HAL_GPIO_Init+0x2e4>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6613      	str	r3, [r2, #96]	; 0x60
 80030b0:	4b58      	ldr	r3, [pc, #352]	; (8003214 <HAL_GPIO_Init+0x2e4>)
 80030b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030bc:	4a56      	ldr	r2, [pc, #344]	; (8003218 <HAL_GPIO_Init+0x2e8>)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	3302      	adds	r3, #2
 80030c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	220f      	movs	r2, #15
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030e6:	d01f      	beq.n	8003128 <HAL_GPIO_Init+0x1f8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a4c      	ldr	r2, [pc, #304]	; (800321c <HAL_GPIO_Init+0x2ec>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d019      	beq.n	8003124 <HAL_GPIO_Init+0x1f4>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a4b      	ldr	r2, [pc, #300]	; (8003220 <HAL_GPIO_Init+0x2f0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d013      	beq.n	8003120 <HAL_GPIO_Init+0x1f0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a4a      	ldr	r2, [pc, #296]	; (8003224 <HAL_GPIO_Init+0x2f4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00d      	beq.n	800311c <HAL_GPIO_Init+0x1ec>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a49      	ldr	r2, [pc, #292]	; (8003228 <HAL_GPIO_Init+0x2f8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <HAL_GPIO_Init+0x1e8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a48      	ldr	r2, [pc, #288]	; (800322c <HAL_GPIO_Init+0x2fc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_GPIO_Init+0x1e4>
 8003110:	2305      	movs	r3, #5
 8003112:	e00a      	b.n	800312a <HAL_GPIO_Init+0x1fa>
 8003114:	2306      	movs	r3, #6
 8003116:	e008      	b.n	800312a <HAL_GPIO_Init+0x1fa>
 8003118:	2304      	movs	r3, #4
 800311a:	e006      	b.n	800312a <HAL_GPIO_Init+0x1fa>
 800311c:	2303      	movs	r3, #3
 800311e:	e004      	b.n	800312a <HAL_GPIO_Init+0x1fa>
 8003120:	2302      	movs	r3, #2
 8003122:	e002      	b.n	800312a <HAL_GPIO_Init+0x1fa>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_GPIO_Init+0x1fa>
 8003128:	2300      	movs	r3, #0
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	f002 0203 	and.w	r2, r2, #3
 8003130:	0092      	lsls	r2, r2, #2
 8003132:	4093      	lsls	r3, r2
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800313a:	4937      	ldr	r1, [pc, #220]	; (8003218 <HAL_GPIO_Init+0x2e8>)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003148:	4b39      	ldr	r3, [pc, #228]	; (8003230 <HAL_GPIO_Init+0x300>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800316c:	4a30      	ldr	r2, [pc, #192]	; (8003230 <HAL_GPIO_Init+0x300>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_GPIO_Init+0x300>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003196:	4a26      	ldr	r2, [pc, #152]	; (8003230 <HAL_GPIO_Init+0x300>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_GPIO_Init+0x300>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_GPIO_Init+0x300>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_GPIO_Init+0x300>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031ea:	4a11      	ldr	r2, [pc, #68]	; (8003230 <HAL_GPIO_Init+0x300>)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3301      	adds	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	f47f ae9d 	bne.w	8002f40 <HAL_GPIO_Init+0x10>
  }
}
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40021000 	.word	0x40021000
 8003218:	40010000 	.word	0x40010000
 800321c:	48000400 	.word	0x48000400
 8003220:	48000800 	.word	0x48000800
 8003224:	48000c00 	.word	0x48000c00
 8003228:	48001000 	.word	0x48001000
 800322c:	48001400 	.word	0x48001400
 8003230:	40010400 	.word	0x40010400

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003250:	e002      	b.n	8003258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f806 	bl	8003294 <HAL_GPIO_EXTI_Callback>
  }
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d141      	bne.n	800333e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ba:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d131      	bne.n	800332c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c8:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ce:	4a46      	ldr	r2, [pc, #280]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d8:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032e0:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032e8:	4b40      	ldr	r3, [pc, #256]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2232      	movs	r2, #50	; 0x32
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	4a3f      	ldr	r2, [pc, #252]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0c9b      	lsrs	r3, r3, #18
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fe:	e002      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3b01      	subs	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003306:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d102      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f2      	bne.n	8003300 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003326:	d158      	bne.n	80033da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e057      	b.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800332c:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003332:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800333c:	e04d      	b.n	80033da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003344:	d141      	bne.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003346:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d131      	bne.n	80033b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335a:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800336c:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003372:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2232      	movs	r2, #50	; 0x32
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	0c9b      	lsrs	r3, r3, #18
 8003386:	3301      	adds	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338a:	e002      	b.n	8003392 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3b01      	subs	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d102      	bne.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f2      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b2:	d112      	bne.n	80033da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e011      	b.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033c8:	e007      	b.n	80033da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033ca:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033d2:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40007000 	.word	0x40007000
 80033ec:	20000004 	.word	0x20000004
 80033f0:	431bde83 	.word	0x431bde83

080033f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003402:	6093      	str	r3, [r2, #8]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000

08003414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e2fe      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d075      	beq.n	800351e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003432:	4b97      	ldr	r3, [pc, #604]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800343c:	4b94      	ldr	r3, [pc, #592]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d102      	bne.n	8003452 <HAL_RCC_OscConfig+0x3e>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d002      	beq.n	8003458 <HAL_RCC_OscConfig+0x44>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d10b      	bne.n	8003470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	4b8d      	ldr	r3, [pc, #564]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05b      	beq.n	800351c <HAL_RCC_OscConfig+0x108>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d157      	bne.n	800351c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e2d9      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d106      	bne.n	8003488 <HAL_RCC_OscConfig+0x74>
 800347a:	4b85      	ldr	r3, [pc, #532]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a84      	ldr	r2, [pc, #528]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e01d      	b.n	80034c4 <HAL_RCC_OscConfig+0xb0>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x98>
 8003492:	4b7f      	ldr	r3, [pc, #508]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a7e      	ldr	r2, [pc, #504]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b7c      	ldr	r3, [pc, #496]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7b      	ldr	r2, [pc, #492]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0xb0>
 80034ac:	4b78      	ldr	r3, [pc, #480]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a77      	ldr	r2, [pc, #476]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b75      	ldr	r3, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a74      	ldr	r2, [pc, #464]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fd fd2a 	bl	8000f24 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fd fd26 	bl	8000f24 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e29e      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e6:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0xc0>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fd16 	bl	8000f24 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fd fd12 	bl	8000f24 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e28a      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800350e:	4b60      	ldr	r3, [pc, #384]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0xe8>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d075      	beq.n	8003616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800352a:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003534:	4b56      	ldr	r3, [pc, #344]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d102      	bne.n	800354a <HAL_RCC_OscConfig+0x136>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d002      	beq.n	8003550 <HAL_RCC_OscConfig+0x13c>
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11f      	bne.n	8003590 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_OscConfig+0x154>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e25d      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	4b49      	ldr	r3, [pc, #292]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	4946      	ldr	r1, [pc, #280]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800357c:	4b45      	ldr	r3, [pc, #276]	; (8003694 <HAL_RCC_OscConfig+0x280>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd fc83 	bl	8000e8c <HAL_InitTick>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d043      	beq.n	8003614 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e249      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d023      	beq.n	80035e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003598:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fd fcbe 	bl	8000f24 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ac:	f7fd fcba 	bl	8000f24 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e232      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035be:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ca:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	492d      	ldr	r1, [pc, #180]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
 80035de:	e01a      	b.n	8003616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 80035e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fd fc9a 	bl	8000f24 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f4:	f7fd fc96 	bl	8000f24 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e20e      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x1e0>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d041      	beq.n	80036a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01c      	beq.n	8003664 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800362c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fd fc73 	bl	8000f24 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003642:	f7fd fc6f 	bl	8000f24 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1e7      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ef      	beq.n	8003642 <HAL_RCC_OscConfig+0x22e>
 8003662:	e020      	b.n	80036a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_RCC_OscConfig+0x27c>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fd fc56 	bl	8000f24 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800367a:	e00d      	b.n	8003698 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367c:	f7fd fc52 	bl	8000f24 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d906      	bls.n	8003698 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e1ca      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003698:	4b8c      	ldr	r3, [pc, #560]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1ea      	bne.n	800367c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80a6 	beq.w	8003800 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b4:	2300      	movs	r3, #0
 80036b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036b8:	4b84      	ldr	r3, [pc, #528]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2b4>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x2b6>
 80036c8:	2300      	movs	r3, #0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	4b7f      	ldr	r3, [pc, #508]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	4a7e      	ldr	r2, [pc, #504]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80036d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d8:	6593      	str	r3, [r2, #88]	; 0x58
 80036da:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036e6:	2301      	movs	r3, #1
 80036e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ea:	4b79      	ldr	r3, [pc, #484]	; (80038d0 <HAL_RCC_OscConfig+0x4bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d118      	bne.n	8003728 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f6:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x4bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x4bc>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003702:	f7fd fc0f 	bl	8000f24 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370a:	f7fd fc0b 	bl	8000f24 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e183      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371c:	4b6c      	ldr	r3, [pc, #432]	; (80038d0 <HAL_RCC_OscConfig+0x4bc>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d108      	bne.n	8003742 <HAL_RCC_OscConfig+0x32e>
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003740:	e024      	b.n	800378c <HAL_RCC_OscConfig+0x378>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b05      	cmp	r3, #5
 8003748:	d110      	bne.n	800376c <HAL_RCC_OscConfig+0x358>
 800374a:	4b60      	ldr	r3, [pc, #384]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	4a5e      	ldr	r2, [pc, #376]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800375a:	4b5c      	ldr	r3, [pc, #368]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	4a5a      	ldr	r2, [pc, #360]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800376a:	e00f      	b.n	800378c <HAL_RCC_OscConfig+0x378>
 800376c:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800377c:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	4a52      	ldr	r2, [pc, #328]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f023 0304 	bic.w	r3, r3, #4
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d016      	beq.n	80037c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fd fbc6 	bl	8000f24 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fd fbc2 	bl	8000f24 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e138      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b2:	4b46      	ldr	r3, [pc, #280]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ed      	beq.n	800379c <HAL_RCC_OscConfig+0x388>
 80037c0:	e015      	b.n	80037ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fd fbaf 	bl	8000f24 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fd fbab 	bl	8000f24 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e121      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ed      	bne.n	80037ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ee:	7ffb      	ldrb	r3, [r7, #31]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b35      	ldr	r3, [pc, #212]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	4a34      	ldr	r2, [pc, #208]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80037fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d03c      	beq.n	8003886 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01c      	beq.n	800384e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003814:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381a:	4a2c      	ldr	r2, [pc, #176]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fd fb7e 	bl	8000f24 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800382c:	f7fd fb7a 	bl	8000f24 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0f2      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800383e:	4b23      	ldr	r3, [pc, #140]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ef      	beq.n	800382c <HAL_RCC_OscConfig+0x418>
 800384c:	e01b      	b.n	8003886 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800384e:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003854:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fd fb61 	bl	8000f24 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003866:	f7fd fb5d 	bl	8000f24 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0d5      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 800387a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ef      	bne.n	8003866 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80c9 	beq.w	8003a22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b0c      	cmp	r3, #12
 800389a:	f000 8083 	beq.w	80039a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d15e      	bne.n	8003964 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <HAL_RCC_OscConfig+0x4b8>)
 80038ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fb37 	bl	8000f24 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b8:	e00c      	b.n	80038d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fd fb33 	bl	8000f24 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d905      	bls.n	80038d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e0ab      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d4:	4b55      	ldr	r3, [pc, #340]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ec      	bne.n	80038ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e0:	4b52      	ldr	r3, [pc, #328]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	4b52      	ldr	r3, [pc, #328]	; (8003a30 <HAL_RCC_OscConfig+0x61c>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6a11      	ldr	r1, [r2, #32]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038f0:	3a01      	subs	r2, #1
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	4311      	orrs	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038fa:	0212      	lsls	r2, r2, #8
 80038fc:	4311      	orrs	r1, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003902:	0852      	lsrs	r2, r2, #1
 8003904:	3a01      	subs	r2, #1
 8003906:	0552      	lsls	r2, r2, #21
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800390e:	0852      	lsrs	r2, r2, #1
 8003910:	3a01      	subs	r2, #1
 8003912:	0652      	lsls	r2, r2, #25
 8003914:	4311      	orrs	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800391a:	06d2      	lsls	r2, r2, #27
 800391c:	430a      	orrs	r2, r1
 800391e:	4943      	ldr	r1, [pc, #268]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 8003920:	4313      	orrs	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003924:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a40      	ldr	r2, [pc, #256]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 800392a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800392e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003930:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4a3d      	ldr	r2, [pc, #244]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 8003936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800393a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd faf2 	bl	8000f24 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd faee 	bl	8000f24 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e066      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003956:	4b35      	ldr	r3, [pc, #212]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x530>
 8003962:	e05e      	b.n	8003a22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003964:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a30      	ldr	r2, [pc, #192]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 800396a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd fad8 	bl	8000f24 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fd fad4 	bl	8000f24 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04c      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003996:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	4924      	ldr	r1, [pc, #144]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <HAL_RCC_OscConfig+0x620>)
 800399e:	4013      	ands	r3, r2
 80039a0:	60cb      	str	r3, [r1, #12]
 80039a2:	e03e      	b.n	8003a22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e039      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039b0:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCC_OscConfig+0x618>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0203 	and.w	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d12c      	bne.n	8003a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	3b01      	subs	r3, #1
 80039d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d123      	bne.n	8003a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d11b      	bne.n	8003a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d113      	bne.n	8003a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d109      	bne.n	8003a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	019f800c 	.word	0x019f800c
 8003a34:	feeefffc 	.word	0xfeeefffc

08003a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e11e      	b.n	8003c8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b91      	ldr	r3, [pc, #580]	; (8003c98 <HAL_RCC_ClockConfig+0x260>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d910      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b8e      	ldr	r3, [pc, #568]	; (8003c98 <HAL_RCC_ClockConfig+0x260>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 020f 	bic.w	r2, r3, #15
 8003a66:	498c      	ldr	r1, [pc, #560]	; (8003c98 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b8a      	ldr	r3, [pc, #552]	; (8003c98 <HAL_RCC_ClockConfig+0x260>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e106      	b.n	8003c8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d073      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d129      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a94:	4b81      	ldr	r3, [pc, #516]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0f4      	b.n	8003c8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003aa4:	f000 f99e 	bl	8003de4 <RCC_GetSysClockFreqFromPLLSource>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4a7c      	ldr	r2, [pc, #496]	; (8003ca0 <HAL_RCC_ClockConfig+0x268>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d93f      	bls.n	8003b32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ab2:	4b7a      	ldr	r3, [pc, #488]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d033      	beq.n	8003b32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d12f      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ad2:	4b72      	ldr	r3, [pc, #456]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ada:	4a70      	ldr	r2, [pc, #448]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e024      	b.n	8003b32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af0:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0c6      	b.n	8003c8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b00:	4b66      	ldr	r3, [pc, #408]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0be      	b.n	8003c8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b10:	f000 f8ce 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4a61      	ldr	r2, [pc, #388]	; (8003ca0 <HAL_RCC_ClockConfig+0x268>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d909      	bls.n	8003b32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b1e:	4b5f      	ldr	r3, [pc, #380]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b26:	4a5d      	ldr	r2, [pc, #372]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b5a      	ldr	r3, [pc, #360]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4957      	ldr	r1, [pc, #348]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fd f9ee 	bl	8000f24 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fd f9ea 	bl	8000f24 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e095      	b.n	8003c8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b4e      	ldr	r3, [pc, #312]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d023      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b8c:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a42      	ldr	r2, [pc, #264]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003b92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ba4:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bac:	4a3b      	ldr	r2, [pc, #236]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4936      	ldr	r1, [pc, #216]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d105      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bce:	4b33      	ldr	r3, [pc, #204]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	4a32      	ldr	r2, [pc, #200]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bda:	4b2f      	ldr	r3, [pc, #188]	; (8003c98 <HAL_RCC_ClockConfig+0x260>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d21d      	bcs.n	8003c24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_RCC_ClockConfig+0x260>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 020f 	bic.w	r2, r3, #15
 8003bf0:	4929      	ldr	r1, [pc, #164]	; (8003c98 <HAL_RCC_ClockConfig+0x260>)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bf8:	f7fd f994 	bl	8000f24 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c00:	f7fd f990 	bl	8000f24 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e03b      	b.n	8003c8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCC_ClockConfig+0x260>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1ed      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4917      	ldr	r1, [pc, #92]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	490f      	ldr	r1, [pc, #60]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c62:	f000 f825 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	490c      	ldr	r1, [pc, #48]	; (8003ca4 <HAL_RCC_ClockConfig+0x26c>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x270>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_RCC_ClockConfig+0x274>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd f900 	bl	8000e8c <HAL_InitTick>
 8003c8c:	4603      	mov	r3, r0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40022000 	.word	0x40022000
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	04c4b400 	.word	0x04c4b400
 8003ca4:	08005c4c 	.word	0x08005c4c
 8003ca8:	20000004 	.word	0x20000004
 8003cac:	20000008 	.word	0x20000008

08003cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d102      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cc2:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	e047      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cc8:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 030c 	and.w	r3, r3, #12
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d102      	bne.n	8003cda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cd4:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e03e      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cda:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d136      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d04:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0e:	68d2      	ldr	r2, [r2, #12]
 8003d10:	0a12      	lsrs	r2, r2, #8
 8003d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	617b      	str	r3, [r7, #20]
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d1e:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	4a10      	ldr	r2, [pc, #64]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	0a12      	lsrs	r2, r2, #8
 8003d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
      break;
 8003d36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	0e5b      	lsrs	r3, r3, #25
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	e001      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d58:	693b      	ldr	r3, [r7, #16]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	016e3600 	.word	0x016e3600

08003d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000004 	.word	0x20000004

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d90:	f7ff fff0 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4904      	ldr	r1, [pc, #16]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	08005c5c 	.word	0x08005c5c

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dbc:	f7ff ffda 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0adb      	lsrs	r3, r3, #11
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4904      	ldr	r1, [pc, #16]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	08005c5c 	.word	0x08005c5c

08003de4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dea:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d10c      	bne.n	8003e22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e08:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e12:	68d2      	ldr	r2, [r2, #12]
 8003e14:	0a12      	lsrs	r2, r2, #8
 8003e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	617b      	str	r3, [r7, #20]
    break;
 8003e20:	e00c      	b.n	8003e3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e22:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	; (8003e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e2c:	68d2      	ldr	r2, [r2, #12]
 8003e2e:	0a12      	lsrs	r2, r2, #8
 8003e30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
    break;
 8003e3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	0e5b      	lsrs	r3, r3, #25
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	3301      	adds	r3, #1
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e56:	687b      	ldr	r3, [r7, #4]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	016e3600 	.word	0x016e3600
 8003e6c:	00f42400 	.word	0x00f42400

08003e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e78:	2300      	movs	r3, #0
 8003e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8098 	beq.w	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e92:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10d      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	4a3f      	ldr	r2, [pc, #252]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eaa:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eba:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a39      	ldr	r2, [pc, #228]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec6:	f7fd f82d 	bl	8000f24 <HAL_GetTick>
 8003eca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ecc:	e009      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fd f829 	bl	8000f24 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d902      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	74fb      	strb	r3, [r7, #19]
        break;
 8003ee0:	e005      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ef      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d159      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ef4:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01e      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d019      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f10:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f1c:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f3c:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fc ffe9 	bl	8000f24 <HAL_GetTick>
 8003f52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f54:	e00b      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fc ffe5 	bl	8000f24 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d902      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0ec      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	4903      	ldr	r1, [pc, #12]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f98:	e008      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	74bb      	strb	r3, [r7, #18]
 8003f9e:	e005      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fac:	7c7b      	ldrb	r3, [r7, #17]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d105      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb2:	4ba7      	ldr	r3, [pc, #668]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	4aa6      	ldr	r2, [pc, #664]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fca:	4ba1      	ldr	r3, [pc, #644]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	f023 0203 	bic.w	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	499d      	ldr	r1, [pc, #628]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fec:	4b98      	ldr	r3, [pc, #608]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f023 020c 	bic.w	r2, r3, #12
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	4995      	ldr	r1, [pc, #596]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800400e:	4b90      	ldr	r3, [pc, #576]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	498c      	ldr	r1, [pc, #560]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004030:	4b87      	ldr	r3, [pc, #540]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	4984      	ldr	r1, [pc, #528]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004052:	4b7f      	ldr	r3, [pc, #508]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	497b      	ldr	r1, [pc, #492]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004074:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	4973      	ldr	r1, [pc, #460]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004096:	4b6e      	ldr	r3, [pc, #440]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	496a      	ldr	r1, [pc, #424]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040b8:	4b65      	ldr	r3, [pc, #404]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	4962      	ldr	r1, [pc, #392]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040da:	4b5d      	ldr	r3, [pc, #372]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	4959      	ldr	r1, [pc, #356]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040fc:	4b54      	ldr	r3, [pc, #336]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	4951      	ldr	r1, [pc, #324]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800411e:	4b4c      	ldr	r3, [pc, #304]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	4948      	ldr	r1, [pc, #288]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004140:	4b43      	ldr	r3, [pc, #268]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	4940      	ldr	r1, [pc, #256]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004160:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a3a      	ldr	r2, [pc, #232]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800416a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004178:	4b35      	ldr	r3, [pc, #212]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	4932      	ldr	r1, [pc, #200]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004198:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041b0:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	4924      	ldr	r1, [pc, #144]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ce:	d105      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d0:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a1e      	ldr	r2, [pc, #120]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	4916      	ldr	r1, [pc, #88]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004206:	d105      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a10      	ldr	r2, [pc, #64]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004212:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d019      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	4908      	ldr	r1, [pc, #32]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423e:	d109      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a02      	ldr	r2, [pc, #8]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424a:	60d3      	str	r3, [r2, #12]
 800424c:	e002      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004260:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	4926      	ldr	r1, [pc, #152]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800427e:	d105      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a20      	ldr	r2, [pc, #128]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a6:	4918      	ldr	r1, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d105      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a12      	ldr	r2, [pc, #72]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	490a      	ldr	r1, [pc, #40]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e049      	b.n	80043b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fcd8 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f000 fbac 	bl	8004aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04c      	b.n	800446e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a26      	ldr	r2, [pc, #152]	; (800447c <HAL_TIM_Base_Start+0xc0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <HAL_TIM_Base_Start+0x70>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ee:	d01d      	beq.n	800442c <HAL_TIM_Base_Start+0x70>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a22      	ldr	r2, [pc, #136]	; (8004480 <HAL_TIM_Base_Start+0xc4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <HAL_TIM_Base_Start+0x70>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a21      	ldr	r2, [pc, #132]	; (8004484 <HAL_TIM_Base_Start+0xc8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_TIM_Base_Start+0x70>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_TIM_Base_Start+0xcc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_TIM_Base_Start+0x70>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1e      	ldr	r2, [pc, #120]	; (800448c <HAL_TIM_Base_Start+0xd0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_TIM_Base_Start+0x70>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <HAL_TIM_Base_Start+0xd4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_TIM_Base_Start+0x70>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <HAL_TIM_Base_Start+0xd8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d115      	bne.n	8004458 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_TIM_Base_Start+0xdc>)
 8004434:	4013      	ands	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b06      	cmp	r3, #6
 800443c:	d015      	beq.n	800446a <HAL_TIM_Base_Start+0xae>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d011      	beq.n	800446a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004456:	e008      	b.n	800446a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e000      	b.n	800446c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40014000 	.word	0x40014000
 8004494:	40015000 	.word	0x40015000
 8004498:	00010007 	.word	0x00010007

0800449c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d001      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e054      	b.n	800455e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a26      	ldr	r2, [pc, #152]	; (800456c <HAL_TIM_Base_Start_IT+0xd0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044de:	d01d      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a22      	ldr	r2, [pc, #136]	; (8004570 <HAL_TIM_Base_Start_IT+0xd4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a21      	ldr	r2, [pc, #132]	; (8004574 <HAL_TIM_Base_Start_IT+0xd8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1f      	ldr	r2, [pc, #124]	; (8004578 <HAL_TIM_Base_Start_IT+0xdc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1e      	ldr	r2, [pc, #120]	; (800457c <HAL_TIM_Base_Start_IT+0xe0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <HAL_TIM_Base_Start_IT+0xe4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <HAL_TIM_Base_Start_IT+0xe8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d115      	bne.n	8004548 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	4b19      	ldr	r3, [pc, #100]	; (8004588 <HAL_TIM_Base_Start_IT+0xec>)
 8004524:	4013      	ands	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b06      	cmp	r3, #6
 800452c:	d015      	beq.n	800455a <HAL_TIM_Base_Start_IT+0xbe>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004534:	d011      	beq.n	800455a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004546:	e008      	b.n	800455a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e000      	b.n	800455c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40013400 	.word	0x40013400
 8004580:	40014000 	.word	0x40014000
 8004584:	40015000 	.word	0x40015000
 8004588:	00010007 	.word	0x00010007

0800458c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d020      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0202 	mvn.w	r2, #2
 80045c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa48 	bl	8004a6c <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fa3a 	bl	8004a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fa4b 	bl	8004a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d020      	beq.n	800463c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01b      	beq.n	800463c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0204 	mvn.w	r2, #4
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa22 	bl	8004a6c <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa14 	bl	8004a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fa25 	bl	8004a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d020      	beq.n	8004688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0208 	mvn.w	r2, #8
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2204      	movs	r2, #4
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9fc 	bl	8004a6c <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9ee 	bl	8004a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f9ff 	bl	8004a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d020      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01b      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0210 	mvn.w	r2, #16
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2208      	movs	r2, #8
 80046aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9d6 	bl	8004a6c <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f9c8 	bl	8004a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f9d9 	bl	8004a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0201 	mvn.w	r2, #1
 80046f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc f9a2 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800471e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fbb1 	bl	8004e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fba9 	bl	8004e9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00c      	beq.n	800476e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f993 	bl	8004a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00c      	beq.n	8004792 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f06f 0220 	mvn.w	r2, #32
 800478a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fb71 	bl	8004e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80047ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fb7d 	bl	8004eb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00c      	beq.n	80047da <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80047d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fb75 	bl	8004ec4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00c      	beq.n	80047fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80047f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fb6d 	bl	8004ed8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00c      	beq.n	8004822 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800481a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fb65 	bl	8004eec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_TIM_ConfigClockSource+0x1c>
 8004844:	2302      	movs	r3, #2
 8004846:	e0f6      	b.n	8004a36 <HAL_TIM_ConfigClockSource+0x20a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800486a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a6f      	ldr	r2, [pc, #444]	; (8004a40 <HAL_TIM_ConfigClockSource+0x214>)
 8004882:	4293      	cmp	r3, r2
 8004884:	f000 80c1 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 8004888:	4a6d      	ldr	r2, [pc, #436]	; (8004a40 <HAL_TIM_ConfigClockSource+0x214>)
 800488a:	4293      	cmp	r3, r2
 800488c:	f200 80c6 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004890:	4a6c      	ldr	r2, [pc, #432]	; (8004a44 <HAL_TIM_ConfigClockSource+0x218>)
 8004892:	4293      	cmp	r3, r2
 8004894:	f000 80b9 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 8004898:	4a6a      	ldr	r2, [pc, #424]	; (8004a44 <HAL_TIM_ConfigClockSource+0x218>)
 800489a:	4293      	cmp	r3, r2
 800489c:	f200 80be 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 80048a0:	4a69      	ldr	r2, [pc, #420]	; (8004a48 <HAL_TIM_ConfigClockSource+0x21c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	f000 80b1 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 80048a8:	4a67      	ldr	r2, [pc, #412]	; (8004a48 <HAL_TIM_ConfigClockSource+0x21c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	f200 80b6 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 80048b0:	4a66      	ldr	r2, [pc, #408]	; (8004a4c <HAL_TIM_ConfigClockSource+0x220>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	f000 80a9 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 80048b8:	4a64      	ldr	r2, [pc, #400]	; (8004a4c <HAL_TIM_ConfigClockSource+0x220>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f200 80ae 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 80048c0:	4a63      	ldr	r2, [pc, #396]	; (8004a50 <HAL_TIM_ConfigClockSource+0x224>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f000 80a1 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 80048c8:	4a61      	ldr	r2, [pc, #388]	; (8004a50 <HAL_TIM_ConfigClockSource+0x224>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f200 80a6 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 80048d0:	4a60      	ldr	r2, [pc, #384]	; (8004a54 <HAL_TIM_ConfigClockSource+0x228>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f000 8099 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 80048d8:	4a5e      	ldr	r2, [pc, #376]	; (8004a54 <HAL_TIM_ConfigClockSource+0x228>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	f200 809e 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 80048e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048e4:	f000 8091 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 80048e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048ec:	f200 8096 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 80048f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f4:	f000 8089 	beq.w	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 80048f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fc:	f200 808e 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004904:	d03e      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0x158>
 8004906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490a:	f200 8087 	bhi.w	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 800490e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004912:	f000 8086 	beq.w	8004a22 <HAL_TIM_ConfigClockSource+0x1f6>
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d87f      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 800491c:	2b70      	cmp	r3, #112	; 0x70
 800491e:	d01a      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x12a>
 8004920:	2b70      	cmp	r3, #112	; 0x70
 8004922:	d87b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004924:	2b60      	cmp	r3, #96	; 0x60
 8004926:	d050      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x19e>
 8004928:	2b60      	cmp	r3, #96	; 0x60
 800492a:	d877      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 800492c:	2b50      	cmp	r3, #80	; 0x50
 800492e:	d03c      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x17e>
 8004930:	2b50      	cmp	r3, #80	; 0x50
 8004932:	d873      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d058      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x1be>
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d86f      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d064      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 8004940:	2b30      	cmp	r3, #48	; 0x30
 8004942:	d86b      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d060      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 8004948:	2b20      	cmp	r3, #32
 800494a:	d867      	bhi.n	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d05c      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 8004950:	2b10      	cmp	r3, #16
 8004952:	d05a      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x1de>
 8004954:	e062      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004966:	f000 f9cf 	bl	8004d08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	609a      	str	r2, [r3, #8]
      break;
 8004982:	e04f      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004994:	f000 f9b8 	bl	8004d08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e03c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 f92a 	bl	8004c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2150      	movs	r1, #80	; 0x50
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f983 	bl	8004cce <TIM_ITRx_SetConfig>
      break;
 80049c8:	e02c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d6:	461a      	mov	r2, r3
 80049d8:	f000 f949 	bl	8004c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2160      	movs	r1, #96	; 0x60
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f973 	bl	8004cce <TIM_ITRx_SetConfig>
      break;
 80049e8:	e01c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 f90a 	bl	8004c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2140      	movs	r1, #64	; 0x40
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f963 	bl	8004cce <TIM_ITRx_SetConfig>
      break;
 8004a08:	e00c      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f000 f95a 	bl	8004cce <TIM_ITRx_SetConfig>
      break;
 8004a1a:	e003      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a20:	e000      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	00100070 	.word	0x00100070
 8004a44:	00100060 	.word	0x00100060
 8004a48:	00100050 	.word	0x00100050
 8004a4c:	00100040 	.word	0x00100040
 8004a50:	00100030 	.word	0x00100030
 8004a54:	00100020 	.word	0x00100020

08004a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a4c      	ldr	r2, [pc, #304]	; (8004bec <TIM_Base_SetConfig+0x144>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d017      	beq.n	8004af0 <TIM_Base_SetConfig+0x48>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac6:	d013      	beq.n	8004af0 <TIM_Base_SetConfig+0x48>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a49      	ldr	r2, [pc, #292]	; (8004bf0 <TIM_Base_SetConfig+0x148>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00f      	beq.n	8004af0 <TIM_Base_SetConfig+0x48>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a48      	ldr	r2, [pc, #288]	; (8004bf4 <TIM_Base_SetConfig+0x14c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <TIM_Base_SetConfig+0x48>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a47      	ldr	r2, [pc, #284]	; (8004bf8 <TIM_Base_SetConfig+0x150>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <TIM_Base_SetConfig+0x48>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a46      	ldr	r2, [pc, #280]	; (8004bfc <TIM_Base_SetConfig+0x154>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0x48>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a45      	ldr	r2, [pc, #276]	; (8004c00 <TIM_Base_SetConfig+0x158>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d108      	bne.n	8004b02 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a39      	ldr	r2, [pc, #228]	; (8004bec <TIM_Base_SetConfig+0x144>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d023      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d01f      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a36      	ldr	r2, [pc, #216]	; (8004bf0 <TIM_Base_SetConfig+0x148>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01b      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a35      	ldr	r2, [pc, #212]	; (8004bf4 <TIM_Base_SetConfig+0x14c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d017      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a34      	ldr	r2, [pc, #208]	; (8004bf8 <TIM_Base_SetConfig+0x150>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a33      	ldr	r2, [pc, #204]	; (8004bfc <TIM_Base_SetConfig+0x154>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00f      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a33      	ldr	r2, [pc, #204]	; (8004c04 <TIM_Base_SetConfig+0x15c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00b      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a32      	ldr	r2, [pc, #200]	; (8004c08 <TIM_Base_SetConfig+0x160>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a31      	ldr	r2, [pc, #196]	; (8004c0c <TIM_Base_SetConfig+0x164>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <TIM_Base_SetConfig+0xaa>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2c      	ldr	r2, [pc, #176]	; (8004c00 <TIM_Base_SetConfig+0x158>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d108      	bne.n	8004b64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a18      	ldr	r2, [pc, #96]	; (8004bec <TIM_Base_SetConfig+0x144>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d013      	beq.n	8004bb8 <TIM_Base_SetConfig+0x110>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <TIM_Base_SetConfig+0x154>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00f      	beq.n	8004bb8 <TIM_Base_SetConfig+0x110>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <TIM_Base_SetConfig+0x15c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_Base_SetConfig+0x110>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <TIM_Base_SetConfig+0x160>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_Base_SetConfig+0x110>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <TIM_Base_SetConfig+0x164>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_Base_SetConfig+0x110>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <TIM_Base_SetConfig+0x158>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d103      	bne.n	8004bc0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d105      	bne.n	8004bde <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	611a      	str	r2, [r3, #16]
  }
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40013400 	.word	0x40013400
 8004c00:	40015000 	.word	0x40015000
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40014400 	.word	0x40014400
 8004c0c:	40014800 	.word	0x40014800

08004c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f023 0201 	bic.w	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f023 030a 	bic.w	r3, r3, #10
 8004c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	621a      	str	r2, [r3, #32]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b087      	sub	sp, #28
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f023 0210 	bic.w	r2, r3, #16
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	031b      	lsls	r3, r3, #12
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004caa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f043 0307 	orr.w	r3, r3, #7
 8004cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	021a      	lsls	r2, r3, #8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e074      	b.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a34      	ldr	r2, [pc, #208]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a33      	ldr	r2, [pc, #204]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a31      	ldr	r2, [pc, #196]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004da4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d022      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d01d      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d018      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a11      	ldr	r2, [pc, #68]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d10c      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40015000 	.word	0x40015000
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40014000 	.word	0x40014000

08004e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e042      	b.n	8004f98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fb fe87 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2224      	movs	r2, #36	; 0x24
 8004f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fb24 	bl	8005598 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f825 	bl	8004fa0 <UART_SetConfig>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e01b      	b.n	8004f98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fba3 	bl	80056dc <UART_CheckIdleState>
 8004f96:	4603      	mov	r3, r0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa4:	b08c      	sub	sp, #48	; 0x30
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4baa      	ldr	r3, [pc, #680]	; (8005278 <UART_SetConfig+0x2d8>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a9f      	ldr	r2, [pc, #636]	; (800527c <UART_SetConfig+0x2dc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005008:	4313      	orrs	r3, r2
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005016:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005020:	430b      	orrs	r3, r1
 8005022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	f023 010f 	bic.w	r1, r3, #15
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a90      	ldr	r2, [pc, #576]	; (8005280 <UART_SetConfig+0x2e0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d125      	bne.n	8005090 <UART_SetConfig+0xf0>
 8005044:	4b8f      	ldr	r3, [pc, #572]	; (8005284 <UART_SetConfig+0x2e4>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b03      	cmp	r3, #3
 8005050:	d81a      	bhi.n	8005088 <UART_SetConfig+0xe8>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0xb8>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	08005069 	.word	0x08005069
 800505c:	08005079 	.word	0x08005079
 8005060:	08005071 	.word	0x08005071
 8005064:	08005081 	.word	0x08005081
 8005068:	2301      	movs	r3, #1
 800506a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506e:	e116      	b.n	800529e <UART_SetConfig+0x2fe>
 8005070:	2302      	movs	r3, #2
 8005072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005076:	e112      	b.n	800529e <UART_SetConfig+0x2fe>
 8005078:	2304      	movs	r3, #4
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507e:	e10e      	b.n	800529e <UART_SetConfig+0x2fe>
 8005080:	2308      	movs	r3, #8
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005086:	e10a      	b.n	800529e <UART_SetConfig+0x2fe>
 8005088:	2310      	movs	r3, #16
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800508e:	e106      	b.n	800529e <UART_SetConfig+0x2fe>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a7c      	ldr	r2, [pc, #496]	; (8005288 <UART_SetConfig+0x2e8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d138      	bne.n	800510c <UART_SetConfig+0x16c>
 800509a:	4b7a      	ldr	r3, [pc, #488]	; (8005284 <UART_SetConfig+0x2e4>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d82d      	bhi.n	8005104 <UART_SetConfig+0x164>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <UART_SetConfig+0x110>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050e5 	.word	0x080050e5
 80050b4:	08005105 	.word	0x08005105
 80050b8:	08005105 	.word	0x08005105
 80050bc:	08005105 	.word	0x08005105
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	08005105 	.word	0x08005105
 80050c8:	08005105 	.word	0x08005105
 80050cc:	08005105 	.word	0x08005105
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	08005105 	.word	0x08005105
 80050d8:	08005105 	.word	0x08005105
 80050dc:	08005105 	.word	0x08005105
 80050e0:	080050fd 	.word	0x080050fd
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ea:	e0d8      	b.n	800529e <UART_SetConfig+0x2fe>
 80050ec:	2302      	movs	r3, #2
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f2:	e0d4      	b.n	800529e <UART_SetConfig+0x2fe>
 80050f4:	2304      	movs	r3, #4
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fa:	e0d0      	b.n	800529e <UART_SetConfig+0x2fe>
 80050fc:	2308      	movs	r3, #8
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005102:	e0cc      	b.n	800529e <UART_SetConfig+0x2fe>
 8005104:	2310      	movs	r3, #16
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510a:	e0c8      	b.n	800529e <UART_SetConfig+0x2fe>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a5e      	ldr	r2, [pc, #376]	; (800528c <UART_SetConfig+0x2ec>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d125      	bne.n	8005162 <UART_SetConfig+0x1c2>
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <UART_SetConfig+0x2e4>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005120:	2b30      	cmp	r3, #48	; 0x30
 8005122:	d016      	beq.n	8005152 <UART_SetConfig+0x1b2>
 8005124:	2b30      	cmp	r3, #48	; 0x30
 8005126:	d818      	bhi.n	800515a <UART_SetConfig+0x1ba>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d00a      	beq.n	8005142 <UART_SetConfig+0x1a2>
 800512c:	2b20      	cmp	r3, #32
 800512e:	d814      	bhi.n	800515a <UART_SetConfig+0x1ba>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <UART_SetConfig+0x19a>
 8005134:	2b10      	cmp	r3, #16
 8005136:	d008      	beq.n	800514a <UART_SetConfig+0x1aa>
 8005138:	e00f      	b.n	800515a <UART_SetConfig+0x1ba>
 800513a:	2300      	movs	r3, #0
 800513c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005140:	e0ad      	b.n	800529e <UART_SetConfig+0x2fe>
 8005142:	2302      	movs	r3, #2
 8005144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005148:	e0a9      	b.n	800529e <UART_SetConfig+0x2fe>
 800514a:	2304      	movs	r3, #4
 800514c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005150:	e0a5      	b.n	800529e <UART_SetConfig+0x2fe>
 8005152:	2308      	movs	r3, #8
 8005154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005158:	e0a1      	b.n	800529e <UART_SetConfig+0x2fe>
 800515a:	2310      	movs	r3, #16
 800515c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005160:	e09d      	b.n	800529e <UART_SetConfig+0x2fe>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a4a      	ldr	r2, [pc, #296]	; (8005290 <UART_SetConfig+0x2f0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d125      	bne.n	80051b8 <UART_SetConfig+0x218>
 800516c:	4b45      	ldr	r3, [pc, #276]	; (8005284 <UART_SetConfig+0x2e4>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005176:	2bc0      	cmp	r3, #192	; 0xc0
 8005178:	d016      	beq.n	80051a8 <UART_SetConfig+0x208>
 800517a:	2bc0      	cmp	r3, #192	; 0xc0
 800517c:	d818      	bhi.n	80051b0 <UART_SetConfig+0x210>
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d00a      	beq.n	8005198 <UART_SetConfig+0x1f8>
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d814      	bhi.n	80051b0 <UART_SetConfig+0x210>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <UART_SetConfig+0x1f0>
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d008      	beq.n	80051a0 <UART_SetConfig+0x200>
 800518e:	e00f      	b.n	80051b0 <UART_SetConfig+0x210>
 8005190:	2300      	movs	r3, #0
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005196:	e082      	b.n	800529e <UART_SetConfig+0x2fe>
 8005198:	2302      	movs	r3, #2
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519e:	e07e      	b.n	800529e <UART_SetConfig+0x2fe>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a6:	e07a      	b.n	800529e <UART_SetConfig+0x2fe>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ae:	e076      	b.n	800529e <UART_SetConfig+0x2fe>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b6:	e072      	b.n	800529e <UART_SetConfig+0x2fe>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a35      	ldr	r2, [pc, #212]	; (8005294 <UART_SetConfig+0x2f4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d12a      	bne.n	8005218 <UART_SetConfig+0x278>
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <UART_SetConfig+0x2e4>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d0:	d01a      	beq.n	8005208 <UART_SetConfig+0x268>
 80051d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d6:	d81b      	bhi.n	8005210 <UART_SetConfig+0x270>
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051dc:	d00c      	beq.n	80051f8 <UART_SetConfig+0x258>
 80051de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e2:	d815      	bhi.n	8005210 <UART_SetConfig+0x270>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <UART_SetConfig+0x250>
 80051e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ec:	d008      	beq.n	8005200 <UART_SetConfig+0x260>
 80051ee:	e00f      	b.n	8005210 <UART_SetConfig+0x270>
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051f6:	e052      	b.n	800529e <UART_SetConfig+0x2fe>
 80051f8:	2302      	movs	r3, #2
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fe:	e04e      	b.n	800529e <UART_SetConfig+0x2fe>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005206:	e04a      	b.n	800529e <UART_SetConfig+0x2fe>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520e:	e046      	b.n	800529e <UART_SetConfig+0x2fe>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005216:	e042      	b.n	800529e <UART_SetConfig+0x2fe>
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a17      	ldr	r2, [pc, #92]	; (800527c <UART_SetConfig+0x2dc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d13a      	bne.n	8005298 <UART_SetConfig+0x2f8>
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <UART_SetConfig+0x2e4>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800522c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005230:	d01a      	beq.n	8005268 <UART_SetConfig+0x2c8>
 8005232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005236:	d81b      	bhi.n	8005270 <UART_SetConfig+0x2d0>
 8005238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523c:	d00c      	beq.n	8005258 <UART_SetConfig+0x2b8>
 800523e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005242:	d815      	bhi.n	8005270 <UART_SetConfig+0x2d0>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <UART_SetConfig+0x2b0>
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	d008      	beq.n	8005260 <UART_SetConfig+0x2c0>
 800524e:	e00f      	b.n	8005270 <UART_SetConfig+0x2d0>
 8005250:	2300      	movs	r3, #0
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005256:	e022      	b.n	800529e <UART_SetConfig+0x2fe>
 8005258:	2302      	movs	r3, #2
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525e:	e01e      	b.n	800529e <UART_SetConfig+0x2fe>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005266:	e01a      	b.n	800529e <UART_SetConfig+0x2fe>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526e:	e016      	b.n	800529e <UART_SetConfig+0x2fe>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005276:	e012      	b.n	800529e <UART_SetConfig+0x2fe>
 8005278:	cfff69f3 	.word	0xcfff69f3
 800527c:	40008000 	.word	0x40008000
 8005280:	40013800 	.word	0x40013800
 8005284:	40021000 	.word	0x40021000
 8005288:	40004400 	.word	0x40004400
 800528c:	40004800 	.word	0x40004800
 8005290:	40004c00 	.word	0x40004c00
 8005294:	40005000 	.word	0x40005000
 8005298:	2310      	movs	r3, #16
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4aae      	ldr	r2, [pc, #696]	; (800555c <UART_SetConfig+0x5bc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	f040 8097 	bne.w	80053d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d823      	bhi.n	80052fa <UART_SetConfig+0x35a>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x318>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052fb 	.word	0x080052fb
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052fb 	.word	0x080052fb
 80052c8:	080052eb 	.word	0x080052eb
 80052cc:	080052fb 	.word	0x080052fb
 80052d0:	080052fb 	.word	0x080052fb
 80052d4:	080052fb 	.word	0x080052fb
 80052d8:	080052f3 	.word	0x080052f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052dc:	f7fe fd56 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 80052e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052e2:	e010      	b.n	8005306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e4:	4b9e      	ldr	r3, [pc, #632]	; (8005560 <UART_SetConfig+0x5c0>)
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052e8:	e00d      	b.n	8005306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ea:	f7fe fce1 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052f0:	e009      	b.n	8005306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052f8:	e005      	b.n	8005306 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8130 	beq.w	800556e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	4a94      	ldr	r2, [pc, #592]	; (8005564 <UART_SetConfig+0x5c4>)
 8005314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005318:	461a      	mov	r2, r3
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005320:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	429a      	cmp	r2, r3
 8005330:	d305      	bcc.n	800533e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	429a      	cmp	r2, r3
 800533c:	d903      	bls.n	8005346 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005344:	e113      	b.n	800556e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2200      	movs	r2, #0
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	60fa      	str	r2, [r7, #12]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	4a84      	ldr	r2, [pc, #528]	; (8005564 <UART_SetConfig+0x5c4>)
 8005354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005358:	b29b      	uxth	r3, r3
 800535a:	2200      	movs	r2, #0
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005368:	f7fa ff56 	bl	8000218 <__aeabi_uldivmod>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	020b      	lsls	r3, r1, #8
 800537e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005382:	0202      	lsls	r2, r0, #8
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	6849      	ldr	r1, [r1, #4]
 8005388:	0849      	lsrs	r1, r1, #1
 800538a:	2000      	movs	r0, #0
 800538c:	460c      	mov	r4, r1
 800538e:	4605      	mov	r5, r0
 8005390:	eb12 0804 	adds.w	r8, r2, r4
 8005394:	eb43 0905 	adc.w	r9, r3, r5
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	469a      	mov	sl, r3
 80053a0:	4693      	mov	fp, r2
 80053a2:	4652      	mov	r2, sl
 80053a4:	465b      	mov	r3, fp
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fa ff35 	bl	8000218 <__aeabi_uldivmod>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4613      	mov	r3, r2
 80053b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053bc:	d308      	bcc.n	80053d0 <UART_SetConfig+0x430>
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c4:	d204      	bcs.n	80053d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	e0ce      	b.n	800556e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053d6:	e0ca      	b.n	800556e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e0:	d166      	bne.n	80054b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80053e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d827      	bhi.n	800543a <UART_SetConfig+0x49a>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x450>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543b 	.word	0x0800543b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800543b 	.word	0x0800543b
 8005408:	0800543b 	.word	0x0800543b
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fe fcba 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800541a:	e014      	b.n	8005446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fe fccc 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8005420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005422:	e010      	b.n	8005446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b4e      	ldr	r3, [pc, #312]	; (8005560 <UART_SetConfig+0x5c0>)
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005428:	e00d      	b.n	8005446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fe fc41 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005430:	e009      	b.n	8005446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005438:	e005      	b.n	8005446 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8090 	beq.w	800556e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	4a44      	ldr	r2, [pc, #272]	; (8005564 <UART_SetConfig+0x5c4>)
 8005454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005458:	461a      	mov	r2, r3
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005460:	005a      	lsls	r2, r3, #1
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	441a      	add	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005472:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d916      	bls.n	80054a8 <UART_SetConfig+0x508>
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005480:	d212      	bcs.n	80054a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f023 030f 	bic.w	r3, r3, #15
 800548a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	b29b      	uxth	r3, r3
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	b29a      	uxth	r2, r3
 8005498:	8bfb      	ldrh	r3, [r7, #30]
 800549a:	4313      	orrs	r3, r2
 800549c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	8bfa      	ldrh	r2, [r7, #30]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	e062      	b.n	800556e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054ae:	e05e      	b.n	800556e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d828      	bhi.n	800550a <UART_SetConfig+0x56a>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <UART_SetConfig+0x520>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	0800550b 	.word	0x0800550b
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	0800550b 	.word	0x0800550b
 80054d8:	0800550b 	.word	0x0800550b
 80054dc:	0800550b 	.word	0x0800550b
 80054e0:	08005503 	.word	0x08005503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e4:	f7fe fc52 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 80054e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ea:	e014      	b.n	8005516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ec:	f7fe fc64 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 80054f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054f2:	e010      	b.n	8005516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f4:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <UART_SetConfig+0x5c0>)
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054f8:	e00d      	b.n	8005516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fa:	f7fe fbd9 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005500:	e009      	b.n	8005516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005508:	e005      	b.n	8005516 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005514:	bf00      	nop
    }

    if (pclk != 0U)
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d028      	beq.n	800556e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	4a10      	ldr	r2, [pc, #64]	; (8005564 <UART_SetConfig+0x5c4>)
 8005522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005526:	461a      	mov	r2, r3
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	fbb3 f2f2 	udiv	r2, r3, r2
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	441a      	add	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	2b0f      	cmp	r3, #15
 8005544:	d910      	bls.n	8005568 <UART_SetConfig+0x5c8>
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554c:	d20c      	bcs.n	8005568 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	b29a      	uxth	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60da      	str	r2, [r3, #12]
 8005558:	e009      	b.n	800556e <UART_SetConfig+0x5ce>
 800555a:	bf00      	nop
 800555c:	40008000 	.word	0x40008000
 8005560:	00f42400 	.word	0x00f42400
 8005564:	08005c64 	.word	0x08005c64
      }
      else
      {
        ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2201      	movs	r2, #1
 8005572:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2201      	movs	r2, #1
 800557a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2200      	movs	r2, #0
 8005582:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800558a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800558e:	4618      	mov	r0, r3
 8005590:	3730      	adds	r7, #48	; 0x30
 8005592:	46bd      	mov	sp, r7
 8005594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01a      	beq.n	80056ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005696:	d10a      	bne.n	80056ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b098      	sub	sp, #96	; 0x60
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056ec:	f7fb fc1a 	bl	8000f24 <HAL_GetTick>
 80056f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d12f      	bne.n	8005760 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005708:	2200      	movs	r2, #0
 800570a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f88e 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d022      	beq.n	8005760 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572e:	653b      	str	r3, [r7, #80]	; 0x50
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005738:	647b      	str	r3, [r7, #68]	; 0x44
 800573a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800573e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e063      	b.n	8005828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b04      	cmp	r3, #4
 800576c:	d149      	bne.n	8005802 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800576e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005776:	2200      	movs	r2, #0
 8005778:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f857 	bl	8005830 <UART_WaitOnFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d03c      	beq.n	8005802 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	623b      	str	r3, [r7, #32]
   return(result);
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800579c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a6:	633b      	str	r3, [r7, #48]	; 0x30
 80057a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e6      	bne.n	8005788 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057da:	61fa      	str	r2, [r7, #28]
 80057dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	69b9      	ldr	r1, [r7, #24]
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	617b      	str	r3, [r7, #20]
   return(result);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e012      	b.n	8005828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3758      	adds	r7, #88	; 0x58
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005840:	e04f      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d04b      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584a:	f7fb fb6b 	bl	8000f24 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <UART_WaitOnFlagUntilTimeout+0x30>
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e04e      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d037      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	d034      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d031      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b08      	cmp	r3, #8
 800588a:	d110      	bne.n	80058ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2208      	movs	r2, #8
 8005892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f838 	bl	800590a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2208      	movs	r2, #8
 800589e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e029      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058bc:	d111      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f81e 	bl	800590a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e00f      	b.n	8005902 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d0a0      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800590a:	b480      	push	{r7}
 800590c:	b095      	sub	sp, #84	; 0x54
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005930:	643b      	str	r3, [r7, #64]	; 0x40
 8005932:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e6      	bne.n	8005912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	61fb      	str	r3, [r7, #28]
   return(result);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3308      	adds	r3, #8
 8005966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e3      	bne.n	8005944 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005980:	2b01      	cmp	r3, #1
 8005982:	d118      	bne.n	80059b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	60bb      	str	r3, [r7, #8]
   return(result);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0310 	bic.w	r3, r3, #16
 8005998:	647b      	str	r3, [r7, #68]	; 0x44
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	613b      	str	r3, [r7, #16]
   return(result);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e6      	bne.n	8005984 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059ca:	bf00      	nop
 80059cc:	3754      	adds	r7, #84	; 0x54
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_UARTEx_DisableFifoMode+0x16>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e027      	b.n	8005a3c <HAL_UARTEx_DisableFifoMode+0x66>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	; 0x24
 80059f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e02d      	b.n	8005abc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0201 	bic.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f84f 	bl	8005b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e02d      	b.n	8005b38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	; 0x24
 8005ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f811 	bl	8005b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d108      	bne.n	8005b62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b60:	e031      	b.n	8005bc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b62:	2308      	movs	r3, #8
 8005b64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b66:	2308      	movs	r3, #8
 8005b68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	0e5b      	lsrs	r3, r3, #25
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	0f5b      	lsrs	r3, r3, #29
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	7b3a      	ldrb	r2, [r7, #12]
 8005b8e:	4911      	ldr	r1, [pc, #68]	; (8005bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8005b90:	5c8a      	ldrb	r2, [r1, r2]
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b96:	7b3a      	ldrb	r2, [r7, #12]
 8005b98:	490f      	ldr	r1, [pc, #60]	; (8005bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8005b9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	7b7a      	ldrb	r2, [r7, #13]
 8005bac:	4909      	ldr	r1, [pc, #36]	; (8005bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8005bae:	5c8a      	ldrb	r2, [r1, r2]
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bb4:	7b7a      	ldrb	r2, [r7, #13]
 8005bb6:	4908      	ldr	r1, [pc, #32]	; (8005bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8005bb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	08005c7c 	.word	0x08005c7c
 8005bd8:	08005c84 	.word	0x08005c84

08005bdc <memset>:
 8005bdc:	4402      	add	r2, r0
 8005bde:	4603      	mov	r3, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d100      	bne.n	8005be6 <memset+0xa>
 8005be4:	4770      	bx	lr
 8005be6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bea:	e7f9      	b.n	8005be0 <memset+0x4>

08005bec <__libc_init_array>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4d0d      	ldr	r5, [pc, #52]	; (8005c24 <__libc_init_array+0x38>)
 8005bf0:	4c0d      	ldr	r4, [pc, #52]	; (8005c28 <__libc_init_array+0x3c>)
 8005bf2:	1b64      	subs	r4, r4, r5
 8005bf4:	10a4      	asrs	r4, r4, #2
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	42a6      	cmp	r6, r4
 8005bfa:	d109      	bne.n	8005c10 <__libc_init_array+0x24>
 8005bfc:	4d0b      	ldr	r5, [pc, #44]	; (8005c2c <__libc_init_array+0x40>)
 8005bfe:	4c0c      	ldr	r4, [pc, #48]	; (8005c30 <__libc_init_array+0x44>)
 8005c00:	f000 f818 	bl	8005c34 <_init>
 8005c04:	1b64      	subs	r4, r4, r5
 8005c06:	10a4      	asrs	r4, r4, #2
 8005c08:	2600      	movs	r6, #0
 8005c0a:	42a6      	cmp	r6, r4
 8005c0c:	d105      	bne.n	8005c1a <__libc_init_array+0x2e>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c14:	4798      	blx	r3
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7ee      	b.n	8005bf8 <__libc_init_array+0xc>
 8005c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1e:	4798      	blx	r3
 8005c20:	3601      	adds	r6, #1
 8005c22:	e7f2      	b.n	8005c0a <__libc_init_array+0x1e>
 8005c24:	08005c94 	.word	0x08005c94
 8005c28:	08005c94 	.word	0x08005c94
 8005c2c:	08005c94 	.word	0x08005c94
 8005c30:	08005c98 	.word	0x08005c98

08005c34 <_init>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr

08005c40 <_fini>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr
