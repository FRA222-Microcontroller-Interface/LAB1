
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b8c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da4  08005da4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dac  08005dac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000010  08005dc4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08005dc4  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017174  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a37  00000000  00000000  000371f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00039c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001005  00000000  00000000  0003b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017497  00000000  00000000  00063aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9ff  00000000  00000000  0007af86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005920  00000000  00000000  00189988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0018f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005d4c 	.word	0x08005d4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005d4c 	.word	0x08005d4c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd2b 	bl	8000f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82e 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa20 	bl	8000964 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f9f4 	bl	8000910 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f90c 	bl	8000744 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f954 	bl	80007d8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f86e 	bl	8000610 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000534:	f000 f99e 	bl	8000874 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0x58>)
 800053a:	f003 ffcb 	bl	80044d4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <main+0x5c>)
 8000540:	f003 ffc8 	bl	80044d4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <main+0x58>)
 8000546:	f004 f835 	bl	80045b4 <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800054a:	217f      	movs	r1, #127	; 0x7f
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <main+0x60>)
 800054e:	f002 f88f 	bl	8002670 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 300);
 8000552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000556:	4908      	ldr	r1, [pc, #32]	; (8000578 <main+0x64>)
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <main+0x60>)
 800055a:	f001 f97b 	bl	8001854 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Micros();
 800055e:	f000 fa87 	bl	8000a70 <Micros>
	  ADC_Averaged();
 8000562:	f000 faa5 	bl	8000ab0 <ADC_Averaged>
	  SetState();
 8000566:	f000 fb01 	bl	8000b6c <SetState>
	  Micros();
 800056a:	e7f8      	b.n	800055e <main+0x4a>
 800056c:	2000018c 	.word	0x2000018c
 8000570:	200001d8 	.word	0x200001d8
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20000234 	.word	0x20000234

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2238      	movs	r2, #56	; 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fbb2 	bl	8005cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 ff10 	bl	80033c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	2303      	movs	r3, #3
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005b6:	2306      	movs	r3, #6
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ba:	2355      	movs	r3, #85	; 0x55
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 ffac 	bl	800352c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005da:	f000 faf3 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 faaa 	bl	8003b50 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000602:	f000 fadf 	bl	8000bc4 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2220      	movs	r2, #32
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fb63 	bl	8005cf4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062e:	4b41      	ldr	r3, [pc, #260]	; (8000734 <MX_ADC1_Init+0x124>)
 8000630:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000636:	4b3f      	ldr	r3, [pc, #252]	; (8000734 <MX_ADC1_Init+0x124>)
 8000638:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <MX_ADC1_Init+0x124>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <MX_ADC1_Init+0x124>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <MX_ADC1_Init+0x124>)
 8000652:	2201      	movs	r2, #1
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b37      	ldr	r3, [pc, #220]	; (8000734 <MX_ADC1_Init+0x124>)
 8000658:	2204      	movs	r2, #4
 800065a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <MX_ADC1_Init+0x124>)
 800065e:	2200      	movs	r2, #0
 8000660:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <MX_ADC1_Init+0x124>)
 8000664:	2201      	movs	r2, #1
 8000666:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <MX_ADC1_Init+0x124>)
 800066a:	2203      	movs	r2, #3
 800066c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b31      	ldr	r3, [pc, #196]	; (8000734 <MX_ADC1_Init+0x124>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_ADC1_Init+0x124>)
 8000678:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC1_Init+0x124>)
 8000680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <MX_ADC1_Init+0x124>)
 8000688:	2201      	movs	r2, #1
 800068a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_ADC1_Init+0x124>)
 8000690:	2200      	movs	r2, #0
 8000692:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_ADC1_Init+0x124>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	4825      	ldr	r0, [pc, #148]	; (8000734 <MX_ADC1_Init+0x124>)
 800069e:	f000 ff1d 	bl	80014dc <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006a8:	f000 fa8c 	bl	8000bc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	481f      	ldr	r0, [pc, #124]	; (8000734 <MX_ADC1_Init+0x124>)
 80006b8:	f002 f83c 	bl	8002734 <HAL_ADCEx_MultiModeConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006c2:	f000 fa7f 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_ADC1_Init+0x128>)
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2306      	movs	r3, #6
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006ce:	2307      	movs	r3, #7
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d2:	237f      	movs	r3, #127	; 0x7f
 80006d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d6:	2304      	movs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4814      	ldr	r0, [pc, #80]	; (8000734 <MX_ADC1_Init+0x124>)
 80006e4:	f001 f9a8 	bl	8001a38 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ee:	f000 fa69 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC1_Init+0x12c>)
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f6:	230c      	movs	r3, #12
 80006f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_ADC1_Init+0x124>)
 8000700:	f001 f99a 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800070a:	f000 fa5b 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_ADC1_Init+0x130>)
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000712:	2312      	movs	r3, #18
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_ADC1_Init+0x124>)
 800071c:	f001 f98c 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000726:	f000 fa4d 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	; 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000002c 	.word	0x2000002c
 8000738:	04300002 	.word	0x04300002
 800073c:	08600004 	.word	0x08600004
 8000740:	3ef08000 	.word	0x3ef08000

08000744 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800074a:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800074c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	f004 fc46 	bl	8005018 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 fa17 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	f005 f9e1 	bl	8005b60 <HAL_UARTEx_SetTxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007a4:	f000 fa0e 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	f005 fa16 	bl	8005bdc <HAL_UARTEx_SetRxFifoThreshold>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007b6:	f000 fa05 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	f005 f997 	bl	8005aee <HAL_UARTEx_DisableFifoMode>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007c6:	f000 f9fd 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000f8 	.word	0x200000f8
 80007d4:	40008000 	.word	0x40008000

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_TIM2_Init+0x98>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_TIM2_Init+0x98>)
 8000800:	22a9      	movs	r2, #169	; 0xa9
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_TIM2_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_TIM2_Init+0x98>)
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_TIM2_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_TIM2_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081e:	4814      	ldr	r0, [pc, #80]	; (8000870 <MX_TIM2_Init+0x98>)
 8000820:	f003 fe00 	bl	8004424 <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800082a:	f000 f9cb 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_TIM2_Init+0x98>)
 800083c:	f004 f882 	bl	8004944 <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000846:	f000 f9bd 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_TIM2_Init+0x98>)
 8000858:	f004 fb02 	bl	8004e60 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000862:	f000 f9af 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000018c 	.word	0x2000018c

08000874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_TIM3_Init+0x94>)
 8000894:	4a1d      	ldr	r2, [pc, #116]	; (800090c <MX_TIM3_Init+0x98>)
 8000896:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_TIM3_Init+0x94>)
 800089a:	f244 2267 	movw	r2, #16999	; 0x4267
 800089e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_TIM3_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM3_Init+0x94>)
 80008a8:	2203      	movs	r2, #3
 80008aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_TIM3_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM3_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_TIM3_Init+0x94>)
 80008ba:	f003 fdb3 	bl	8004424 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008c4:	f000 f97e 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM3_Init+0x94>)
 80008d6:	f004 f835 	bl	8004944 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f970 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008e4:	2320      	movs	r3, #32
 80008e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM3_Init+0x94>)
 80008f2:	f004 fab5 	bl	8004e60 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f962 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001d8 	.word	0x200001d8
 800090c:	40000400 	.word	0x40000400

08000910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_DMA_Init+0x50>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <MX_DMA_Init+0x50>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6493      	str	r3, [r2, #72]	; 0x48
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_DMA_Init+0x50>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_DMA_Init+0x50>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <MX_DMA_Init+0x50>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6493      	str	r3, [r2, #72]	; 0x48
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_DMA_Init+0x50>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200b      	movs	r0, #11
 800094c:	f002 f8d5 	bl	8002afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000950:	200b      	movs	r0, #11
 8000952:	f002 f8ec 	bl	8002b2e <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_GPIO_Init+0xd4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000998:	f043 0320 	orr.w	r3, r3, #32
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f002 fcb3 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <MX_GPIO_Init+0xd8>)
 80009fe:	f002 fb23 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a02:	2320      	movs	r3, #32
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f002 fb14 	bl	8003048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2028      	movs	r0, #40	; 0x28
 8000a26:	f002 f868 	bl	8002afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2a:	2028      	movs	r0, #40	; 0x28
 8000a2c:	f002 f87f 	bl	8002b2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000800 	.word	0x48000800

08000a40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d104      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		CountOver++;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a58:	6013      	str	r3, [r2, #0]
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	2000018c 	.word	0x2000018c
 8000a6c:	20000230 	.word	0x20000230

08000a70 <Micros>:

void Micros()
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	timestamp = (CountOver * Counter_TIM2) + __HAL_TIM_GET_COUNTER(&htim2);
 8000a74:	490a      	ldr	r1, [pc, #40]	; (8000aa0 <Micros+0x30>)
 8000a76:	6809      	ldr	r1, [r1, #0]
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <Micros+0x34>)
 8000a7a:	6800      	ldr	r0, [r0, #0]
 8000a7c:	fb01 f000 	mul.w	r0, r1, r0
 8000a80:	4909      	ldr	r1, [pc, #36]	; (8000aa8 <Micros+0x38>)
 8000a82:	6809      	ldr	r1, [r1, #0]
 8000a84:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000a86:	4401      	add	r1, r0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	460a      	mov	r2, r1
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4907      	ldr	r1, [pc, #28]	; (8000aac <Micros+0x3c>)
 8000a90:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000230 	.word	0x20000230
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	2000018c 	.word	0x2000018c
 8000aac:	20000228 	.word	0x20000228

08000ab0 <ADC_Averaged>:

void ADC_Averaged()
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	e028      	b.n	8000b0e <ADC_Averaged+0x5e>
	{
		ADC_SumAPot[0] += ADCBuffer[3*i];
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <ADC_Averaged+0xac>)
 8000abe:	6819      	ldr	r1, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a25      	ldr	r2, [pc, #148]	; (8000b60 <ADC_Averaged+0xb0>)
 8000aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ace:	440b      	add	r3, r1
 8000ad0:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <ADC_Averaged+0xac>)
 8000ad2:	6013      	str	r3, [r2, #0]
		ADC_SumAPot[1] += ADCBuffer[1+(3*i)];
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <ADC_Averaged+0xac>)
 8000ad6:	6859      	ldr	r1, [r3, #4]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <ADC_Averaged+0xb0>)
 8000ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae8:	440b      	add	r3, r1
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <ADC_Averaged+0xac>)
 8000aec:	6053      	str	r3, [r2, #4]
		ADC_SumAPot[2] += ADCBuffer[2+(3*i)];
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <ADC_Averaged+0xac>)
 8000af0:	6899      	ldr	r1, [r3, #8]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	3302      	adds	r3, #2
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <ADC_Averaged+0xb0>)
 8000afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b02:	440b      	add	r3, r1
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <ADC_Averaged+0xac>)
 8000b06:	6093      	str	r3, [r2, #8]
	for (int i = 0; i < 100; i++)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b63      	cmp	r3, #99	; 0x63
 8000b12:	ddd3      	ble.n	8000abc <ADC_Averaged+0xc>
	}

	for (int i = 0; i < 3; i++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	e015      	b.n	8000b46 <ADC_Averaged+0x96>
	{
		ADC_Average[i] = ADC_SumAPot[i] / 100;
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <ADC_Averaged+0xac>)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <ADC_Averaged+0xb4>)
 8000b24:	fb82 1203 	smull	r1, r2, r2, r3
 8000b28:	1152      	asrs	r2, r2, #5
 8000b2a:	17db      	asrs	r3, r3, #31
 8000b2c:	1ad2      	subs	r2, r2, r3
 8000b2e:	490e      	ldr	r1, [pc, #56]	; (8000b68 <ADC_Averaged+0xb8>)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ADC_SumAPot[i] = 0;
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <ADC_Averaged+0xac>)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	dde6      	ble.n	8000b1a <ADC_Averaged+0x6a>
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	2000049c 	.word	0x2000049c
 8000b60:	20000234 	.word	0x20000234
 8000b64:	51eb851f 	.word	0x51eb851f
 8000b68:	20000490 	.word	0x20000490

08000b6c <SetState>:

void SetState()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
	int trimpot_1 = ADC_Average[0];
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SetState+0x50>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	607b      	str	r3, [r7, #4]

	if (trimpot_1 <= 1024) trim_Mode = 1;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7e:	dc03      	bgt.n	8000b88 <SetState+0x1c>
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <SetState+0x54>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
	else if (trimpot_1 <= 2048) trim_Mode = 2;
	else if (trimpot_1 <= 3072) trim_Mode = 3;
	else trim_Mode = 4;

}
 8000b86:	e012      	b.n	8000bae <SetState+0x42>
	else if (trimpot_1 <= 2048) trim_Mode = 2;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b8e:	dc03      	bgt.n	8000b98 <SetState+0x2c>
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <SetState+0x54>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	701a      	strb	r2, [r3, #0]
}
 8000b96:	e00a      	b.n	8000bae <SetState+0x42>
	else if (trimpot_1 <= 3072) trim_Mode = 3;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000b9e:	dc03      	bgt.n	8000ba8 <SetState+0x3c>
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <SetState+0x54>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	701a      	strb	r2, [r3, #0]
}
 8000ba6:	e002      	b.n	8000bae <SetState+0x42>
	else trim_Mode = 4;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SetState+0x54>)
 8000baa:	2204      	movs	r2, #4
 8000bac:	701a      	strb	r2, [r3, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000490 	.word	0x20000490
 8000bc0:	2000048c 	.word	0x2000048c

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6613      	str	r3, [r2, #96]	; 0x60
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c06:	f002 fc81 	bl	800350c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0a0      	sub	sp, #128	; 0x80
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	2254      	movs	r2, #84	; 0x54
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 f85b 	bl	8005cf4 <memset>
  if(hadc->Instance==ADC1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c46:	d177      	bne.n	8000d38 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c52:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 f995 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c64:	f7ff ffae 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	4a34      	ldr	r2, [pc, #208]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000c6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <HAL_ADC_MspInit+0x128>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f002 f9bf 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4819      	ldr	r0, [pc, #100]	; (8000d44 <HAL_ADC_MspInit+0x12c>)
 8000cde:	f002 f9b3 	bl	8003048 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_ADC_MspInit+0x134>)
 8000ce6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000cea:	2205      	movs	r2, #5
 8000cec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000d12:	2220      	movs	r2, #32
 8000d14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000d1e:	f001 ff21 	bl	8002b64 <HAL_DMA_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000d28:	f7ff ff4c 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000d30:	655a      	str	r2, [r3, #84]	; 0x54
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_ADC_MspInit+0x130>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3780      	adds	r7, #128	; 0x80
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	20000098 	.word	0x20000098
 8000d4c:	40020008 	.word	0x40020008

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b09e      	sub	sp, #120	; 0x78
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2254      	movs	r2, #84	; 0x54
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 ffbf 	bl	8005cf4 <memset>
  if(huart->Instance==LPUART1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_UART_MspInit+0xa8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d136      	bne.n	8000dee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d80:	2320      	movs	r3, #32
 8000d82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 f8fb 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d98:	f7ff ff14 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0xac>)
 8000d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <HAL_UART_MspInit+0xac>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_UART_MspInit+0xac>)
 8000daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0xac>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0xac>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UART_MspInit+0xac>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000dcc:	230c      	movs	r3, #12
 8000dce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f002 f92d 	bl	8003048 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3778      	adds	r7, #120	; 0x78
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40008000 	.word	0x40008000
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e10:	d114      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_TIM_Base_MspInit+0x68>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_TIM_Base_MspInit+0x68>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_TIM_Base_MspInit+0x68>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	201c      	movs	r0, #28
 8000e30:	f001 fe63 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e34:	201c      	movs	r0, #28
 8000e36:	f001 fe7a 	bl	8002b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e3a:	e010      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_TIM_Base_MspInit+0x6c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10b      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_TIM_Base_MspInit+0x68>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_TIM_Base_MspInit+0x68>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_TIM_Base_MspInit+0x68>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40000400 	.word	0x40000400

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f8ac 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <DMA1_Channel1_IRQHandler+0x10>)
 8000eca:	f001 ff6e 	bl	8002daa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000098 	.word	0x20000098

08000ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM2_IRQHandler+0x10>)
 8000ede:	f003 fbe1 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000018c 	.word	0x2000018c

08000eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ef0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ef4:	f002 fa42 	bl	800337c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f004 fed9 	bl	8005d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fadf 	bl	8000514 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   r0, =_estack
 8000f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f64:	08005db4 	.word	0x08005db4
  ldr r2, =_sbss
 8000f68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f6c:	200004ac 	.word	0x200004ac

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>

08000f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f001 fdb1 	bl	8002ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f80e 	bl	8000fa4 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e001      	b.n	8000f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f94:	f7ff fe1c 	bl	8000bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f98:	79fb      	ldrb	r3, [r7, #7]

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_InitTick+0x68>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d022      	beq.n	8000ffe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_InitTick+0x6c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_InitTick+0x68>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fdbc 	bl	8002b4a <HAL_SYSTICK_Config>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10f      	bne.n	8000ff8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	d809      	bhi.n	8000ff2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe6:	f001 fd88 	bl	8002afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_InitTick+0x70>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e007      	b.n	8001002 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e004      	b.n	8001002 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e001      	b.n	8001002 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000000c 	.word	0x2000000c
 8001010:	20000004 	.word	0x20000004
 8001014:	20000008 	.word	0x20000008

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x1c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x20>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4413      	add	r3, r2
 8001026:	4a03      	ldr	r2, [pc, #12]	; (8001034 <HAL_IncTick+0x1c>)
 8001028:	6013      	str	r3, [r2, #0]
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	200004a8 	.word	0x200004a8
 8001038:	2000000c 	.word	0x2000000c

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200004a8 	.word	0x200004a8

08001054 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	609a      	str	r2, [r3, #8]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3360      	adds	r3, #96	; 0x60
 80010ce:	461a      	mov	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <LL_ADC_SetOffset+0x44>)
 80010de:	4013      	ands	r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	4313      	orrs	r3, r2
 80010ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	03fff000 	.word	0x03fff000

08001104 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3360      	adds	r3, #96	; 0x60
 8001112:	461a      	mov	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3360      	adds	r3, #96	; 0x60
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	431a      	orrs	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001166:	b480      	push	{r7}
 8001168:	b087      	sub	sp, #28
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3360      	adds	r3, #96	; 0x60
 8001176:	461a      	mov	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3360      	adds	r3, #96	; 0x60
 80011ac:	461a      	mov	r2, r3
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	615a      	str	r2, [r3, #20]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800121e:	b480      	push	{r7}
 8001220:	b087      	sub	sp, #28
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3330      	adds	r3, #48	; 0x30
 800122e:	461a      	mov	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	4413      	add	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	211f      	movs	r1, #31
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	401a      	ands	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	0e9b      	lsrs	r3, r3, #26
 8001256:	f003 011f 	and.w	r1, r3, #31
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	431a      	orrs	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001276:	b480      	push	{r7}
 8001278:	b087      	sub	sp, #28
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3314      	adds	r3, #20
 8001286:	461a      	mov	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	0e5b      	lsrs	r3, r3, #25
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	0d1b      	lsrs	r3, r3, #20
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2107      	movs	r1, #7
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	0d1b      	lsrs	r3, r3, #20
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	431a      	orrs	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e4:	43db      	mvns	r3, r3
 80012e6:	401a      	ands	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0318 	and.w	r3, r3, #24
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012f0:	40d9      	lsrs	r1, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	400b      	ands	r3, r1
 80012f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fa:	431a      	orrs	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	0007ffff 	.word	0x0007ffff

08001314 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 031f 	and.w	r3, r3, #31
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6093      	str	r3, [r2, #8]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001368:	d101      	bne.n	800136e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001390:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013b8:	d101      	bne.n	80013be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001408:	f043 0202 	orr.w	r2, r3, #2
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <LL_ADC_IsEnabled+0x18>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <LL_ADC_IsEnabled+0x1a>
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b02      	cmp	r3, #2
 8001454:	d101      	bne.n	800145a <LL_ADC_IsDisableOngoing+0x18>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <LL_ADC_IsDisableOngoing+0x1a>
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800147c:	f043 0204 	orr.w	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d101      	bne.n	80014a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d101      	bne.n	80014ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1a9      	b.n	800184a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fb87 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff19 	bl	8001354 <LL_ADC_IsDeepPowerDownEnabled>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff feff 	bl	8001330 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff34 	bl	80013a4 <LL_ADC_IsInternalRegulatorEnabled>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d115      	bne.n	800156e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff18 	bl	800137c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800154c:	4b9c      	ldr	r3, [pc, #624]	; (80017c0 <HAL_ADC_Init+0x2e4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	4a9c      	ldr	r2, [pc, #624]	; (80017c4 <HAL_ADC_Init+0x2e8>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	099b      	lsrs	r3, r3, #6
 800155a:	3301      	adds	r3, #1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001560:	e002      	b.n	8001568 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3b01      	subs	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f9      	bne.n	8001562 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff16 	bl	80013a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10d      	bne.n	800159a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	f043 0210 	orr.w	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff76 	bl	8001490 <LL_ADC_REG_IsConversionOngoing>
 80015a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 8142 	bne.w	8001838 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 813e 	bne.w	8001838 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff23 	bl	800141c <LL_ADC_IsEnabled>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d141      	bne.n	8001660 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e4:	d004      	beq.n	80015f0 <HAL_ADC_Init+0x114>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a77      	ldr	r2, [pc, #476]	; (80017c8 <HAL_ADC_Init+0x2ec>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d10f      	bne.n	8001610 <HAL_ADC_Init+0x134>
 80015f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80015f4:	f7ff ff12 	bl	800141c <LL_ADC_IsEnabled>
 80015f8:	4604      	mov	r4, r0
 80015fa:	4873      	ldr	r0, [pc, #460]	; (80017c8 <HAL_ADC_Init+0x2ec>)
 80015fc:	f7ff ff0e 	bl	800141c <LL_ADC_IsEnabled>
 8001600:	4603      	mov	r3, r0
 8001602:	4323      	orrs	r3, r4
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	e012      	b.n	8001636 <HAL_ADC_Init+0x15a>
 8001610:	486e      	ldr	r0, [pc, #440]	; (80017cc <HAL_ADC_Init+0x2f0>)
 8001612:	f7ff ff03 	bl	800141c <LL_ADC_IsEnabled>
 8001616:	4604      	mov	r4, r0
 8001618:	486d      	ldr	r0, [pc, #436]	; (80017d0 <HAL_ADC_Init+0x2f4>)
 800161a:	f7ff feff 	bl	800141c <LL_ADC_IsEnabled>
 800161e:	4603      	mov	r3, r0
 8001620:	431c      	orrs	r4, r3
 8001622:	486c      	ldr	r0, [pc, #432]	; (80017d4 <HAL_ADC_Init+0x2f8>)
 8001624:	f7ff fefa 	bl	800141c <LL_ADC_IsEnabled>
 8001628:	4603      	mov	r3, r0
 800162a:	4323      	orrs	r3, r4
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d012      	beq.n	8001660 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001642:	d004      	beq.n	800164e <HAL_ADC_Init+0x172>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a5f      	ldr	r2, [pc, #380]	; (80017c8 <HAL_ADC_Init+0x2ec>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Init+0x176>
 800164e:	4a62      	ldr	r2, [pc, #392]	; (80017d8 <HAL_ADC_Init+0x2fc>)
 8001650:	e000      	b.n	8001654 <HAL_ADC_Init+0x178>
 8001652:	4a62      	ldr	r2, [pc, #392]	; (80017dc <HAL_ADC_Init+0x300>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f7ff fcfa 	bl	8001054 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7f5b      	ldrb	r3, [r3, #29]
 8001664:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800166a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001670:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001676:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800167e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800168a:	2b01      	cmp	r3, #1
 800168c:	d106      	bne.n	800169c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	3b01      	subs	r3, #1
 8001694:	045b      	lsls	r3, r3, #17
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d009      	beq.n	80016b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <HAL_ADC_Init+0x304>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	430b      	orrs	r3, r1
 80016ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fee5 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 80016ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d17f      	bne.n	80017f4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d17c      	bne.n	80017f4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001706:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001716:	f023 0302 	bic.w	r3, r3, #2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	430b      	orrs	r3, r1
 8001722:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d017      	beq.n	800175c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800173a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001744:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6911      	ldr	r1, [r2, #16]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800175a:	e013      	b.n	8001784 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800176a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800177c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001780:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800178a:	2b01      	cmp	r3, #1
 800178c:	d12a      	bne.n	80017e4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017a4:	4311      	orrs	r1, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017aa:	4311      	orrs	r1, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017b0:	430a      	orrs	r2, r1
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
 80017be:	e019      	b.n	80017f4 <HAL_ADC_Init+0x318>
 80017c0:	20000004 	.word	0x20000004
 80017c4:	053e2d63 	.word	0x053e2d63
 80017c8:	50000100 	.word	0x50000100
 80017cc:	50000400 	.word	0x50000400
 80017d0:	50000500 	.word	0x50000500
 80017d4:	50000600 	.word	0x50000600
 80017d8:	50000300 	.word	0x50000300
 80017dc:	50000700 	.word	0x50000700
 80017e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d10c      	bne.n	8001816 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f023 010f 	bic.w	r1, r3, #15
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	1e5a      	subs	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
 8001814:	e007      	b.n	8001826 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 020f 	bic.w	r2, r2, #15
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	65da      	str	r2, [r3, #92]	; 0x5c
 8001836:	e007      	b.n	8001848 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	f043 0210 	orr.w	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001848:	7ffb      	ldrb	r3, [r7, #31]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop

08001854 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001868:	d004      	beq.n	8001874 <HAL_ADC_Start_DMA+0x20>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5a      	ldr	r2, [pc, #360]	; (80019d8 <HAL_ADC_Start_DMA+0x184>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_ADC_Start_DMA+0x24>
 8001874:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_ADC_Start_DMA+0x188>)
 8001876:	e000      	b.n	800187a <HAL_ADC_Start_DMA+0x26>
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_ADC_Start_DMA+0x18c>)
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fd4a 	bl	8001314 <LL_ADC_GetMultimode>
 8001880:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fe02 	bl	8001490 <LL_ADC_REG_IsConversionOngoing>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 809b 	bne.w	80019ca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Start_DMA+0x4e>
 800189e:	2302      	movs	r3, #2
 80018a0:	e096      	b.n	80019d0 <HAL_ADC_Start_DMA+0x17c>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a4d      	ldr	r2, [pc, #308]	; (80019e4 <HAL_ADC_Start_DMA+0x190>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d008      	beq.n	80018c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d002      	beq.n	80018c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d17a      	bne.n	80019bc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fcf6 	bl	80022b8 <ADC_Enable>
 80018cc:	4603      	mov	r3, r0
 80018ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d16d      	bne.n	80019b2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a3a      	ldr	r2, [pc, #232]	; (80019d8 <HAL_ADC_Start_DMA+0x184>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d009      	beq.n	8001908 <HAL_ADC_Start_DMA+0xb4>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3b      	ldr	r2, [pc, #236]	; (80019e8 <HAL_ADC_Start_DMA+0x194>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d002      	beq.n	8001904 <HAL_ADC_Start_DMA+0xb0>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	e003      	b.n	800190c <HAL_ADC_Start_DMA+0xb8>
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_ADC_Start_DMA+0x198>)
 8001906:	e001      	b.n	800190c <HAL_ADC_Start_DMA+0xb8>
 8001908:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4293      	cmp	r3, r2
 8001912:	d002      	beq.n	800191a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f023 0206 	bic.w	r2, r3, #6
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	661a      	str	r2, [r3, #96]	; 0x60
 800193e:	e002      	b.n	8001946 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <HAL_ADC_Start_DMA+0x19c>)
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <HAL_ADC_Start_DMA+0x1a0>)
 8001954:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_ADC_Start_DMA+0x1a4>)
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	221c      	movs	r2, #28
 8001964:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0210 	orr.w	r2, r2, #16
 800197c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3340      	adds	r3, #64	; 0x40
 8001998:	4619      	mov	r1, r3
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f001 f989 	bl	8002cb4 <HAL_DMA_Start_IT>
 80019a2:	4603      	mov	r3, r0
 80019a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fd5c 	bl	8001468 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019b0:	e00d      	b.n	80019ce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80019ba:	e008      	b.n	80019ce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80019c8:	e001      	b.n	80019ce <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
 80019cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	50000100 	.word	0x50000100
 80019dc:	50000300 	.word	0x50000300
 80019e0:	50000700 	.word	0x50000700
 80019e4:	50000600 	.word	0x50000600
 80019e8:	50000500 	.word	0x50000500
 80019ec:	50000400 	.word	0x50000400
 80019f0:	080024a3 	.word	0x080024a3
 80019f4:	0800257b 	.word	0x0800257b
 80019f8:	08002597 	.word	0x08002597

080019fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0b6      	sub	sp, #216	; 0xd8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d102      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x24>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f000 bc13 	b.w	8002282 <HAL_ADC_ConfigChannel+0x84a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fd11 	bl	8001490 <LL_ADC_REG_IsConversionOngoing>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 83f3 	bne.w	800225c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	f7ff fbcb 	bl	800121e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fcff 	bl	8001490 <LL_ADC_REG_IsConversionOngoing>
 8001a92:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fd0b 	bl	80014b6 <LL_ADC_INJ_IsConversionOngoing>
 8001aa0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 81d9 	bne.w	8001e60 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 81d4 	bne.w	8001e60 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff fbd2 	bl	8001276 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fb79 	bl	80011d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ae0:	e00e      	b.n	8001b00 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f7ff fbc1 	bl	8001276 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fb69 	bl	80011d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d022      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b32:	f7ff fac3 	bl	80010bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f7ff fb0f 	bl	8001166 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x126>
 8001b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b5c:	e000      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x128>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	461a      	mov	r2, r3
 8001b62:	f7ff fb1b 	bl	800119c <LL_ADC_SetOffsetSaturation>
 8001b66:	e17b      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fac8 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x15c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fabd 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	0e9b      	lsrs	r3, r3, #26
 8001b8e:	f003 021f 	and.w	r2, r3, #31
 8001b92:	e01e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x19a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fab2 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e004      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x1b2>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	e018      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1e4>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e004      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fa81 	bl	8001130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2101      	movs	r1, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fa65 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x222>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fa5a 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	e01e      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x260>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fa4f 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e004      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x278>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	e018      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x2aa>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e004      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fa1e 	bl	8001130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fa02 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x2e8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2102      	movs	r1, #2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f9f7 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 021f 	and.w	r2, r3, #31
 8001d1e:	e01e      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x326>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2102      	movs	r1, #2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f9ec 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e004      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x33e>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	e016      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x36c>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e004      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f9bd 	bl	8001130 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2103      	movs	r1, #3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f9a1 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x3aa>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f996 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	e017      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x3da>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2103      	movs	r1, #3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f98b 	bl	8001104 <LL_ADC_GetOffsetChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dfc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x3f2>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	e011      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x416>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e42:	2320      	movs	r3, #32
 8001e44:	e003      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d106      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	2103      	movs	r1, #3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f968 	bl	8001130 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fad9 	bl	800141c <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 813d 	bne.w	80020ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f7ff fa24 	bl	80012cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4aa2      	ldr	r2, [pc, #648]	; (8002114 <HAL_ADC_ConfigChannel+0x6dc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	f040 812e 	bne.w	80020ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x480>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	e019      	b.n	8001eec <HAL_ADC_ConfigChannel+0x4b4>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e003      	b.n	8001edc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	bf94      	ite	ls
 8001ee6:	2301      	movls	r3, #1
 8001ee8:	2300      	movhi	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d079      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x4d4>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	069b      	lsls	r3, r3, #26
 8001f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0a:	e015      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x500>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	069b      	lsls	r3, r3, #26
 8001f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x520>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	e017      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x550>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e003      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x576>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	051b      	lsls	r3, r3, #20
 8001fac:	e018      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x5a8>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	e07e      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x5c8>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	069b      	lsls	r3, r3, #26
 8001ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffe:	e015      	b.n	800202c <HAL_ADC_ConfigChannel+0x5f4>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_ConfigChannel+0x614>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	3301      	adds	r3, #1
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	e017      	b.n	800207c <HAL_ADC_ConfigChannel+0x644>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	61fb      	str	r3, [r7, #28]
  return result;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	ea42 0103 	orr.w	r1, r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x670>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	3301      	adds	r3, #1
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	3b1e      	subs	r3, #30
 80020a0:	051b      	lsls	r3, r3, #20
 80020a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a6:	e01b      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x6a8>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	613b      	str	r3, [r7, #16]
  return result;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 021f 	and.w	r2, r3, #31
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	051b      	lsls	r3, r3, #20
 80020dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7ff f8c5 	bl	8001276 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_ADC_ConfigChannel+0x6e0>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80be 	beq.w	8002276 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002102:	d004      	beq.n	800210e <HAL_ADC_ConfigChannel+0x6d6>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_ADC_ConfigChannel+0x6e4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10a      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x6ec>
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_ADC_ConfigChannel+0x6e8>)
 8002110:	e009      	b.n	8002126 <HAL_ADC_ConfigChannel+0x6ee>
 8002112:	bf00      	nop
 8002114:	407f0000 	.word	0x407f0000
 8002118:	80080000 	.word	0x80080000
 800211c:	50000100 	.word	0x50000100
 8002120:	50000300 	.word	0x50000300
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_ADC_ConfigChannel+0x854>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe ffba 	bl	80010a0 <LL_ADC_GetCommonPathInternalCh>
 800212c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a56      	ldr	r2, [pc, #344]	; (8002290 <HAL_ADC_ConfigChannel+0x858>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x70c>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a55      	ldr	r2, [pc, #340]	; (8002294 <HAL_ADC_ConfigChannel+0x85c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d13a      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d134      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002158:	d005      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x72e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a4e      	ldr	r2, [pc, #312]	; (8002298 <HAL_ADC_ConfigChannel+0x860>)
 8002160:	4293      	cmp	r3, r2
 8002162:	f040 8085 	bne.w	8002270 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216e:	d004      	beq.n	800217a <HAL_ADC_ConfigChannel+0x742>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a49      	ldr	r2, [pc, #292]	; (800229c <HAL_ADC_ConfigChannel+0x864>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x746>
 800217a:	4a49      	ldr	r2, [pc, #292]	; (80022a0 <HAL_ADC_ConfigChannel+0x868>)
 800217c:	e000      	b.n	8002180 <HAL_ADC_ConfigChannel+0x748>
 800217e:	4a43      	ldr	r2, [pc, #268]	; (800228c <HAL_ADC_ConfigChannel+0x854>)
 8002180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002184:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f7fe ff75 	bl	800107a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002190:	4b44      	ldr	r3, [pc, #272]	; (80022a4 <HAL_ADC_ConfigChannel+0x86c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	4a44      	ldr	r2, [pc, #272]	; (80022a8 <HAL_ADC_ConfigChannel+0x870>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021aa:	e002      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f9      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021b8:	e05a      	b.n	8002270 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <HAL_ADC_ConfigChannel+0x874>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d125      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d11f      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_ADC_ConfigChannel+0x864>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d104      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x7ac>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a34      	ldr	r2, [pc, #208]	; (80022b0 <HAL_ADC_ConfigChannel+0x878>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d047      	beq.n	8002274 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021ec:	d004      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x7c0>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_ADC_ConfigChannel+0x864>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x7c4>
 80021f8:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <HAL_ADC_ConfigChannel+0x868>)
 80021fa:	e000      	b.n	80021fe <HAL_ADC_ConfigChannel+0x7c6>
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_ADC_ConfigChannel+0x854>)
 80021fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	4619      	mov	r1, r3
 8002208:	4610      	mov	r0, r2
 800220a:	f7fe ff36 	bl	800107a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800220e:	e031      	b.n	8002274 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <HAL_ADC_ConfigChannel+0x87c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d12d      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800221a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d127      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1c      	ldr	r2, [pc, #112]	; (800229c <HAL_ADC_ConfigChannel+0x864>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002238:	d004      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x80c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_ADC_ConfigChannel+0x864>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x810>
 8002244:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <HAL_ADC_ConfigChannel+0x868>)
 8002246:	e000      	b.n	800224a <HAL_ADC_ConfigChannel+0x812>
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_ADC_ConfigChannel+0x854>)
 800224a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f7fe ff10 	bl	800107a <LL_ADC_SetCommonPathInternalCh>
 800225a:	e00c      	b.n	8002276 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800226e:	e002      	b.n	8002276 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002270:	bf00      	nop
 8002272:	e000      	b.n	8002276 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002274:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800227e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002282:	4618      	mov	r0, r3
 8002284:	37d8      	adds	r7, #216	; 0xd8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	50000700 	.word	0x50000700
 8002290:	c3210000 	.word	0xc3210000
 8002294:	90c00010 	.word	0x90c00010
 8002298:	50000600 	.word	0x50000600
 800229c:	50000100 	.word	0x50000100
 80022a0:	50000300 	.word	0x50000300
 80022a4:	20000004 	.word	0x20000004
 80022a8:	053e2d63 	.word	0x053e2d63
 80022ac:	c7520000 	.word	0xc7520000
 80022b0:	50000500 	.word	0x50000500
 80022b4:	cb840000 	.word	0xcb840000

080022b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f8a7 	bl	800141c <LL_ADC_IsEnabled>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d176      	bne.n	80023c2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	4b3c      	ldr	r3, [pc, #240]	; (80023cc <ADC_Enable+0x114>)
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e062      	b.n	80023c4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f862 	bl	80013cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002310:	d004      	beq.n	800231c <ADC_Enable+0x64>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2e      	ldr	r2, [pc, #184]	; (80023d0 <ADC_Enable+0x118>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d101      	bne.n	8002320 <ADC_Enable+0x68>
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <ADC_Enable+0x11c>)
 800231e:	e000      	b.n	8002322 <ADC_Enable+0x6a>
 8002320:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <ADC_Enable+0x120>)
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe febc 	bl	80010a0 <LL_ADC_GetCommonPathInternalCh>
 8002328:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800232a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800232e:	2b00      	cmp	r3, #0
 8002330:	d013      	beq.n	800235a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <ADC_Enable+0x124>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <ADC_Enable+0x128>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800234c:	e002      	b.n	8002354 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3b01      	subs	r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f9      	bne.n	800234e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800235a:	f7fe fe6f 	bl	800103c <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002360:	e028      	b.n	80023b4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f858 	bl	800141c <LL_ADC_IsEnabled>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d104      	bne.n	800237c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f828 	bl	80013cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800237c:	f7fe fe5e 	bl	800103c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d914      	bls.n	80023b4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d00d      	beq.n	80023b4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	f043 0210 	orr.w	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e007      	b.n	80023c4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d1cf      	bne.n	8002362 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	8000003f 	.word	0x8000003f
 80023d0:	50000100 	.word	0x50000100
 80023d4:	50000300 	.word	0x50000300
 80023d8:	50000700 	.word	0x50000700
 80023dc:	20000004 	.word	0x20000004
 80023e0:	053e2d63 	.word	0x053e2d63

080023e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f826 	bl	8001442 <LL_ADC_IsDisableOngoing>
 80023f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f80d 	bl	800141c <LL_ADC_IsEnabled>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d047      	beq.n	8002498 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d144      	bne.n	8002498 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030d 	and.w	r3, r3, #13
 8002418:	2b01      	cmp	r3, #1
 800241a:	d10c      	bne.n	8002436 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe ffe7 	bl	80013f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2203      	movs	r2, #3
 800242c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800242e:	f7fe fe05 	bl	800103c <HAL_GetTick>
 8002432:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002434:	e029      	b.n	800248a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e023      	b.n	800249a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002452:	f7fe fdf3 	bl	800103c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d914      	bls.n	800248a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00d      	beq.n	800248a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	f043 0210 	orr.w	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e007      	b.n	800249a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1dc      	bne.n	8002452 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d14b      	bne.n	8002554 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d021      	beq.n	800251a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fe8c 	bl	80011f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d032      	beq.n	800254c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d12b      	bne.n	800254c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d11f      	bne.n	800254c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	65da      	str	r2, [r3, #92]	; 0x5c
 8002518:	e018      	b.n	800254c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d111      	bne.n	800254c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff fa55 	bl	80019fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002552:	e00e      	b.n	8002572 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff fa5f 	bl	8001a24 <HAL_ADC_ErrorCallback>
}
 8002566:	e004      	b.n	8002572 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff fa41 	bl	8001a10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff fa31 	bl	8001a24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <LL_ADC_IsEnabled>:
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <LL_ADC_IsEnabled+0x18>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <LL_ADC_IsEnabled+0x1a>
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_StartCalibration>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002602:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800260c:	4313      	orrs	r3, r2
 800260e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_IsCalibrationOnGoing>:
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002636:	d101      	bne.n	800263c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_ADC_REG_IsConversionOngoing>:
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d101      	bne.n	8002662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_ADCEx_Calibration_Start+0x1c>
 8002688:	2302      	movs	r3, #2
 800268a:	e04d      	b.n	8002728 <HAL_ADCEx_Calibration_Start+0xb8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff fea5 	bl	80023e4 <ADC_Disable>
 800269a:	4603      	mov	r3, r0
 800269c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d136      	bne.n	8002712 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026ac:	f023 0302 	bic.w	r3, r3, #2
 80026b0:	f043 0202 	orr.w	r2, r3, #2
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff96 	bl	80025f0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026c4:	e014      	b.n	80026f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_ADCEx_Calibration_Start+0xc0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d90d      	bls.n	80026f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	f023 0312 	bic.w	r3, r3, #18
 80026dc:	f043 0210 	orr.w	r2, r3, #16
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e01b      	b.n	8002728 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff94 	bl	8002622 <LL_ADC_IsCalibrationOnGoing>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e2      	bne.n	80026c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	f023 0303 	bic.w	r3, r3, #3
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002710:	e005      	b.n	800271e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	0004de01 	.word	0x0004de01

08002734 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b0a1      	sub	sp, #132	; 0x84
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800274e:	2302      	movs	r3, #2
 8002750:	e0e7      	b.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800275a:	2300      	movs	r3, #0
 800275c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800275e:	2300      	movs	r3, #0
 8002760:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276a:	d102      	bne.n	8002772 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800276c:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	e009      	b.n	8002786 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6e      	ldr	r2, [pc, #440]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d102      	bne.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800277c:	4b6d      	ldr	r3, [pc, #436]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	e001      	b.n	8002786 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0be      	b.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff4f 	bl	800264a <LL_ADC_REG_IsConversionOngoing>
 80027ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff49 	bl	800264a <LL_ADC_REG_IsConversionOngoing>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 80a0 	bne.w	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80027c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 809c 	bne.w	8002900 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d0:	d004      	beq.n	80027dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a55      	ldr	r2, [pc, #340]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80027dc:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80027de:	e000      	b.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80027e0:	4b56      	ldr	r3, [pc, #344]	; (800293c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80027e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d04b      	beq.n	8002884 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027fe:	035b      	lsls	r3, r3, #13
 8002800:	430b      	orrs	r3, r1
 8002802:	431a      	orrs	r2, r3
 8002804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002806:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002810:	d004      	beq.n	800281c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a45      	ldr	r2, [pc, #276]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d10f      	bne.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800281c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002820:	f7ff fed3 	bl	80025ca <LL_ADC_IsEnabled>
 8002824:	4604      	mov	r4, r0
 8002826:	4841      	ldr	r0, [pc, #260]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002828:	f7ff fecf 	bl	80025ca <LL_ADC_IsEnabled>
 800282c:	4603      	mov	r3, r0
 800282e:	4323      	orrs	r3, r4
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e012      	b.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800283c:	483c      	ldr	r0, [pc, #240]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800283e:	f7ff fec4 	bl	80025ca <LL_ADC_IsEnabled>
 8002842:	4604      	mov	r4, r0
 8002844:	483b      	ldr	r0, [pc, #236]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002846:	f7ff fec0 	bl	80025ca <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	431c      	orrs	r4, r3
 800284e:	483c      	ldr	r0, [pc, #240]	; (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002850:	f7ff febb 	bl	80025ca <LL_ADC_IsEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	4323      	orrs	r3, r4
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d056      	beq.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800286e:	f023 030f 	bic.w	r3, r3, #15
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	6811      	ldr	r1, [r2, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6892      	ldr	r2, [r2, #8]
 800287a:	430a      	orrs	r2, r1
 800287c:	431a      	orrs	r2, r3
 800287e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002880:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002882:	e047      	b.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002898:	d004      	beq.n	80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a23      	ldr	r2, [pc, #140]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10f      	bne.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80028a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028a8:	f7ff fe8f 	bl	80025ca <LL_ADC_IsEnabled>
 80028ac:	4604      	mov	r4, r0
 80028ae:	481f      	ldr	r0, [pc, #124]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028b0:	f7ff fe8b 	bl	80025ca <LL_ADC_IsEnabled>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4323      	orrs	r3, r4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e012      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80028c4:	481a      	ldr	r0, [pc, #104]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028c6:	f7ff fe80 	bl	80025ca <LL_ADC_IsEnabled>
 80028ca:	4604      	mov	r4, r0
 80028cc:	4819      	ldr	r0, [pc, #100]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028ce:	f7ff fe7c 	bl	80025ca <LL_ADC_IsEnabled>
 80028d2:	4603      	mov	r3, r0
 80028d4:	431c      	orrs	r4, r3
 80028d6:	481a      	ldr	r0, [pc, #104]	; (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028d8:	f7ff fe77 	bl	80025ca <LL_ADC_IsEnabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	4323      	orrs	r3, r4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028f6:	f023 030f 	bic.w	r3, r3, #15
 80028fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028fe:	e009      	b.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002912:	e000      	b.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002914:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800291e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002922:	4618      	mov	r0, r3
 8002924:	3784      	adds	r7, #132	; 0x84
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	bf00      	nop
 800292c:	50000100 	.word	0x50000100
 8002930:	50000400 	.word	0x50000400
 8002934:	50000500 	.word	0x50000500
 8002938:	50000300 	.word	0x50000300
 800293c:	50000700 	.word	0x50000700
 8002940:	50000600 	.word	0x50000600

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0b      	blt.n	80029d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4907      	ldr	r1, [pc, #28]	; (80029e0 <__NVIC_EnableIRQ+0x38>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db0a      	blt.n	8002a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	490c      	ldr	r1, [pc, #48]	; (8002a30 <__NVIC_SetPriority+0x4c>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	440b      	add	r3, r1
 8002a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a0c:	e00a      	b.n	8002a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4908      	ldr	r1, [pc, #32]	; (8002a34 <__NVIC_SetPriority+0x50>)
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	0112      	lsls	r2, r2, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	440b      	add	r3, r1
 8002a22:	761a      	strb	r2, [r3, #24]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000e100 	.word	0xe000e100
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f1c3 0307 	rsb	r3, r3, #7
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	bf28      	it	cs
 8002a56:	2304      	movcs	r3, #4
 8002a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d902      	bls.n	8002a68 <NVIC_EncodePriority+0x30>
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3b03      	subs	r3, #3
 8002a66:	e000      	b.n	8002a6a <NVIC_EncodePriority+0x32>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43da      	mvns	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43d9      	mvns	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	4313      	orrs	r3, r2
         );
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab0:	d301      	bcc.n	8002ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00f      	b.n	8002ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <SysTick_Config+0x40>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002abe:	210f      	movs	r1, #15
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f7ff ff8e 	bl	80029e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <SysTick_Config+0x40>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <SysTick_Config+0x40>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff29 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b08:	f7ff ff40 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7ff ff90 	bl	8002a38 <NVIC_EncodePriority>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff5f 	bl	80029e4 <__NVIC_SetPriority>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff33 	bl	80029a8 <__NVIC_EnableIRQ>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff ffa4 	bl	8002aa0 <SysTick_Config>
 8002b58:	4603      	mov	r3, r0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e08d      	b.n	8002c92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_DMA_Init+0x138>)
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d80f      	bhi.n	8002ba2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <HAL_DMA_Init+0x13c>)
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a45      	ldr	r2, [pc, #276]	; (8002ca4 <HAL_DMA_Init+0x140>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a42      	ldr	r2, [pc, #264]	; (8002ca8 <HAL_DMA_Init+0x144>)
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba0:	e00e      	b.n	8002bc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b40      	ldr	r3, [pc, #256]	; (8002cac <HAL_DMA_Init+0x148>)
 8002baa:	4413      	add	r3, r2
 8002bac:	4a3d      	ldr	r2, [pc, #244]	; (8002ca4 <HAL_DMA_Init+0x140>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	009a      	lsls	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a3c      	ldr	r2, [pc, #240]	; (8002cb0 <HAL_DMA_Init+0x14c>)
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9b6 	bl	8002f84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c20:	d102      	bne.n	8002c28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d010      	beq.n	8002c68 <HAL_DMA_Init+0x104>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d80c      	bhi.n	8002c68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9d6 	bl	8003000 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	e008      	b.n	8002c7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40020407 	.word	0x40020407
 8002ca0:	bffdfff8 	.word	0xbffdfff8
 8002ca4:	cccccccd 	.word	0xcccccccd
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	bffdfbf8 	.word	0xbffdfbf8
 8002cb0:	40020400 	.word	0x40020400

08002cb4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Start_IT+0x20>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e066      	b.n	8002da2 <HAL_DMA_Start_IT+0xee>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d155      	bne.n	8002d94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f8fb 	bl	8002f08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 020e 	orr.w	r2, r2, #14
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e00f      	b.n	8002d4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0204 	bic.w	r2, r2, #4
 8002d3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 020a 	orr.w	r2, r2, #10
 8002d4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d007      	beq.n	8002d6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e005      	b.n	8002da0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2204      	movs	r2, #4
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d026      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x7a>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d021      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f003 021f 	and.w	r2, r3, #31
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d071      	beq.n	8002efe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e22:	e06c      	b.n	8002efe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d02e      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d029      	beq.n	8002e96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 020a 	bic.w	r2, r2, #10
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2102      	movs	r1, #2
 8002e76:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d038      	beq.n	8002efe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e94:	e033      	b.n	8002efe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d02a      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d025      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020e 	bic.w	r2, r2, #14
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
}
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f003 021f 	and.w	r2, r3, #31
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d108      	bne.n	8002f68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f66:	e007      	b.n	8002f78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d802      	bhi.n	8002f9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e001      	b.n	8002fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002fa0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3b08      	subs	r3, #8
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40020407 	.word	0x40020407
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020820 	.word	0x40020820
 8002ff8:	cccccccd 	.word	0xcccccccd
 8002ffc:	40020880 	.word	0x40020880

08003000 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a08      	ldr	r2, [pc, #32]	; (8003044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003022:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3b01      	subs	r3, #1
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	2201      	movs	r2, #1
 800302e:	409a      	lsls	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	1000823f 	.word	0x1000823f
 8003044:	40020940 	.word	0x40020940

08003048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003056:	e15a      	b.n	800330e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	4013      	ands	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 814c 	beq.w	8003308 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d005      	beq.n	8003088 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003084:	2b02      	cmp	r3, #2
 8003086:	d130      	bne.n	80030ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030be:	2201      	movs	r2, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 0201 	and.w	r2, r3, #1
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d017      	beq.n	8003126 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d123      	bne.n	800317a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3208      	adds	r2, #8
 8003174:	6939      	ldr	r1, [r7, #16]
 8003176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0203 	and.w	r2, r3, #3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80a6 	beq.w	8003308 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031bc:	4b5b      	ldr	r3, [pc, #364]	; (800332c <HAL_GPIO_Init+0x2e4>)
 80031be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c0:	4a5a      	ldr	r2, [pc, #360]	; (800332c <HAL_GPIO_Init+0x2e4>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6613      	str	r3, [r2, #96]	; 0x60
 80031c8:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_GPIO_Init+0x2e4>)
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d4:	4a56      	ldr	r2, [pc, #344]	; (8003330 <HAL_GPIO_Init+0x2e8>)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	3302      	adds	r3, #2
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	220f      	movs	r2, #15
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031fe:	d01f      	beq.n	8003240 <HAL_GPIO_Init+0x1f8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <HAL_GPIO_Init+0x2ec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d019      	beq.n	800323c <HAL_GPIO_Init+0x1f4>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a4b      	ldr	r2, [pc, #300]	; (8003338 <HAL_GPIO_Init+0x2f0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_GPIO_Init+0x1f0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a4a      	ldr	r2, [pc, #296]	; (800333c <HAL_GPIO_Init+0x2f4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00d      	beq.n	8003234 <HAL_GPIO_Init+0x1ec>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a49      	ldr	r2, [pc, #292]	; (8003340 <HAL_GPIO_Init+0x2f8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_Init+0x1e8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a48      	ldr	r2, [pc, #288]	; (8003344 <HAL_GPIO_Init+0x2fc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_GPIO_Init+0x1e4>
 8003228:	2305      	movs	r3, #5
 800322a:	e00a      	b.n	8003242 <HAL_GPIO_Init+0x1fa>
 800322c:	2306      	movs	r3, #6
 800322e:	e008      	b.n	8003242 <HAL_GPIO_Init+0x1fa>
 8003230:	2304      	movs	r3, #4
 8003232:	e006      	b.n	8003242 <HAL_GPIO_Init+0x1fa>
 8003234:	2303      	movs	r3, #3
 8003236:	e004      	b.n	8003242 <HAL_GPIO_Init+0x1fa>
 8003238:	2302      	movs	r3, #2
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0x1fa>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_GPIO_Init+0x1fa>
 8003240:	2300      	movs	r3, #0
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	f002 0203 	and.w	r2, r2, #3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4093      	lsls	r3, r2
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003252:	4937      	ldr	r1, [pc, #220]	; (8003330 <HAL_GPIO_Init+0x2e8>)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003260:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_GPIO_Init+0x300>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003284:	4a30      	ldr	r2, [pc, #192]	; (8003348 <HAL_GPIO_Init+0x300>)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800328a:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <HAL_GPIO_Init+0x300>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ae:	4a26      	ldr	r2, [pc, #152]	; (8003348 <HAL_GPIO_Init+0x300>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032b4:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_GPIO_Init+0x300>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <HAL_GPIO_Init+0x300>)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_GPIO_Init+0x300>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003302:	4a11      	ldr	r2, [pc, #68]	; (8003348 <HAL_GPIO_Init+0x300>)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f ae9d 	bne.w	8003058 <HAL_GPIO_Init+0x10>
  }
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40021000 	.word	0x40021000
 8003330:	40010000 	.word	0x40010000
 8003334:	48000400 	.word	0x48000400
 8003338:	48000800 	.word	0x48000800
 800333c:	48000c00 	.word	0x48000c00
 8003340:	48001000 	.word	0x48001000
 8003344:	48001400 	.word	0x48001400
 8003348:	40010400 	.word	0x40010400

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003368:	e002      	b.n	8003370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d006      	beq.n	80033a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f806 	bl	80033ac <HAL_GPIO_EXTI_Callback>
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d141      	bne.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033d2:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d131      	bne.n	8003444 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033e0:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e6:	4a46      	ldr	r2, [pc, #280]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033f8:	4a41      	ldr	r2, [pc, #260]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2232      	movs	r2, #50	; 0x32
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	4a3f      	ldr	r2, [pc, #252]	; (8003508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	0c9b      	lsrs	r3, r3, #18
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003416:	e002      	b.n	800341e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3b01      	subs	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800341e:	4b38      	ldr	r3, [pc, #224]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342a:	d102      	bne.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f2      	bne.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003432:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343e:	d158      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e057      	b.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003444:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800344a:	4a2d      	ldr	r2, [pc, #180]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003454:	e04d      	b.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d141      	bne.n	80034e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346a:	d131      	bne.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003472:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003484:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800348a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2232      	movs	r2, #50	; 0x32
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	0c9b      	lsrs	r3, r3, #18
 800349e:	3301      	adds	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a2:	e002      	b.n	80034aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d102      	bne.n	80034be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f2      	bne.n	80034a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ca:	d112      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e011      	b.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034e0:	e007      	b.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ea:	4a05      	ldr	r2, [pc, #20]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40007000 	.word	0x40007000
 8003504:	20000004 	.word	0x20000004
 8003508:	431bde83 	.word	0x431bde83

0800350c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351a:	6093      	str	r3, [r2, #8]
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40007000 	.word	0x40007000

0800352c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e2fe      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d075      	beq.n	8003636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354a:	4b97      	ldr	r3, [pc, #604]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003554:	4b94      	ldr	r3, [pc, #592]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d102      	bne.n	800356a <HAL_RCC_OscConfig+0x3e>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d002      	beq.n	8003570 <HAL_RCC_OscConfig+0x44>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d10b      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4b8d      	ldr	r3, [pc, #564]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05b      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d157      	bne.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e2d9      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x74>
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a84      	ldr	r2, [pc, #528]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b7f      	ldr	r3, [pc, #508]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a7e      	ldr	r2, [pc, #504]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7b      	ldr	r2, [pc, #492]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035c4:	4b78      	ldr	r3, [pc, #480]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a77      	ldr	r2, [pc, #476]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b75      	ldr	r3, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a74      	ldr	r2, [pc, #464]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fd fd2a 	bl	800103c <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fd fd26 	bl	800103c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e29e      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fe:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xc0>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd fd16 	bl	800103c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd fd12 	bl	800103c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e28a      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003626:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d075      	beq.n	800372e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003642:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800364c:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d102      	bne.n	8003662 <HAL_RCC_OscConfig+0x136>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d002      	beq.n	8003668 <HAL_RCC_OscConfig+0x13c>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11f      	bne.n	80036a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003668:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_OscConfig+0x154>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e25d      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	4946      	ldr	r1, [pc, #280]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <HAL_RCC_OscConfig+0x280>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd fc83 	bl	8000fa4 <HAL_InitTick>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d043      	beq.n	800372c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e249      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d023      	beq.n	80036f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3c      	ldr	r2, [pc, #240]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd fcbe 	bl	800103c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fd fcba 	bl	800103c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e232      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	492d      	ldr	r1, [pc, #180]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
 80036f6:	e01a      	b.n	800372e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2a      	ldr	r2, [pc, #168]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 80036fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd fc9a 	bl	800103c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370c:	f7fd fc96 	bl	800103c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e20e      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x1e0>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d041      	beq.n	80037be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01c      	beq.n	800377c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fd fc73 	bl	800103c <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375a:	f7fd fc6f 	bl	800103c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e1e7      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 800376e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ef      	beq.n	800375a <HAL_RCC_OscConfig+0x22e>
 800377a:	e020      	b.n	80037be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <HAL_RCC_OscConfig+0x27c>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fd fc56 	bl	800103c <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003792:	e00d      	b.n	80037b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003794:	f7fd fc52 	bl	800103c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d906      	bls.n	80037b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1ca      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b0:	4b8c      	ldr	r3, [pc, #560]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1ea      	bne.n	8003794 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80a6 	beq.w	8003918 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037cc:	2300      	movs	r3, #0
 80037ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037d0:	4b84      	ldr	r3, [pc, #528]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2b4>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x2b6>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	4b7f      	ldr	r3, [pc, #508]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	4a7e      	ldr	r2, [pc, #504]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f0:	6593      	str	r3, [r2, #88]	; 0x58
 80037f2:	4b7c      	ldr	r3, [pc, #496]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037fe:	2301      	movs	r3, #1
 8003800:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003802:	4b79      	ldr	r3, [pc, #484]	; (80039e8 <HAL_RCC_OscConfig+0x4bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d118      	bne.n	8003840 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380e:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x4bc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a75      	ldr	r2, [pc, #468]	; (80039e8 <HAL_RCC_OscConfig+0x4bc>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381a:	f7fd fc0f 	bl	800103c <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003822:	f7fd fc0b 	bl	800103c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e183      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003834:	4b6c      	ldr	r3, [pc, #432]	; (80039e8 <HAL_RCC_OscConfig+0x4bc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d108      	bne.n	800385a <HAL_RCC_OscConfig+0x32e>
 8003848:	4b66      	ldr	r3, [pc, #408]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	4a65      	ldr	r2, [pc, #404]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003858:	e024      	b.n	80038a4 <HAL_RCC_OscConfig+0x378>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d110      	bne.n	8003884 <HAL_RCC_OscConfig+0x358>
 8003862:	4b60      	ldr	r3, [pc, #384]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	4a5e      	ldr	r2, [pc, #376]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 800386a:	f043 0304 	orr.w	r3, r3, #4
 800386e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003872:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	4a5a      	ldr	r2, [pc, #360]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003882:	e00f      	b.n	80038a4 <HAL_RCC_OscConfig+0x378>
 8003884:	4b57      	ldr	r3, [pc, #348]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d016      	beq.n	80038da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fd fbc6 	bl	800103c <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd fbc2 	bl	800103c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e138      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ca:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ed      	beq.n	80038b4 <HAL_RCC_OscConfig+0x388>
 80038d8:	e015      	b.n	8003906 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd fbaf 	bl	800103c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd fbab 	bl	800103c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e121      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f8:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ed      	bne.n	80038e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003906:	7ffb      	ldrb	r3, [r7, #31]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390c:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003916:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d03c      	beq.n	800399e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01c      	beq.n	8003966 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 800392e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003932:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fd fb7e 	bl	800103c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003944:	f7fd fb7a 	bl	800103c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0f2      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ef      	beq.n	8003944 <HAL_RCC_OscConfig+0x418>
 8003964:	e01b      	b.n	800399e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003966:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800396c:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fd fb61 	bl	800103c <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800397e:	f7fd fb5d 	bl	800103c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e0d5      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003990:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 8003992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1ef      	bne.n	800397e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80c9 	beq.w	8003b3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039a8:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	f000 8083 	beq.w	8003abc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d15e      	bne.n	8003a7c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <HAL_RCC_OscConfig+0x4b8>)
 80039c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fd fb37 	bl	800103c <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d0:	e00c      	b.n	80039ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fd fb33 	bl	800103c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d905      	bls.n	80039ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0ab      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ec:	4b55      	ldr	r3, [pc, #340]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1ec      	bne.n	80039d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f8:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	4b52      	ldr	r3, [pc, #328]	; (8003b48 <HAL_RCC_OscConfig+0x61c>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6a11      	ldr	r1, [r2, #32]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	0112      	lsls	r2, r2, #4
 8003a0c:	4311      	orrs	r1, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a12:	0212      	lsls	r2, r2, #8
 8003a14:	4311      	orrs	r1, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a1a:	0852      	lsrs	r2, r2, #1
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	0552      	lsls	r2, r2, #21
 8003a20:	4311      	orrs	r1, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a26:	0852      	lsrs	r2, r2, #1
 8003a28:	3a01      	subs	r2, #1
 8003a2a:	0652      	lsls	r2, r2, #25
 8003a2c:	4311      	orrs	r1, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a32:	06d2      	lsls	r2, r2, #27
 8003a34:	430a      	orrs	r2, r1
 8003a36:	4943      	ldr	r1, [pc, #268]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a3c:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a40      	ldr	r2, [pc, #256]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a48:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a3d      	ldr	r2, [pc, #244]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd faf2 	bl	800103c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5c:	f7fd faee 	bl	800103c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e066      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6e:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x530>
 8003a7a:	e05e      	b.n	8003b3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7c:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd fad8 	bl	800103c <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd fad4 	bl	800103c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e04c      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa2:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003aae:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	4924      	ldr	r1, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <HAL_RCC_OscConfig+0x620>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	60cb      	str	r3, [r1, #12]
 8003aba:	e03e      	b.n	8003b3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e039      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_RCC_OscConfig+0x618>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f003 0203 	and.w	r2, r3, #3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d12c      	bne.n	8003b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d123      	bne.n	8003b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d11b      	bne.n	8003b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d113      	bne.n	8003b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d109      	bne.n	8003b36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d001      	beq.n	8003b3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	019f800c 	.word	0x019f800c
 8003b4c:	feeefffc 	.word	0xfeeefffc

08003b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e11e      	b.n	8003da6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b91      	ldr	r3, [pc, #580]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d910      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b8e      	ldr	r3, [pc, #568]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 020f 	bic.w	r2, r3, #15
 8003b7e:	498c      	ldr	r1, [pc, #560]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b8a      	ldr	r3, [pc, #552]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e106      	b.n	8003da6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d073      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d129      	bne.n	8003c00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bac:	4b81      	ldr	r3, [pc, #516]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0f4      	b.n	8003da6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bbc:	f000 f99e 	bl	8003efc <RCC_GetSysClockFreqFromPLLSource>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4a7c      	ldr	r2, [pc, #496]	; (8003db8 <HAL_RCC_ClockConfig+0x268>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d93f      	bls.n	8003c4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bca:	4b7a      	ldr	r3, [pc, #488]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d033      	beq.n	8003c4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d12f      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bea:	4b72      	ldr	r3, [pc, #456]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf2:	4a70      	ldr	r2, [pc, #448]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e024      	b.n	8003c4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c08:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0c6      	b.n	8003da6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c18:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0be      	b.n	8003da6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c28:	f000 f8ce 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4a61      	ldr	r2, [pc, #388]	; (8003db8 <HAL_RCC_ClockConfig+0x268>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d909      	bls.n	8003c4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c36:	4b5f      	ldr	r3, [pc, #380]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c3e:	4a5d      	ldr	r2, [pc, #372]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c4a:	4b5a      	ldr	r3, [pc, #360]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4957      	ldr	r1, [pc, #348]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fd f9ee 	bl	800103c <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f7fd f9ea 	bl	800103c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e095      	b.n	8003da6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 020c 	and.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1eb      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d023      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca4:	4b43      	ldr	r3, [pc, #268]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a42      	ldr	r2, [pc, #264]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003cbc:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cc4:	4a3b      	ldr	r2, [pc, #236]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4936      	ldr	r1, [pc, #216]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d105      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ce6:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	4a32      	ldr	r2, [pc, #200]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf2:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d21d      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 020f 	bic.w	r2, r3, #15
 8003d08:	4929      	ldr	r1, [pc, #164]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d10:	f7fd f994 	bl	800103c <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fd f990 	bl	800103c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e03b      	b.n	8003da6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1ed      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4917      	ldr	r1, [pc, #92]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490f      	ldr	r1, [pc, #60]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d7a:	f000 f825 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	490c      	ldr	r1, [pc, #48]	; (8003dbc <HAL_RCC_ClockConfig+0x26c>)
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	fa22 f303 	lsr.w	r3, r2, r3
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <HAL_RCC_ClockConfig+0x270>)
 8003d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <HAL_RCC_ClockConfig+0x274>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd f900 	bl	8000fa4 <HAL_InitTick>
 8003da4:	4603      	mov	r3, r0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40022000 	.word	0x40022000
 8003db4:	40021000 	.word	0x40021000
 8003db8:	04c4b400 	.word	0x04c4b400
 8003dbc:	08005d64 	.word	0x08005d64
 8003dc0:	20000004 	.word	0x20000004
 8003dc4:	20000008 	.word	0x20000008

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003dce:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d102      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dda:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	e047      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d102      	bne.n	8003df2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dec:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	e03e      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003df2:	4b23      	ldr	r3, [pc, #140]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d136      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3301      	adds	r3, #1
 8003e14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d10c      	bne.n	8003e36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e1c:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e26:	68d2      	ldr	r2, [r2, #12]
 8003e28:	0a12      	lsrs	r2, r2, #8
 8003e2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	617b      	str	r3, [r7, #20]
      break;
 8003e34:	e00c      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e36:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	4a10      	ldr	r2, [pc, #64]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e40:	68d2      	ldr	r2, [r2, #12]
 8003e42:	0a12      	lsrs	r2, r2, #8
 8003e44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e48:	fb02 f303 	mul.w	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]
      break;
 8003e4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	0e5b      	lsrs	r3, r3, #25
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	e001      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e70:	693b      	ldr	r3, [r7, #16]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	00f42400 	.word	0x00f42400
 8003e88:	016e3600 	.word	0x016e3600

08003e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ea8:	f7ff fff0 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4904      	ldr	r1, [pc, #16]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08005d74 	.word	0x08005d74

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ed4:	f7ff ffda 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0adb      	lsrs	r3, r3, #11
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	08005d74 	.word	0x08005d74

08003efc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	3301      	adds	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d10c      	bne.n	8003f3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f20:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f2a:	68d2      	ldr	r2, [r2, #12]
 8003f2c:	0a12      	lsrs	r2, r2, #8
 8003f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	617b      	str	r3, [r7, #20]
    break;
 8003f38:	e00c      	b.n	8003f54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	4a0e      	ldr	r2, [pc, #56]	; (8003f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f44:	68d2      	ldr	r2, [r2, #12]
 8003f46:	0a12      	lsrs	r2, r2, #8
 8003f48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
    break;
 8003f52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	0e5b      	lsrs	r3, r3, #25
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f6e:	687b      	ldr	r3, [r7, #4]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	016e3600 	.word	0x016e3600
 8003f84:	00f42400 	.word	0x00f42400

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f90:	2300      	movs	r3, #0
 8003f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f94:	2300      	movs	r3, #0
 8003f96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8098 	beq.w	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003faa:	4b43      	ldr	r3, [pc, #268]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a3f      	ldr	r2, [pc, #252]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc2:	4b3d      	ldr	r3, [pc, #244]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd2:	4b3a      	ldr	r3, [pc, #232]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a39      	ldr	r2, [pc, #228]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fde:	f7fd f82d 	bl	800103c <HAL_GetTick>
 8003fe2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fe4:	e009      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe6:	f7fd f829 	bl	800103c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d902      	bls.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	74fb      	strb	r3, [r7, #19]
        break;
 8003ff8:	e005      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ffa:	4b30      	ldr	r3, [pc, #192]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ef      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d159      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800400c:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01e      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	429a      	cmp	r2, r3
 8004026:	d019      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004028:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a1b      	ldr	r2, [pc, #108]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fc ffe9 	bl	800103c <HAL_GetTick>
 800406a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406c:	e00b      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fc ffe5 	bl	800103c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d902      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	74fb      	strb	r3, [r7, #19]
            break;
 8004084:	e006      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004086:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ec      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a8:	4903      	ldr	r1, [pc, #12]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040b0:	e008      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040b2:	7cfb      	ldrb	r3, [r7, #19]
 80040b4:	74bb      	strb	r3, [r7, #18]
 80040b6:	e005      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c4:	7c7b      	ldrb	r3, [r7, #17]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d105      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ca:	4ba7      	ldr	r3, [pc, #668]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	4aa6      	ldr	r2, [pc, #664]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040e2:	4ba1      	ldr	r3, [pc, #644]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f023 0203 	bic.w	r2, r3, #3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	499d      	ldr	r1, [pc, #628]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004104:	4b98      	ldr	r3, [pc, #608]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 020c 	bic.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	4995      	ldr	r1, [pc, #596]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004126:	4b90      	ldr	r3, [pc, #576]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	498c      	ldr	r1, [pc, #560]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004148:	4b87      	ldr	r3, [pc, #540]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4984      	ldr	r1, [pc, #528]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800416a:	4b7f      	ldr	r3, [pc, #508]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	497b      	ldr	r1, [pc, #492]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800418c:	4b76      	ldr	r3, [pc, #472]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	4973      	ldr	r1, [pc, #460]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ae:	4b6e      	ldr	r3, [pc, #440]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	496a      	ldr	r1, [pc, #424]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041d0:	4b65      	ldr	r3, [pc, #404]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4962      	ldr	r1, [pc, #392]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041f2:	4b5d      	ldr	r3, [pc, #372]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	4959      	ldr	r1, [pc, #356]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004214:	4b54      	ldr	r3, [pc, #336]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800421a:	f023 0203 	bic.w	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	4951      	ldr	r1, [pc, #324]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004236:	4b4c      	ldr	r3, [pc, #304]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	4948      	ldr	r1, [pc, #288]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004258:	4b43      	ldr	r3, [pc, #268]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	4940      	ldr	r1, [pc, #256]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004278:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a3a      	ldr	r2, [pc, #232]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004282:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429e:	4932      	ldr	r1, [pc, #200]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b0:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a2c      	ldr	r2, [pc, #176]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d015      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042c8:	4b27      	ldr	r3, [pc, #156]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	4924      	ldr	r1, [pc, #144]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e6:	d105      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	4916      	ldr	r1, [pc, #88]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800431e:	d105      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004320:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a10      	ldr	r2, [pc, #64]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d019      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	4908      	ldr	r1, [pc, #32]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004356:	d109      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a02      	ldr	r2, [pc, #8]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004362:	60d3      	str	r3, [r2, #12]
 8004364:	e002      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d015      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004378:	4b29      	ldr	r3, [pc, #164]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	4926      	ldr	r1, [pc, #152]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004396:	d105      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a20      	ldr	r2, [pc, #128]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800439e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	4918      	ldr	r1, [pc, #96]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ce:	d105      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	490a      	ldr	r1, [pc, #40]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a04      	ldr	r2, [pc, #16]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004412:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004414:	7cbb      	ldrb	r3, [r7, #18]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000

08004424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e049      	b.n	80044ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc fcd8 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f000 fbac 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d001      	beq.n	80044ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e04c      	b.n	8004586 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a26      	ldr	r2, [pc, #152]	; (8004594 <HAL_TIM_Base_Start+0xc0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d022      	beq.n	8004544 <HAL_TIM_Base_Start+0x70>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004506:	d01d      	beq.n	8004544 <HAL_TIM_Base_Start+0x70>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <HAL_TIM_Base_Start+0xc4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d018      	beq.n	8004544 <HAL_TIM_Base_Start+0x70>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a21      	ldr	r2, [pc, #132]	; (800459c <HAL_TIM_Base_Start+0xc8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d013      	beq.n	8004544 <HAL_TIM_Base_Start+0x70>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1f      	ldr	r2, [pc, #124]	; (80045a0 <HAL_TIM_Base_Start+0xcc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00e      	beq.n	8004544 <HAL_TIM_Base_Start+0x70>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_TIM_Base_Start+0xd0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_TIM_Base_Start+0x70>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1c      	ldr	r2, [pc, #112]	; (80045a8 <HAL_TIM_Base_Start+0xd4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_TIM_Base_Start+0x70>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_TIM_Base_Start+0xd8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d115      	bne.n	8004570 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_TIM_Base_Start+0xdc>)
 800454c:	4013      	ands	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b06      	cmp	r3, #6
 8004554:	d015      	beq.n	8004582 <HAL_TIM_Base_Start+0xae>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d011      	beq.n	8004582 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456e:	e008      	b.n	8004582 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e000      	b.n	8004584 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40013400 	.word	0x40013400
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40015000 	.word	0x40015000
 80045b0:	00010007 	.word	0x00010007

080045b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d001      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e054      	b.n	8004676 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a26      	ldr	r2, [pc, #152]	; (8004684 <HAL_TIM_Base_Start_IT+0xd0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d022      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x80>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f6:	d01d      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x80>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a22      	ldr	r2, [pc, #136]	; (8004688 <HAL_TIM_Base_Start_IT+0xd4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d018      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x80>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a21      	ldr	r2, [pc, #132]	; (800468c <HAL_TIM_Base_Start_IT+0xd8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x80>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <HAL_TIM_Base_Start_IT+0xdc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x80>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <HAL_TIM_Base_Start_IT+0xe0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x80>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <HAL_TIM_Base_Start_IT+0xe4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x80>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1b      	ldr	r2, [pc, #108]	; (800469c <HAL_TIM_Base_Start_IT+0xe8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d115      	bne.n	8004660 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_TIM_Base_Start_IT+0xec>)
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b06      	cmp	r3, #6
 8004644:	d015      	beq.n	8004672 <HAL_TIM_Base_Start_IT+0xbe>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d011      	beq.n	8004672 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	e008      	b.n	8004672 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e000      	b.n	8004674 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40013400 	.word	0x40013400
 8004698:	40014000 	.word	0x40014000
 800469c:	40015000 	.word	0x40015000
 80046a0:	00010007 	.word	0x00010007

080046a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d020      	beq.n	8004708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01b      	beq.n	8004708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0202 	mvn.w	r2, #2
 80046d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fa48 	bl	8004b84 <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa3a 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fa4b 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0204 	mvn.w	r2, #4
 8004724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa22 	bl	8004b84 <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa14 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fa25 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0208 	mvn.w	r2, #8
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f9fc 	bl	8004b84 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9ee 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f9ff 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0210 	mvn.w	r2, #16
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2208      	movs	r2, #8
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f9d6 	bl	8004b84 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f9c8 	bl	8004b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f9d9 	bl	8004b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00c      	beq.n	8004810 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0201 	mvn.w	r2, #1
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc f918 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00c      	beq.n	800483e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fbb1 	bl	8004fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00c      	beq.n	8004862 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800485a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fba9 	bl	8004fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00c      	beq.n	8004886 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800487e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f993 	bl	8004bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00c      	beq.n	80048aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f06f 0220 	mvn.w	r2, #32
 80048a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fb71 	bl	8004f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00c      	beq.n	80048ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80048c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb7d 	bl	8004fc8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80048ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb75 	bl	8004fdc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00c      	beq.n	8004916 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb6d 	bl	8004ff0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00c      	beq.n	800493a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fb65 	bl	8005004 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIM_ConfigClockSource+0x1c>
 800495c:	2302      	movs	r3, #2
 800495e:	e0f6      	b.n	8004b4e <HAL_TIM_ConfigClockSource+0x20a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800497e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a6f      	ldr	r2, [pc, #444]	; (8004b58 <HAL_TIM_ConfigClockSource+0x214>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f000 80c1 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049a0:	4a6d      	ldr	r2, [pc, #436]	; (8004b58 <HAL_TIM_ConfigClockSource+0x214>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f200 80c6 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a8:	4a6c      	ldr	r2, [pc, #432]	; (8004b5c <HAL_TIM_ConfigClockSource+0x218>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f000 80b9 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049b0:	4a6a      	ldr	r2, [pc, #424]	; (8004b5c <HAL_TIM_ConfigClockSource+0x218>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f200 80be 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049b8:	4a69      	ldr	r2, [pc, #420]	; (8004b60 <HAL_TIM_ConfigClockSource+0x21c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f000 80b1 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049c0:	4a67      	ldr	r2, [pc, #412]	; (8004b60 <HAL_TIM_ConfigClockSource+0x21c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f200 80b6 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049c8:	4a66      	ldr	r2, [pc, #408]	; (8004b64 <HAL_TIM_ConfigClockSource+0x220>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f000 80a9 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049d0:	4a64      	ldr	r2, [pc, #400]	; (8004b64 <HAL_TIM_ConfigClockSource+0x220>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f200 80ae 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049d8:	4a63      	ldr	r2, [pc, #396]	; (8004b68 <HAL_TIM_ConfigClockSource+0x224>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	f000 80a1 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049e0:	4a61      	ldr	r2, [pc, #388]	; (8004b68 <HAL_TIM_ConfigClockSource+0x224>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	f200 80a6 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e8:	4a60      	ldr	r2, [pc, #384]	; (8004b6c <HAL_TIM_ConfigClockSource+0x228>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	f000 8099 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 80049f0:	4a5e      	ldr	r2, [pc, #376]	; (8004b6c <HAL_TIM_ConfigClockSource+0x228>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f200 809e 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 80049f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80049fc:	f000 8091 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a04:	f200 8096 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a0c:	f000 8089 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a14:	f200 808e 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1c:	d03e      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0x158>
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a22:	f200 8087 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	f000 8086 	beq.w	8004b3a <HAL_TIM_ConfigClockSource+0x1f6>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	d87f      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a34:	2b70      	cmp	r3, #112	; 0x70
 8004a36:	d01a      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x12a>
 8004a38:	2b70      	cmp	r3, #112	; 0x70
 8004a3a:	d87b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a3c:	2b60      	cmp	r3, #96	; 0x60
 8004a3e:	d050      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x19e>
 8004a40:	2b60      	cmp	r3, #96	; 0x60
 8004a42:	d877      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	2b50      	cmp	r3, #80	; 0x50
 8004a46:	d03c      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x17e>
 8004a48:	2b50      	cmp	r3, #80	; 0x50
 8004a4a:	d873      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d058      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x1be>
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d86f      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a54:	2b30      	cmp	r3, #48	; 0x30
 8004a56:	d064      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a58:	2b30      	cmp	r3, #48	; 0x30
 8004a5a:	d86b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d060      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d867      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d05c      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d05a      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x1de>
 8004a6c:	e062      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a7e:	f000 f9cf 	bl	8004e20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	609a      	str	r2, [r3, #8]
      break;
 8004a9a:	e04f      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aac:	f000 f9b8 	bl	8004e20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004abe:	609a      	str	r2, [r3, #8]
      break;
 8004ac0:	e03c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 f92a 	bl	8004d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2150      	movs	r1, #80	; 0x50
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f983 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e02c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 f949 	bl	8004d86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2160      	movs	r1, #96	; 0x60
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f973 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004b00:	e01c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 f90a 	bl	8004d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f963 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004b20:	e00c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f000 f95a 	bl	8004de6 <TIM_ITRx_SetConfig>
      break;
 8004b32:	e003      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e000      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	00100070 	.word	0x00100070
 8004b5c:	00100060 	.word	0x00100060
 8004b60:	00100050 	.word	0x00100050
 8004b64:	00100040 	.word	0x00100040
 8004b68:	00100030 	.word	0x00100030
 8004b6c:	00100020 	.word	0x00100020

08004b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a4c      	ldr	r2, [pc, #304]	; (8004d04 <TIM_Base_SetConfig+0x144>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d017      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d013      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a49      	ldr	r2, [pc, #292]	; (8004d08 <TIM_Base_SetConfig+0x148>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a48      	ldr	r2, [pc, #288]	; (8004d0c <TIM_Base_SetConfig+0x14c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a47      	ldr	r2, [pc, #284]	; (8004d10 <TIM_Base_SetConfig+0x150>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	; (8004d14 <TIM_Base_SetConfig+0x154>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x48>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a45      	ldr	r2, [pc, #276]	; (8004d18 <TIM_Base_SetConfig+0x158>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a39      	ldr	r2, [pc, #228]	; (8004d04 <TIM_Base_SetConfig+0x144>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d023      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d01f      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a36      	ldr	r2, [pc, #216]	; (8004d08 <TIM_Base_SetConfig+0x148>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01b      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a35      	ldr	r2, [pc, #212]	; (8004d0c <TIM_Base_SetConfig+0x14c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d017      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a34      	ldr	r2, [pc, #208]	; (8004d10 <TIM_Base_SetConfig+0x150>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a33      	ldr	r2, [pc, #204]	; (8004d14 <TIM_Base_SetConfig+0x154>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00f      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a33      	ldr	r2, [pc, #204]	; (8004d1c <TIM_Base_SetConfig+0x15c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a32      	ldr	r2, [pc, #200]	; (8004d20 <TIM_Base_SetConfig+0x160>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <TIM_Base_SetConfig+0x164>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_Base_SetConfig+0xaa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2c      	ldr	r2, [pc, #176]	; (8004d18 <TIM_Base_SetConfig+0x158>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d108      	bne.n	8004c7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <TIM_Base_SetConfig+0x144>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d013      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <TIM_Base_SetConfig+0x154>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00f      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a1a      	ldr	r2, [pc, #104]	; (8004d1c <TIM_Base_SetConfig+0x15c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <TIM_Base_SetConfig+0x160>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d007      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <TIM_Base_SetConfig+0x164>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_Base_SetConfig+0x110>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a13      	ldr	r2, [pc, #76]	; (8004d18 <TIM_Base_SetConfig+0x158>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d103      	bne.n	8004cd8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f023 0201 	bic.w	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	611a      	str	r2, [r3, #16]
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40013400 	.word	0x40013400
 8004d18:	40015000 	.word	0x40015000
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f023 0201 	bic.w	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f023 030a 	bic.w	r3, r3, #10
 8004d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b087      	sub	sp, #28
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f023 0210 	bic.w	r2, r3, #16
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	621a      	str	r2, [r3, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f043 0307 	orr.w	r3, r3, #7
 8004e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	609a      	str	r2, [r3, #8]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	021a      	lsls	r2, r3, #8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	609a      	str	r2, [r3, #8]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e074      	b.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a34      	ldr	r2, [pc, #208]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d009      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a33      	ldr	r2, [pc, #204]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a31      	ldr	r2, [pc, #196]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ebc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d022      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d01d      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d10c      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40015000 	.word	0x40015000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40014000 	.word	0x40014000

08004f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e042      	b.n	80050b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fb fe87 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2224      	movs	r2, #36	; 0x24
 8005046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0201 	bic.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fb24 	bl	80056b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f825 	bl	80050b8 <UART_SetConfig>
 800506e:	4603      	mov	r3, r0
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e01b      	b.n	80050b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fba3 	bl	80057f4 <UART_CheckIdleState>
 80050ae:	4603      	mov	r3, r0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050bc:	b08c      	sub	sp, #48	; 0x30
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	4313      	orrs	r3, r2
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4baa      	ldr	r3, [pc, #680]	; (8005390 <UART_SetConfig+0x2d8>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f0:	430b      	orrs	r3, r1
 80050f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a9f      	ldr	r2, [pc, #636]	; (8005394 <UART_SetConfig+0x2dc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005120:	4313      	orrs	r3, r2
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800512e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005138:	430b      	orrs	r3, r1
 800513a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	f023 010f 	bic.w	r1, r3, #15
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a90      	ldr	r2, [pc, #576]	; (8005398 <UART_SetConfig+0x2e0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d125      	bne.n	80051a8 <UART_SetConfig+0xf0>
 800515c:	4b8f      	ldr	r3, [pc, #572]	; (800539c <UART_SetConfig+0x2e4>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b03      	cmp	r3, #3
 8005168:	d81a      	bhi.n	80051a0 <UART_SetConfig+0xe8>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UART_SetConfig+0xb8>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	08005181 	.word	0x08005181
 8005174:	08005191 	.word	0x08005191
 8005178:	08005189 	.word	0x08005189
 800517c:	08005199 	.word	0x08005199
 8005180:	2301      	movs	r3, #1
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005186:	e116      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005188:	2302      	movs	r3, #2
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518e:	e112      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005190:	2304      	movs	r3, #4
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005196:	e10e      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005198:	2308      	movs	r3, #8
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519e:	e10a      	b.n	80053b6 <UART_SetConfig+0x2fe>
 80051a0:	2310      	movs	r3, #16
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a6:	e106      	b.n	80053b6 <UART_SetConfig+0x2fe>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a7c      	ldr	r2, [pc, #496]	; (80053a0 <UART_SetConfig+0x2e8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d138      	bne.n	8005224 <UART_SetConfig+0x16c>
 80051b2:	4b7a      	ldr	r3, [pc, #488]	; (800539c <UART_SetConfig+0x2e4>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d82d      	bhi.n	800521c <UART_SetConfig+0x164>
 80051c0:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0x110>)
 80051c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c6:	bf00      	nop
 80051c8:	080051fd 	.word	0x080051fd
 80051cc:	0800521d 	.word	0x0800521d
 80051d0:	0800521d 	.word	0x0800521d
 80051d4:	0800521d 	.word	0x0800521d
 80051d8:	0800520d 	.word	0x0800520d
 80051dc:	0800521d 	.word	0x0800521d
 80051e0:	0800521d 	.word	0x0800521d
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	08005205 	.word	0x08005205
 80051ec:	0800521d 	.word	0x0800521d
 80051f0:	0800521d 	.word	0x0800521d
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005215 	.word	0x08005215
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005202:	e0d8      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005204:	2302      	movs	r3, #2
 8005206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520a:	e0d4      	b.n	80053b6 <UART_SetConfig+0x2fe>
 800520c:	2304      	movs	r3, #4
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005212:	e0d0      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005214:	2308      	movs	r3, #8
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521a:	e0cc      	b.n	80053b6 <UART_SetConfig+0x2fe>
 800521c:	2310      	movs	r3, #16
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005222:	e0c8      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a5e      	ldr	r2, [pc, #376]	; (80053a4 <UART_SetConfig+0x2ec>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d125      	bne.n	800527a <UART_SetConfig+0x1c2>
 800522e:	4b5b      	ldr	r3, [pc, #364]	; (800539c <UART_SetConfig+0x2e4>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005238:	2b30      	cmp	r3, #48	; 0x30
 800523a:	d016      	beq.n	800526a <UART_SetConfig+0x1b2>
 800523c:	2b30      	cmp	r3, #48	; 0x30
 800523e:	d818      	bhi.n	8005272 <UART_SetConfig+0x1ba>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d00a      	beq.n	800525a <UART_SetConfig+0x1a2>
 8005244:	2b20      	cmp	r3, #32
 8005246:	d814      	bhi.n	8005272 <UART_SetConfig+0x1ba>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <UART_SetConfig+0x19a>
 800524c:	2b10      	cmp	r3, #16
 800524e:	d008      	beq.n	8005262 <UART_SetConfig+0x1aa>
 8005250:	e00f      	b.n	8005272 <UART_SetConfig+0x1ba>
 8005252:	2300      	movs	r3, #0
 8005254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005258:	e0ad      	b.n	80053b6 <UART_SetConfig+0x2fe>
 800525a:	2302      	movs	r3, #2
 800525c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005260:	e0a9      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005262:	2304      	movs	r3, #4
 8005264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005268:	e0a5      	b.n	80053b6 <UART_SetConfig+0x2fe>
 800526a:	2308      	movs	r3, #8
 800526c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005270:	e0a1      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005272:	2310      	movs	r3, #16
 8005274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005278:	e09d      	b.n	80053b6 <UART_SetConfig+0x2fe>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a4a      	ldr	r2, [pc, #296]	; (80053a8 <UART_SetConfig+0x2f0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d125      	bne.n	80052d0 <UART_SetConfig+0x218>
 8005284:	4b45      	ldr	r3, [pc, #276]	; (800539c <UART_SetConfig+0x2e4>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800528e:	2bc0      	cmp	r3, #192	; 0xc0
 8005290:	d016      	beq.n	80052c0 <UART_SetConfig+0x208>
 8005292:	2bc0      	cmp	r3, #192	; 0xc0
 8005294:	d818      	bhi.n	80052c8 <UART_SetConfig+0x210>
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d00a      	beq.n	80052b0 <UART_SetConfig+0x1f8>
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d814      	bhi.n	80052c8 <UART_SetConfig+0x210>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <UART_SetConfig+0x1f0>
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d008      	beq.n	80052b8 <UART_SetConfig+0x200>
 80052a6:	e00f      	b.n	80052c8 <UART_SetConfig+0x210>
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ae:	e082      	b.n	80053b6 <UART_SetConfig+0x2fe>
 80052b0:	2302      	movs	r3, #2
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b6:	e07e      	b.n	80053b6 <UART_SetConfig+0x2fe>
 80052b8:	2304      	movs	r3, #4
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052be:	e07a      	b.n	80053b6 <UART_SetConfig+0x2fe>
 80052c0:	2308      	movs	r3, #8
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e076      	b.n	80053b6 <UART_SetConfig+0x2fe>
 80052c8:	2310      	movs	r3, #16
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e072      	b.n	80053b6 <UART_SetConfig+0x2fe>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a35      	ldr	r2, [pc, #212]	; (80053ac <UART_SetConfig+0x2f4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d12a      	bne.n	8005330 <UART_SetConfig+0x278>
 80052da:	4b30      	ldr	r3, [pc, #192]	; (800539c <UART_SetConfig+0x2e4>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e8:	d01a      	beq.n	8005320 <UART_SetConfig+0x268>
 80052ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ee:	d81b      	bhi.n	8005328 <UART_SetConfig+0x270>
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	d00c      	beq.n	8005310 <UART_SetConfig+0x258>
 80052f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052fa:	d815      	bhi.n	8005328 <UART_SetConfig+0x270>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <UART_SetConfig+0x250>
 8005300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005304:	d008      	beq.n	8005318 <UART_SetConfig+0x260>
 8005306:	e00f      	b.n	8005328 <UART_SetConfig+0x270>
 8005308:	2300      	movs	r3, #0
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530e:	e052      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005310:	2302      	movs	r3, #2
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005316:	e04e      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005318:	2304      	movs	r3, #4
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531e:	e04a      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005320:	2308      	movs	r3, #8
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005326:	e046      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532e:	e042      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a17      	ldr	r2, [pc, #92]	; (8005394 <UART_SetConfig+0x2dc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d13a      	bne.n	80053b0 <UART_SetConfig+0x2f8>
 800533a:	4b18      	ldr	r3, [pc, #96]	; (800539c <UART_SetConfig+0x2e4>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005348:	d01a      	beq.n	8005380 <UART_SetConfig+0x2c8>
 800534a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800534e:	d81b      	bhi.n	8005388 <UART_SetConfig+0x2d0>
 8005350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005354:	d00c      	beq.n	8005370 <UART_SetConfig+0x2b8>
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d815      	bhi.n	8005388 <UART_SetConfig+0x2d0>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <UART_SetConfig+0x2b0>
 8005360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005364:	d008      	beq.n	8005378 <UART_SetConfig+0x2c0>
 8005366:	e00f      	b.n	8005388 <UART_SetConfig+0x2d0>
 8005368:	2300      	movs	r3, #0
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536e:	e022      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005370:	2302      	movs	r3, #2
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005376:	e01e      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537e:	e01a      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005386:	e016      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538e:	e012      	b.n	80053b6 <UART_SetConfig+0x2fe>
 8005390:	cfff69f3 	.word	0xcfff69f3
 8005394:	40008000 	.word	0x40008000
 8005398:	40013800 	.word	0x40013800
 800539c:	40021000 	.word	0x40021000
 80053a0:	40004400 	.word	0x40004400
 80053a4:	40004800 	.word	0x40004800
 80053a8:	40004c00 	.word	0x40004c00
 80053ac:	40005000 	.word	0x40005000
 80053b0:	2310      	movs	r3, #16
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4aae      	ldr	r2, [pc, #696]	; (8005674 <UART_SetConfig+0x5bc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	f040 8097 	bne.w	80054f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d823      	bhi.n	8005412 <UART_SetConfig+0x35a>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <UART_SetConfig+0x318>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	08005413 	.word	0x08005413
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005413 	.word	0x08005413
 80053e0:	08005403 	.word	0x08005403
 80053e4:	08005413 	.word	0x08005413
 80053e8:	08005413 	.word	0x08005413
 80053ec:	08005413 	.word	0x08005413
 80053f0:	0800540b 	.word	0x0800540b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f4:	f7fe fd56 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 80053f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053fa:	e010      	b.n	800541e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053fc:	4b9e      	ldr	r3, [pc, #632]	; (8005678 <UART_SetConfig+0x5c0>)
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005400:	e00d      	b.n	800541e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005402:	f7fe fce1 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005408:	e009      	b.n	800541e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005410:	e005      	b.n	800541e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800541c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8130 	beq.w	8005686 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	4a94      	ldr	r2, [pc, #592]	; (800567c <UART_SetConfig+0x5c4>)
 800542c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005430:	461a      	mov	r2, r3
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	fbb3 f3f2 	udiv	r3, r3, r2
 8005438:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	4413      	add	r3, r2
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	429a      	cmp	r2, r3
 8005448:	d305      	bcc.n	8005456 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	429a      	cmp	r2, r3
 8005454:	d903      	bls.n	800545e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800545c:	e113      	b.n	8005686 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	2200      	movs	r2, #0
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	60fa      	str	r2, [r7, #12]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	4a84      	ldr	r2, [pc, #528]	; (800567c <UART_SetConfig+0x5c4>)
 800546c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005470:	b29b      	uxth	r3, r3
 8005472:	2200      	movs	r2, #0
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800547c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005480:	f7fa feca 	bl	8000218 <__aeabi_uldivmod>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4610      	mov	r0, r2
 800548a:	4619      	mov	r1, r3
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	020b      	lsls	r3, r1, #8
 8005496:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800549a:	0202      	lsls	r2, r0, #8
 800549c:	6979      	ldr	r1, [r7, #20]
 800549e:	6849      	ldr	r1, [r1, #4]
 80054a0:	0849      	lsrs	r1, r1, #1
 80054a2:	2000      	movs	r0, #0
 80054a4:	460c      	mov	r4, r1
 80054a6:	4605      	mov	r5, r0
 80054a8:	eb12 0804 	adds.w	r8, r2, r4
 80054ac:	eb43 0905 	adc.w	r9, r3, r5
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	469a      	mov	sl, r3
 80054b8:	4693      	mov	fp, r2
 80054ba:	4652      	mov	r2, sl
 80054bc:	465b      	mov	r3, fp
 80054be:	4640      	mov	r0, r8
 80054c0:	4649      	mov	r1, r9
 80054c2:	f7fa fea9 	bl	8000218 <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4613      	mov	r3, r2
 80054cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d4:	d308      	bcc.n	80054e8 <UART_SetConfig+0x430>
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054dc:	d204      	bcs.n	80054e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a3a      	ldr	r2, [r7, #32]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	e0ce      	b.n	8005686 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054ee:	e0ca      	b.n	8005686 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f8:	d166      	bne.n	80055c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80054fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d827      	bhi.n	8005552 <UART_SetConfig+0x49a>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <UART_SetConfig+0x450>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800552d 	.word	0x0800552d
 800550c:	08005535 	.word	0x08005535
 8005510:	0800553d 	.word	0x0800553d
 8005514:	08005553 	.word	0x08005553
 8005518:	08005543 	.word	0x08005543
 800551c:	08005553 	.word	0x08005553
 8005520:	08005553 	.word	0x08005553
 8005524:	08005553 	.word	0x08005553
 8005528:	0800554b 	.word	0x0800554b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800552c:	f7fe fcba 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8005530:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005532:	e014      	b.n	800555e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005534:	f7fe fccc 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800553a:	e010      	b.n	800555e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800553c:	4b4e      	ldr	r3, [pc, #312]	; (8005678 <UART_SetConfig+0x5c0>)
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005540:	e00d      	b.n	800555e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005542:	f7fe fc41 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8005546:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005548:	e009      	b.n	800555e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005550:	e005      	b.n	800555e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800555c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8090 	beq.w	8005686 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	4a44      	ldr	r2, [pc, #272]	; (800567c <UART_SetConfig+0x5c4>)
 800556c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005570:	461a      	mov	r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	fbb3 f3f2 	udiv	r3, r3, r2
 8005578:	005a      	lsls	r2, r3, #1
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	441a      	add	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	2b0f      	cmp	r3, #15
 8005590:	d916      	bls.n	80055c0 <UART_SetConfig+0x508>
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d212      	bcs.n	80055c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f023 030f 	bic.w	r3, r3, #15
 80055a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	8bfb      	ldrh	r3, [r7, #30]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	8bfa      	ldrh	r2, [r7, #30]
 80055bc:	60da      	str	r2, [r3, #12]
 80055be:	e062      	b.n	8005686 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055c6:	e05e      	b.n	8005686 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d828      	bhi.n	8005622 <UART_SetConfig+0x56a>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x520>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	08005623 	.word	0x08005623
 80055e8:	08005613 	.word	0x08005613
 80055ec:	08005623 	.word	0x08005623
 80055f0:	08005623 	.word	0x08005623
 80055f4:	08005623 	.word	0x08005623
 80055f8:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fe fc52 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005602:	e014      	b.n	800562e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fe fc64 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8005608:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800560a:	e010      	b.n	800562e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <UART_SetConfig+0x5c0>)
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005610:	e00d      	b.n	800562e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7fe fbd9 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8005616:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005618:	e009      	b.n	800562e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005620:	e005      	b.n	800562e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800562c:	bf00      	nop
    }

    if (pclk != 0U)
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	d028      	beq.n	8005686 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	4a10      	ldr	r2, [pc, #64]	; (800567c <UART_SetConfig+0x5c4>)
 800563a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800563e:	461a      	mov	r2, r3
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	fbb3 f2f2 	udiv	r2, r3, r2
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	441a      	add	r2, r3
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	fbb2 f3f3 	udiv	r3, r2, r3
 8005656:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d910      	bls.n	8005680 <UART_SetConfig+0x5c8>
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005664:	d20c      	bcs.n	8005680 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	b29a      	uxth	r2, r3
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60da      	str	r2, [r3, #12]
 8005670:	e009      	b.n	8005686 <UART_SetConfig+0x5ce>
 8005672:	bf00      	nop
 8005674:	40008000 	.word	0x40008000
 8005678:	00f42400 	.word	0x00f42400
 800567c:	08005d7c 	.word	0x08005d7c
      }
      else
      {
        ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2201      	movs	r2, #1
 800568a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2201      	movs	r2, #1
 8005692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2200      	movs	r2, #0
 800569a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2200      	movs	r2, #0
 80056a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80056a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3730      	adds	r7, #48	; 0x30
 80056aa:	46bd      	mov	sp, r7
 80056ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080056b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ae:	d10a      	bne.n	80057c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b098      	sub	sp, #96	; 0x60
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005804:	f7fb fc1a 	bl	800103c <HAL_GetTick>
 8005808:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b08      	cmp	r3, #8
 8005816:	d12f      	bne.n	8005878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005820:	2200      	movs	r2, #0
 8005822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f88e 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d022      	beq.n	8005878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005846:	653b      	str	r3, [r7, #80]	; 0x50
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005850:	647b      	str	r3, [r7, #68]	; 0x44
 8005852:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e6      	bne.n	8005832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e063      	b.n	8005940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b04      	cmp	r3, #4
 8005884:	d149      	bne.n	800591a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005886:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588e:	2200      	movs	r2, #0
 8005890:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f857 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d03c      	beq.n	800591a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	623b      	str	r3, [r7, #32]
   return(result);
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
 80058c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e6      	bne.n	80058a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f2:	61fa      	str	r2, [r7, #28]
 80058f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e012      	b.n	8005940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3758      	adds	r7, #88	; 0x58
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005958:	e04f      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d04b      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fb fb6b 	bl	800103c <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <UART_WaitOnFlagUntilTimeout+0x30>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e04e      	b.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d037      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b80      	cmp	r3, #128	; 0x80
 800598e:	d034      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d031      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d110      	bne.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2208      	movs	r2, #8
 80059aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f838 	bl	8005a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2208      	movs	r2, #8
 80059b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e029      	b.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d4:	d111      	bne.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f81e 	bl	8005a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e00f      	b.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d0a0      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b095      	sub	sp, #84	; 0x54
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	643b      	str	r3, [r7, #64]	; 0x40
 8005a4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e6      	bne.n	8005a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3308      	adds	r3, #8
 8005a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e3      	bne.n	8005a5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d118      	bne.n	8005ace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f023 0310 	bic.w	r3, r3, #16
 8005ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6979      	ldr	r1, [r7, #20]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e6      	bne.n	8005a9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005ae2:	bf00      	nop
 8005ae4:	3754      	adds	r7, #84	; 0x54
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e027      	b.n	8005b54 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2224      	movs	r2, #36	; 0x24
 8005b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e02d      	b.n	8005bd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	; 0x24
 8005b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f84f 	bl	8005c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e02d      	b.n	8005c50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	; 0x24
 8005c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0201 	bic.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f811 	bl	8005c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c78:	e031      	b.n	8005cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c7e:	2308      	movs	r3, #8
 8005c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	0e5b      	lsrs	r3, r3, #25
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	0f5b      	lsrs	r3, r3, #29
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	7b3a      	ldrb	r2, [r7, #12]
 8005ca6:	4911      	ldr	r1, [pc, #68]	; (8005cec <UARTEx_SetNbDataToProcess+0x94>)
 8005ca8:	5c8a      	ldrb	r2, [r1, r2]
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cae:	7b3a      	ldrb	r2, [r7, #12]
 8005cb0:	490f      	ldr	r1, [pc, #60]	; (8005cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	7b7a      	ldrb	r2, [r7, #13]
 8005cc4:	4909      	ldr	r1, [pc, #36]	; (8005cec <UARTEx_SetNbDataToProcess+0x94>)
 8005cc6:	5c8a      	ldrb	r2, [r1, r2]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ccc:	7b7a      	ldrb	r2, [r7, #13]
 8005cce:	4908      	ldr	r1, [pc, #32]	; (8005cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	08005d94 	.word	0x08005d94
 8005cf0:	08005d9c 	.word	0x08005d9c

08005cf4 <memset>:
 8005cf4:	4402      	add	r2, r0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d100      	bne.n	8005cfe <memset+0xa>
 8005cfc:	4770      	bx	lr
 8005cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005d02:	e7f9      	b.n	8005cf8 <memset+0x4>

08005d04 <__libc_init_array>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4d0d      	ldr	r5, [pc, #52]	; (8005d3c <__libc_init_array+0x38>)
 8005d08:	4c0d      	ldr	r4, [pc, #52]	; (8005d40 <__libc_init_array+0x3c>)
 8005d0a:	1b64      	subs	r4, r4, r5
 8005d0c:	10a4      	asrs	r4, r4, #2
 8005d0e:	2600      	movs	r6, #0
 8005d10:	42a6      	cmp	r6, r4
 8005d12:	d109      	bne.n	8005d28 <__libc_init_array+0x24>
 8005d14:	4d0b      	ldr	r5, [pc, #44]	; (8005d44 <__libc_init_array+0x40>)
 8005d16:	4c0c      	ldr	r4, [pc, #48]	; (8005d48 <__libc_init_array+0x44>)
 8005d18:	f000 f818 	bl	8005d4c <_init>
 8005d1c:	1b64      	subs	r4, r4, r5
 8005d1e:	10a4      	asrs	r4, r4, #2
 8005d20:	2600      	movs	r6, #0
 8005d22:	42a6      	cmp	r6, r4
 8005d24:	d105      	bne.n	8005d32 <__libc_init_array+0x2e>
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2c:	4798      	blx	r3
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7ee      	b.n	8005d10 <__libc_init_array+0xc>
 8005d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d36:	4798      	blx	r3
 8005d38:	3601      	adds	r6, #1
 8005d3a:	e7f2      	b.n	8005d22 <__libc_init_array+0x1e>
 8005d3c:	08005dac 	.word	0x08005dac
 8005d40:	08005dac 	.word	0x08005dac
 8005d44:	08005dac 	.word	0x08005dac
 8005d48:	08005db0 	.word	0x08005db0

08005d4c <_init>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr

08005d58 <_fini>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr
